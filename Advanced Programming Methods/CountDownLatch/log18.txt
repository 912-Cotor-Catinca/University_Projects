ID: 1
Execution stack:
int cnt; Ref(int) v1; Ref(int) v2; Ref(int) v3; new(v1, 2); new(v2, 3); new(v3, 4); newLatch(cnt, readHeap(v2)); fork(writeHeap(v1, readHeap(v1) * 10); print(readHeap(v1)); countDown( cnt )); fork(writeHeap(v2, readHeap(v2) * 10); print(readHeap(v2)); countDown( cnt )); fork(writeHeap(v3, readHeap(v3) * 10); print(readHeap(v3)); countDown( cnt )); await(cnt); print(100); countDown( cnt ); print(100)

Symbol table:

Heap table:

Output:

File table:

------------------------
ID: 1
Execution stack:
int cnt
Ref(int) v1; Ref(int) v2; Ref(int) v3; new(v1, 2); new(v2, 3); new(v3, 4); newLatch(cnt, readHeap(v2)); fork(writeHeap(v1, readHeap(v1) * 10); print(readHeap(v1)); countDown( cnt )); fork(writeHeap(v2, readHeap(v2) * 10); print(readHeap(v2)); countDown( cnt )); fork(writeHeap(v3, readHeap(v3) * 10); print(readHeap(v3)); countDown( cnt )); await(cnt); print(100); countDown( cnt ); print(100)

Symbol table:

Heap table:

Output:

File table:

------------------------
ID: 1
Execution stack:
int cnt
Ref(int) v1; Ref(int) v2; Ref(int) v3; new(v1, 2); new(v2, 3); new(v3, 4); newLatch(cnt, readHeap(v2)); fork(writeHeap(v1, readHeap(v1) * 10); print(readHeap(v1)); countDown( cnt )); fork(writeHeap(v2, readHeap(v2) * 10); print(readHeap(v2)); countDown( cnt )); fork(writeHeap(v3, readHeap(v3) * 10); print(readHeap(v3)); countDown( cnt )); await(cnt); print(100); countDown( cnt ); print(100)

Symbol table:

Heap table:

Output:

File table:

------------------------
ID: 1
Execution stack:
Ref(int) v1; Ref(int) v2; Ref(int) v3; new(v1, 2); new(v2, 3); new(v3, 4); newLatch(cnt, readHeap(v2)); fork(writeHeap(v1, readHeap(v1) * 10); print(readHeap(v1)); countDown( cnt )); fork(writeHeap(v2, readHeap(v2) * 10); print(readHeap(v2)); countDown( cnt )); fork(writeHeap(v3, readHeap(v3) * 10); print(readHeap(v3)); countDown( cnt )); await(cnt); print(100); countDown( cnt ); print(100)

Symbol table:
cnt -> 0

Heap table:

Output:

File table:

------------------------
ID: 1
Execution stack:
Ref(int) v1; Ref(int) v2; Ref(int) v3; new(v1, 2); new(v2, 3); new(v3, 4); newLatch(cnt, readHeap(v2)); fork(writeHeap(v1, readHeap(v1) * 10); print(readHeap(v1)); countDown( cnt )); fork(writeHeap(v2, readHeap(v2) * 10); print(readHeap(v2)); countDown( cnt )); fork(writeHeap(v3, readHeap(v3) * 10); print(readHeap(v3)); countDown( cnt )); await(cnt); print(100); countDown( cnt ); print(100)

Symbol table:
cnt -> 0

Heap table:

Output:

File table:

------------------------
ID: 1
Execution stack:
Ref(int) v1
Ref(int) v2; Ref(int) v3; new(v1, 2); new(v2, 3); new(v3, 4); newLatch(cnt, readHeap(v2)); fork(writeHeap(v1, readHeap(v1) * 10); print(readHeap(v1)); countDown( cnt )); fork(writeHeap(v2, readHeap(v2) * 10); print(readHeap(v2)); countDown( cnt )); fork(writeHeap(v3, readHeap(v3) * 10); print(readHeap(v3)); countDown( cnt )); await(cnt); print(100); countDown( cnt ); print(100)

Symbol table:
cnt -> 0

Heap table:

Output:

File table:

------------------------
ID: 1
Execution stack:
Ref(int) v1
Ref(int) v2; Ref(int) v3; new(v1, 2); new(v2, 3); new(v3, 4); newLatch(cnt, readHeap(v2)); fork(writeHeap(v1, readHeap(v1) * 10); print(readHeap(v1)); countDown( cnt )); fork(writeHeap(v2, readHeap(v2) * 10); print(readHeap(v2)); countDown( cnt )); fork(writeHeap(v3, readHeap(v3) * 10); print(readHeap(v3)); countDown( cnt )); await(cnt); print(100); countDown( cnt ); print(100)

Symbol table:
cnt -> 0

Heap table:

Output:

File table:

------------------------
ID: 1
Execution stack:
Ref(int) v2; Ref(int) v3; new(v1, 2); new(v2, 3); new(v3, 4); newLatch(cnt, readHeap(v2)); fork(writeHeap(v1, readHeap(v1) * 10); print(readHeap(v1)); countDown( cnt )); fork(writeHeap(v2, readHeap(v2) * 10); print(readHeap(v2)); countDown( cnt )); fork(writeHeap(v3, readHeap(v3) * 10); print(readHeap(v3)); countDown( cnt )); await(cnt); print(100); countDown( cnt ); print(100)

Symbol table:
cnt -> 0
v1 -> (1, int)

Heap table:

Output:

File table:

------------------------
ID: 1
Execution stack:
Ref(int) v2; Ref(int) v3; new(v1, 2); new(v2, 3); new(v3, 4); newLatch(cnt, readHeap(v2)); fork(writeHeap(v1, readHeap(v1) * 10); print(readHeap(v1)); countDown( cnt )); fork(writeHeap(v2, readHeap(v2) * 10); print(readHeap(v2)); countDown( cnt )); fork(writeHeap(v3, readHeap(v3) * 10); print(readHeap(v3)); countDown( cnt )); await(cnt); print(100); countDown( cnt ); print(100)

Symbol table:
cnt -> 0
v1 -> (1, int)

Heap table:

Output:

File table:

------------------------
ID: 1
Execution stack:
Ref(int) v2
Ref(int) v3; new(v1, 2); new(v2, 3); new(v3, 4); newLatch(cnt, readHeap(v2)); fork(writeHeap(v1, readHeap(v1) * 10); print(readHeap(v1)); countDown( cnt )); fork(writeHeap(v2, readHeap(v2) * 10); print(readHeap(v2)); countDown( cnt )); fork(writeHeap(v3, readHeap(v3) * 10); print(readHeap(v3)); countDown( cnt )); await(cnt); print(100); countDown( cnt ); print(100)

Symbol table:
cnt -> 0
v1 -> (1, int)

Heap table:

Output:

File table:

------------------------
ID: 1
Execution stack:
Ref(int) v2
Ref(int) v3; new(v1, 2); new(v2, 3); new(v3, 4); newLatch(cnt, readHeap(v2)); fork(writeHeap(v1, readHeap(v1) * 10); print(readHeap(v1)); countDown( cnt )); fork(writeHeap(v2, readHeap(v2) * 10); print(readHeap(v2)); countDown( cnt )); fork(writeHeap(v3, readHeap(v3) * 10); print(readHeap(v3)); countDown( cnt )); await(cnt); print(100); countDown( cnt ); print(100)

Symbol table:
cnt -> 0
v1 -> (1, int)

Heap table:

Output:

File table:

------------------------
ID: 1
Execution stack:
Ref(int) v3; new(v1, 2); new(v2, 3); new(v3, 4); newLatch(cnt, readHeap(v2)); fork(writeHeap(v1, readHeap(v1) * 10); print(readHeap(v1)); countDown( cnt )); fork(writeHeap(v2, readHeap(v2) * 10); print(readHeap(v2)); countDown( cnt )); fork(writeHeap(v3, readHeap(v3) * 10); print(readHeap(v3)); countDown( cnt )); await(cnt); print(100); countDown( cnt ); print(100)

Symbol table:
cnt -> 0
v1 -> (1, int)
v2 -> (1, int)

Heap table:

Output:

File table:

------------------------
ID: 1
Execution stack:
Ref(int) v3; new(v1, 2); new(v2, 3); new(v3, 4); newLatch(cnt, readHeap(v2)); fork(writeHeap(v1, readHeap(v1) * 10); print(readHeap(v1)); countDown( cnt )); fork(writeHeap(v2, readHeap(v2) * 10); print(readHeap(v2)); countDown( cnt )); fork(writeHeap(v3, readHeap(v3) * 10); print(readHeap(v3)); countDown( cnt )); await(cnt); print(100); countDown( cnt ); print(100)

Symbol table:
cnt -> 0
v1 -> (1, int)
v2 -> (1, int)

Heap table:

Output:

File table:

------------------------
ID: 1
Execution stack:
Ref(int) v3
new(v1, 2); new(v2, 3); new(v3, 4); newLatch(cnt, readHeap(v2)); fork(writeHeap(v1, readHeap(v1) * 10); print(readHeap(v1)); countDown( cnt )); fork(writeHeap(v2, readHeap(v2) * 10); print(readHeap(v2)); countDown( cnt )); fork(writeHeap(v3, readHeap(v3) * 10); print(readHeap(v3)); countDown( cnt )); await(cnt); print(100); countDown( cnt ); print(100)

Symbol table:
cnt -> 0
v1 -> (1, int)
v2 -> (1, int)

Heap table:

Output:

File table:

------------------------
ID: 1
Execution stack:
Ref(int) v3
new(v1, 2); new(v2, 3); new(v3, 4); newLatch(cnt, readHeap(v2)); fork(writeHeap(v1, readHeap(v1) * 10); print(readHeap(v1)); countDown( cnt )); fork(writeHeap(v2, readHeap(v2) * 10); print(readHeap(v2)); countDown( cnt )); fork(writeHeap(v3, readHeap(v3) * 10); print(readHeap(v3)); countDown( cnt )); await(cnt); print(100); countDown( cnt ); print(100)

Symbol table:
cnt -> 0
v1 -> (1, int)
v2 -> (1, int)

Heap table:

Output:

File table:

------------------------
ID: 1
Execution stack:
new(v1, 2); new(v2, 3); new(v3, 4); newLatch(cnt, readHeap(v2)); fork(writeHeap(v1, readHeap(v1) * 10); print(readHeap(v1)); countDown( cnt )); fork(writeHeap(v2, readHeap(v2) * 10); print(readHeap(v2)); countDown( cnt )); fork(writeHeap(v3, readHeap(v3) * 10); print(readHeap(v3)); countDown( cnt )); await(cnt); print(100); countDown( cnt ); print(100)

Symbol table:
cnt -> 0
v1 -> (1, int)
v2 -> (1, int)
v3 -> (1, int)

Heap table:

Output:

File table:

------------------------
ID: 1
Execution stack:
new(v1, 2); new(v2, 3); new(v3, 4); newLatch(cnt, readHeap(v2)); fork(writeHeap(v1, readHeap(v1) * 10); print(readHeap(v1)); countDown( cnt )); fork(writeHeap(v2, readHeap(v2) * 10); print(readHeap(v2)); countDown( cnt )); fork(writeHeap(v3, readHeap(v3) * 10); print(readHeap(v3)); countDown( cnt )); await(cnt); print(100); countDown( cnt ); print(100)

Symbol table:
cnt -> 0
v1 -> (1, int)
v2 -> (1, int)
v3 -> (1, int)

Heap table:

Output:

File table:

------------------------
ID: 1
Execution stack:
new(v1, 2)
new(v2, 3); new(v3, 4); newLatch(cnt, readHeap(v2)); fork(writeHeap(v1, readHeap(v1) * 10); print(readHeap(v1)); countDown( cnt )); fork(writeHeap(v2, readHeap(v2) * 10); print(readHeap(v2)); countDown( cnt )); fork(writeHeap(v3, readHeap(v3) * 10); print(readHeap(v3)); countDown( cnt )); await(cnt); print(100); countDown( cnt ); print(100)

Symbol table:
cnt -> 0
v1 -> (1, int)
v2 -> (1, int)
v3 -> (1, int)

Heap table:

Output:

File table:

------------------------
ID: 1
Execution stack:
new(v1, 2)
new(v2, 3); new(v3, 4); newLatch(cnt, readHeap(v2)); fork(writeHeap(v1, readHeap(v1) * 10); print(readHeap(v1)); countDown( cnt )); fork(writeHeap(v2, readHeap(v2) * 10); print(readHeap(v2)); countDown( cnt )); fork(writeHeap(v3, readHeap(v3) * 10); print(readHeap(v3)); countDown( cnt )); await(cnt); print(100); countDown( cnt ); print(100)

Symbol table:
cnt -> 0
v1 -> (1, int)
v2 -> (1, int)
v3 -> (1, int)

Heap table:

Output:

File table:

------------------------
ID: 1
Execution stack:
new(v2, 3); new(v3, 4); newLatch(cnt, readHeap(v2)); fork(writeHeap(v1, readHeap(v1) * 10); print(readHeap(v1)); countDown( cnt )); fork(writeHeap(v2, readHeap(v2) * 10); print(readHeap(v2)); countDown( cnt )); fork(writeHeap(v3, readHeap(v3) * 10); print(readHeap(v3)); countDown( cnt )); await(cnt); print(100); countDown( cnt ); print(100)

Symbol table:
cnt -> 0
v1 -> (1, int)
v2 -> (1, int)
v3 -> (1, int)

Heap table:
1 -> 2

Output:

File table:

------------------------
ID: 1
Execution stack:
new(v2, 3); new(v3, 4); newLatch(cnt, readHeap(v2)); fork(writeHeap(v1, readHeap(v1) * 10); print(readHeap(v1)); countDown( cnt )); fork(writeHeap(v2, readHeap(v2) * 10); print(readHeap(v2)); countDown( cnt )); fork(writeHeap(v3, readHeap(v3) * 10); print(readHeap(v3)); countDown( cnt )); await(cnt); print(100); countDown( cnt ); print(100)

Symbol table:
cnt -> 0
v1 -> (1, int)
v2 -> (1, int)
v3 -> (1, int)

Heap table:
1 -> 2

Output:

File table:

------------------------
ID: 1
Execution stack:
new(v2, 3)
new(v3, 4); newLatch(cnt, readHeap(v2)); fork(writeHeap(v1, readHeap(v1) * 10); print(readHeap(v1)); countDown( cnt )); fork(writeHeap(v2, readHeap(v2) * 10); print(readHeap(v2)); countDown( cnt )); fork(writeHeap(v3, readHeap(v3) * 10); print(readHeap(v3)); countDown( cnt )); await(cnt); print(100); countDown( cnt ); print(100)

Symbol table:
cnt -> 0
v1 -> (1, int)
v2 -> (1, int)
v3 -> (1, int)

Heap table:
1 -> 2

Output:

File table:

------------------------
ID: 1
Execution stack:
new(v2, 3)
new(v3, 4); newLatch(cnt, readHeap(v2)); fork(writeHeap(v1, readHeap(v1) * 10); print(readHeap(v1)); countDown( cnt )); fork(writeHeap(v2, readHeap(v2) * 10); print(readHeap(v2)); countDown( cnt )); fork(writeHeap(v3, readHeap(v3) * 10); print(readHeap(v3)); countDown( cnt )); await(cnt); print(100); countDown( cnt ); print(100)

Symbol table:
cnt -> 0
v1 -> (1, int)
v2 -> (1, int)
v3 -> (1, int)

Heap table:
1 -> 2

Output:

File table:

------------------------
ID: 1
Execution stack:
new(v3, 4); newLatch(cnt, readHeap(v2)); fork(writeHeap(v1, readHeap(v1) * 10); print(readHeap(v1)); countDown( cnt )); fork(writeHeap(v2, readHeap(v2) * 10); print(readHeap(v2)); countDown( cnt )); fork(writeHeap(v3, readHeap(v3) * 10); print(readHeap(v3)); countDown( cnt )); await(cnt); print(100); countDown( cnt ); print(100)

Symbol table:
cnt -> 0
v1 -> (1, int)
v2 -> (2, int)
v3 -> (1, int)

Heap table:
1 -> 2
2 -> 3

Output:

File table:

------------------------
ID: 1
Execution stack:
new(v3, 4); newLatch(cnt, readHeap(v2)); fork(writeHeap(v1, readHeap(v1) * 10); print(readHeap(v1)); countDown( cnt )); fork(writeHeap(v2, readHeap(v2) * 10); print(readHeap(v2)); countDown( cnt )); fork(writeHeap(v3, readHeap(v3) * 10); print(readHeap(v3)); countDown( cnt )); await(cnt); print(100); countDown( cnt ); print(100)

Symbol table:
cnt -> 0
v1 -> (1, int)
v2 -> (2, int)
v3 -> (1, int)

Heap table:
1 -> 2
2 -> 3

Output:

File table:

------------------------
ID: 1
Execution stack:
new(v3, 4)
newLatch(cnt, readHeap(v2)); fork(writeHeap(v1, readHeap(v1) * 10); print(readHeap(v1)); countDown( cnt )); fork(writeHeap(v2, readHeap(v2) * 10); print(readHeap(v2)); countDown( cnt )); fork(writeHeap(v3, readHeap(v3) * 10); print(readHeap(v3)); countDown( cnt )); await(cnt); print(100); countDown( cnt ); print(100)

Symbol table:
cnt -> 0
v1 -> (1, int)
v2 -> (2, int)
v3 -> (1, int)

Heap table:
1 -> 2
2 -> 3

Output:

File table:

------------------------
ID: 1
Execution stack:
new(v3, 4)
newLatch(cnt, readHeap(v2)); fork(writeHeap(v1, readHeap(v1) * 10); print(readHeap(v1)); countDown( cnt )); fork(writeHeap(v2, readHeap(v2) * 10); print(readHeap(v2)); countDown( cnt )); fork(writeHeap(v3, readHeap(v3) * 10); print(readHeap(v3)); countDown( cnt )); await(cnt); print(100); countDown( cnt ); print(100)

Symbol table:
cnt -> 0
v1 -> (1, int)
v2 -> (2, int)
v3 -> (1, int)

Heap table:
1 -> 2
2 -> 3

Output:

File table:

------------------------
ID: 1
Execution stack:
newLatch(cnt, readHeap(v2)); fork(writeHeap(v1, readHeap(v1) * 10); print(readHeap(v1)); countDown( cnt )); fork(writeHeap(v2, readHeap(v2) * 10); print(readHeap(v2)); countDown( cnt )); fork(writeHeap(v3, readHeap(v3) * 10); print(readHeap(v3)); countDown( cnt )); await(cnt); print(100); countDown( cnt ); print(100)

Symbol table:
cnt -> 0
v1 -> (1, int)
v2 -> (2, int)
v3 -> (3, int)

Heap table:
1 -> 2
2 -> 3
3 -> 4

Output:

File table:

------------------------
ID: 1
Execution stack:
newLatch(cnt, readHeap(v2)); fork(writeHeap(v1, readHeap(v1) * 10); print(readHeap(v1)); countDown( cnt )); fork(writeHeap(v2, readHeap(v2) * 10); print(readHeap(v2)); countDown( cnt )); fork(writeHeap(v3, readHeap(v3) * 10); print(readHeap(v3)); countDown( cnt )); await(cnt); print(100); countDown( cnt ); print(100)

Symbol table:
cnt -> 0
v1 -> (1, int)
v2 -> (2, int)
v3 -> (3, int)

Heap table:
1 -> 2
2 -> 3
3 -> 4

Output:

File table:

------------------------
ID: 1
Execution stack:
newLatch(cnt, readHeap(v2))
fork(writeHeap(v1, readHeap(v1) * 10); print(readHeap(v1)); countDown( cnt )); fork(writeHeap(v2, readHeap(v2) * 10); print(readHeap(v2)); countDown( cnt )); fork(writeHeap(v3, readHeap(v3) * 10); print(readHeap(v3)); countDown( cnt )); await(cnt); print(100); countDown( cnt ); print(100)

Symbol table:
cnt -> 0
v1 -> (1, int)
v2 -> (2, int)
v3 -> (3, int)

Heap table:
1 -> 2
2 -> 3
3 -> 4

Output:

File table:

------------------------
ID: 1
Execution stack:
newLatch(cnt, readHeap(v2))
fork(writeHeap(v1, readHeap(v1) * 10); print(readHeap(v1)); countDown( cnt )); fork(writeHeap(v2, readHeap(v2) * 10); print(readHeap(v2)); countDown( cnt )); fork(writeHeap(v3, readHeap(v3) * 10); print(readHeap(v3)); countDown( cnt )); await(cnt); print(100); countDown( cnt ); print(100)

Symbol table:
cnt -> 0
v1 -> (1, int)
v2 -> (2, int)
v3 -> (3, int)

Heap table:
1 -> 2
2 -> 3
3 -> 4

Output:

File table:

------------------------
ID: 1
Execution stack:
fork(writeHeap(v1, readHeap(v1) * 10); print(readHeap(v1)); countDown( cnt )); fork(writeHeap(v2, readHeap(v2) * 10); print(readHeap(v2)); countDown( cnt )); fork(writeHeap(v3, readHeap(v3) * 10); print(readHeap(v3)); countDown( cnt )); await(cnt); print(100); countDown( cnt ); print(100)

Symbol table:
cnt -> 0
v1 -> (1, int)
v2 -> (2, int)
v3 -> (3, int)

Heap table:
1 -> 2
2 -> 3
3 -> 4

Output:

File table:

------------------------
ID: 1
Execution stack:
fork(writeHeap(v1, readHeap(v1) * 10); print(readHeap(v1)); countDown( cnt )); fork(writeHeap(v2, readHeap(v2) * 10); print(readHeap(v2)); countDown( cnt )); fork(writeHeap(v3, readHeap(v3) * 10); print(readHeap(v3)); countDown( cnt )); await(cnt); print(100); countDown( cnt ); print(100)

Symbol table:
cnt -> 0
v1 -> (1, int)
v2 -> (2, int)
v3 -> (3, int)

Heap table:
1 -> 2
2 -> 3
3 -> 4

Output:

File table:

------------------------
ID: 1
Execution stack:
fork(writeHeap(v1, readHeap(v1) * 10); print(readHeap(v1)); countDown( cnt ))
fork(writeHeap(v2, readHeap(v2) * 10); print(readHeap(v2)); countDown( cnt )); fork(writeHeap(v3, readHeap(v3) * 10); print(readHeap(v3)); countDown( cnt )); await(cnt); print(100); countDown( cnt ); print(100)

Symbol table:
cnt -> 0
v1 -> (1, int)
v2 -> (2, int)
v3 -> (3, int)

Heap table:
1 -> 2
2 -> 3
3 -> 4

Output:

File table:

------------------------
ID: 1
Execution stack:
fork(writeHeap(v1, readHeap(v1) * 10); print(readHeap(v1)); countDown( cnt ))
fork(writeHeap(v2, readHeap(v2) * 10); print(readHeap(v2)); countDown( cnt )); fork(writeHeap(v3, readHeap(v3) * 10); print(readHeap(v3)); countDown( cnt )); await(cnt); print(100); countDown( cnt ); print(100)

Symbol table:
cnt -> 0
v1 -> (1, int)
v2 -> (2, int)
v3 -> (3, int)

Heap table:
1 -> 2
2 -> 3
3 -> 4

Output:

File table:

------------------------
ID: 1
Execution stack:
fork(writeHeap(v2, readHeap(v2) * 10); print(readHeap(v2)); countDown( cnt )); fork(writeHeap(v3, readHeap(v3) * 10); print(readHeap(v3)); countDown( cnt )); await(cnt); print(100); countDown( cnt ); print(100)

Symbol table:
cnt -> 0
v1 -> (1, int)
v2 -> (2, int)
v3 -> (3, int)

Heap table:
1 -> 2
2 -> 3
3 -> 4

Output:

File table:

------------------------
ID: 2
Execution stack:
writeHeap(v1, readHeap(v1) * 10); print(readHeap(v1)); countDown( cnt )

Symbol table:
cnt -> 0
v1 -> (1, int)
v2 -> (2, int)
v3 -> (3, int)

Heap table:
1 -> 2
2 -> 3
3 -> 4

Output:

File table:

------------------------
ID: 1
Execution stack:
fork(writeHeap(v2, readHeap(v2) * 10); print(readHeap(v2)); countDown( cnt )); fork(writeHeap(v3, readHeap(v3) * 10); print(readHeap(v3)); countDown( cnt )); await(cnt); print(100); countDown( cnt ); print(100)

Symbol table:
cnt -> 0
v1 -> (1, int)
v2 -> (2, int)
v3 -> (3, int)

Heap table:
1 -> 2
2 -> 3
3 -> 4

Output:

File table:

------------------------
ID: 2
Execution stack:
writeHeap(v1, readHeap(v1) * 10); print(readHeap(v1)); countDown( cnt )

Symbol table:
cnt -> 0
v1 -> (1, int)
v2 -> (2, int)
v3 -> (3, int)

Heap table:
1 -> 2
2 -> 3
3 -> 4

Output:

File table:

------------------------
ID: 1
Execution stack:
fork(writeHeap(v2, readHeap(v2) * 10); print(readHeap(v2)); countDown( cnt ))
fork(writeHeap(v3, readHeap(v3) * 10); print(readHeap(v3)); countDown( cnt )); await(cnt); print(100); countDown( cnt ); print(100)

Symbol table:
cnt -> 0
v1 -> (1, int)
v2 -> (2, int)
v3 -> (3, int)

Heap table:
1 -> 2
2 -> 3
3 -> 4

Output:

File table:

------------------------
ID: 2
Execution stack:
writeHeap(v1, readHeap(v1) * 10)
print(readHeap(v1)); countDown( cnt )

Symbol table:
cnt -> 0
v1 -> (1, int)
v2 -> (2, int)
v3 -> (3, int)

Heap table:
1 -> 2
2 -> 3
3 -> 4

Output:

File table:

------------------------
ID: 1
Execution stack:
fork(writeHeap(v2, readHeap(v2) * 10); print(readHeap(v2)); countDown( cnt ))
fork(writeHeap(v3, readHeap(v3) * 10); print(readHeap(v3)); countDown( cnt )); await(cnt); print(100); countDown( cnt ); print(100)

Symbol table:
cnt -> 0
v1 -> (1, int)
v2 -> (2, int)
v3 -> (3, int)

Heap table:
1 -> 2
2 -> 3
3 -> 4

Output:

File table:

------------------------
ID: 2
Execution stack:
writeHeap(v1, readHeap(v1) * 10)
print(readHeap(v1)); countDown( cnt )

Symbol table:
cnt -> 0
v1 -> (1, int)
v2 -> (2, int)
v3 -> (3, int)

Heap table:
1 -> 2
2 -> 3
3 -> 4

Output:

File table:

------------------------
ID: 1
Execution stack:
fork(writeHeap(v3, readHeap(v3) * 10); print(readHeap(v3)); countDown( cnt )); await(cnt); print(100); countDown( cnt ); print(100)

Symbol table:
cnt -> 0
v1 -> (1, int)
v2 -> (2, int)
v3 -> (3, int)

Heap table:
1 -> 20
2 -> 3
3 -> 4

Output:

File table:

------------------------
ID: 2
Execution stack:
print(readHeap(v1)); countDown( cnt )

Symbol table:
cnt -> 0
v1 -> (1, int)
v2 -> (2, int)
v3 -> (3, int)

Heap table:
1 -> 20
2 -> 3
3 -> 4

Output:

File table:

------------------------
ID: 3
Execution stack:
writeHeap(v2, readHeap(v2) * 10); print(readHeap(v2)); countDown( cnt )

Symbol table:
cnt -> 0
v1 -> (1, int)
v2 -> (2, int)
v3 -> (3, int)

Heap table:
1 -> 20
2 -> 3
3 -> 4

Output:

File table:

------------------------
ID: 1
Execution stack:
fork(writeHeap(v3, readHeap(v3) * 10); print(readHeap(v3)); countDown( cnt )); await(cnt); print(100); countDown( cnt ); print(100)

Symbol table:
cnt -> 0
v1 -> (1, int)
v2 -> (2, int)
v3 -> (3, int)

Heap table:
1 -> 20
2 -> 3
3 -> 4

Output:

File table:

------------------------
ID: 2
Execution stack:
print(readHeap(v1)); countDown( cnt )

Symbol table:
cnt -> 0
v1 -> (1, int)
v2 -> (2, int)
v3 -> (3, int)

Heap table:
1 -> 20
2 -> 3
3 -> 4

Output:

File table:

------------------------
ID: 3
Execution stack:
writeHeap(v2, readHeap(v2) * 10); print(readHeap(v2)); countDown( cnt )

Symbol table:
cnt -> 0
v1 -> (1, int)
v2 -> (2, int)
v3 -> (3, int)

Heap table:
1 -> 20
2 -> 3
3 -> 4

Output:

File table:

------------------------
ID: 1
Execution stack:
fork(writeHeap(v3, readHeap(v3) * 10); print(readHeap(v3)); countDown( cnt ))
await(cnt); print(100); countDown( cnt ); print(100)

Symbol table:
cnt -> 0
v1 -> (1, int)
v2 -> (2, int)
v3 -> (3, int)

Heap table:
1 -> 20
2 -> 3
3 -> 4

Output:

File table:

------------------------
ID: 2
Execution stack:
print(readHeap(v1))
countDown( cnt )

Symbol table:
cnt -> 0
v1 -> (1, int)
v2 -> (2, int)
v3 -> (3, int)

Heap table:
1 -> 20
2 -> 3
3 -> 4

Output:

File table:

------------------------
ID: 3
Execution stack:
writeHeap(v2, readHeap(v2) * 10)
print(readHeap(v2)); countDown( cnt )

Symbol table:
cnt -> 0
v1 -> (1, int)
v2 -> (2, int)
v3 -> (3, int)

Heap table:
1 -> 20
2 -> 3
3 -> 4

Output:

File table:

------------------------
ID: 1
Execution stack:
fork(writeHeap(v3, readHeap(v3) * 10); print(readHeap(v3)); countDown( cnt ))
await(cnt); print(100); countDown( cnt ); print(100)

Symbol table:
cnt -> 0
v1 -> (1, int)
v2 -> (2, int)
v3 -> (3, int)

Heap table:
1 -> 20
2 -> 3
3 -> 4

Output:

File table:

------------------------
ID: 2
Execution stack:
print(readHeap(v1))
countDown( cnt )

Symbol table:
cnt -> 0
v1 -> (1, int)
v2 -> (2, int)
v3 -> (3, int)

Heap table:
1 -> 20
2 -> 3
3 -> 4

Output:

File table:

------------------------
ID: 3
Execution stack:
writeHeap(v2, readHeap(v2) * 10)
print(readHeap(v2)); countDown( cnt )

Symbol table:
cnt -> 0
v1 -> (1, int)
v2 -> (2, int)
v3 -> (3, int)

Heap table:
1 -> 20
2 -> 3
3 -> 4

Output:

File table:

------------------------
ID: 1
Execution stack:
await(cnt); print(100); countDown( cnt ); print(100)

Symbol table:
cnt -> 0
v1 -> (1, int)
v2 -> (2, int)
v3 -> (3, int)

Heap table:
1 -> 20
2 -> 30
3 -> 4

Output:
20

File table:

------------------------
ID: 2
Execution stack:
countDown( cnt )

Symbol table:
cnt -> 0
v1 -> (1, int)
v2 -> (2, int)
v3 -> (3, int)

Heap table:
1 -> 20
2 -> 30
3 -> 4

Output:
20

File table:

------------------------
ID: 3
Execution stack:
print(readHeap(v2)); countDown( cnt )

Symbol table:
cnt -> 0
v1 -> (1, int)
v2 -> (2, int)
v3 -> (3, int)

Heap table:
1 -> 20
2 -> 30
3 -> 4

Output:
20

File table:

------------------------
ID: 4
Execution stack:
writeHeap(v3, readHeap(v3) * 10); print(readHeap(v3)); countDown( cnt )

Symbol table:
cnt -> 0
v1 -> (1, int)
v2 -> (2, int)
v3 -> (3, int)

Heap table:
1 -> 20
2 -> 30
3 -> 4

Output:
20

File table:

------------------------
ID: 1
Execution stack:
await(cnt); print(100); countDown( cnt ); print(100)

Symbol table:
cnt -> 0
v1 -> (1, int)
v2 -> (2, int)
v3 -> (3, int)

Heap table:
1 -> 20
2 -> 30
3 -> 4

Output:
20

File table:

------------------------
ID: 2
Execution stack:
countDown( cnt )

Symbol table:
cnt -> 0
v1 -> (1, int)
v2 -> (2, int)
v3 -> (3, int)

Heap table:
1 -> 20
2 -> 30
3 -> 4

Output:
20

File table:

------------------------
ID: 3
Execution stack:
print(readHeap(v2)); countDown( cnt )

Symbol table:
cnt -> 0
v1 -> (1, int)
v2 -> (2, int)
v3 -> (3, int)

Heap table:
1 -> 20
2 -> 30
3 -> 4

Output:
20

File table:

------------------------
ID: 4
Execution stack:
writeHeap(v3, readHeap(v3) * 10); print(readHeap(v3)); countDown( cnt )

Symbol table:
cnt -> 0
v1 -> (1, int)
v2 -> (2, int)
v3 -> (3, int)

Heap table:
1 -> 20
2 -> 30
3 -> 4

Output:
20

File table:

------------------------
ID: 1
Execution stack:
await(cnt)
print(100); countDown( cnt ); print(100)

Symbol table:
cnt -> 0
v1 -> (1, int)
v2 -> (2, int)
v3 -> (3, int)

Heap table:
1 -> 20
2 -> 30
3 -> 4

Output:
20

File table:

------------------------
ID: 2
Execution stack:
print(2)

Symbol table:
cnt -> 0
v1 -> (1, int)
v2 -> (2, int)
v3 -> (3, int)

Heap table:
1 -> 20
2 -> 30
3 -> 4

Output:
20

File table:

------------------------
ID: 3
Execution stack:
print(readHeap(v2))
countDown( cnt )

Symbol table:
cnt -> 0
v1 -> (1, int)
v2 -> (2, int)
v3 -> (3, int)

Heap table:
1 -> 20
2 -> 30
3 -> 4

Output:
20

File table:

------------------------
ID: 4
Execution stack:
writeHeap(v3, readHeap(v3) * 10)
print(readHeap(v3)); countDown( cnt )

Symbol table:
cnt -> 0
v1 -> (1, int)
v2 -> (2, int)
v3 -> (3, int)

Heap table:
1 -> 20
2 -> 30
3 -> 4

Output:
20

File table:

------------------------
ID: 1
Execution stack:
await(cnt)
print(100); countDown( cnt ); print(100)

Symbol table:
cnt -> 0
v1 -> (1, int)
v2 -> (2, int)
v3 -> (3, int)

Heap table:
1 -> 20
2 -> 30
3 -> 4

Output:
20

File table:

------------------------
ID: 2
Execution stack:
print(2)

Symbol table:
cnt -> 0
v1 -> (1, int)
v2 -> (2, int)
v3 -> (3, int)

Heap table:
1 -> 20
2 -> 30
3 -> 4

Output:
20

File table:

------------------------
ID: 3
Execution stack:
print(readHeap(v2))
countDown( cnt )

Symbol table:
cnt -> 0
v1 -> (1, int)
v2 -> (2, int)
v3 -> (3, int)

Heap table:
1 -> 20
2 -> 30
3 -> 4

Output:
20

File table:

------------------------
ID: 4
Execution stack:
writeHeap(v3, readHeap(v3) * 10)
print(readHeap(v3)); countDown( cnt )

Symbol table:
cnt -> 0
v1 -> (1, int)
v2 -> (2, int)
v3 -> (3, int)

Heap table:
1 -> 20
2 -> 30
3 -> 4

Output:
20

File table:

------------------------
ID: 1
Execution stack:
await(cnt)
print(100); countDown( cnt ); print(100)

Symbol table:
cnt -> 0
v1 -> (1, int)
v2 -> (2, int)
v3 -> (3, int)

Heap table:
1 -> 20
2 -> 30
3 -> 40

Output:
20
30
2

File table:

------------------------
ID: 2
Execution stack:

Symbol table:
cnt -> 0
v1 -> (1, int)
v2 -> (2, int)
v3 -> (3, int)

Heap table:
1 -> 20
2 -> 30
3 -> 40

Output:
20
30
2

File table:

------------------------
ID: 3
Execution stack:
countDown( cnt )

Symbol table:
cnt -> 0
v1 -> (1, int)
v2 -> (2, int)
v3 -> (3, int)

Heap table:
1 -> 20
2 -> 30
3 -> 40

Output:
20
30
2

File table:

------------------------
ID: 4
Execution stack:
print(readHeap(v3)); countDown( cnt )

Symbol table:
cnt -> 0
v1 -> (1, int)
v2 -> (2, int)
v3 -> (3, int)

Heap table:
1 -> 20
2 -> 30
3 -> 40

Output:
20
30
2

File table:

------------------------
ID: 1
Execution stack:
await(cnt)
print(100); countDown( cnt ); print(100)

Symbol table:
cnt -> 0
v1 -> (1, int)
v2 -> (2, int)
v3 -> (3, int)

Heap table:
1 -> 20
2 -> 30
3 -> 40

Output:
20
30
2

File table:

------------------------
ID: 3
Execution stack:
countDown( cnt )

Symbol table:
cnt -> 0
v1 -> (1, int)
v2 -> (2, int)
v3 -> (3, int)

Heap table:
1 -> 20
2 -> 30
3 -> 40

Output:
20
30
2

File table:

------------------------
ID: 4
Execution stack:
print(readHeap(v3)); countDown( cnt )

Symbol table:
cnt -> 0
v1 -> (1, int)
v2 -> (2, int)
v3 -> (3, int)

Heap table:
1 -> 20
2 -> 30
3 -> 40

Output:
20
30
2

File table:

------------------------
ID: 1
Execution stack:
await(cnt)
print(100); countDown( cnt ); print(100)

Symbol table:
cnt -> 0
v1 -> (1, int)
v2 -> (2, int)
v3 -> (3, int)

Heap table:
1 -> 20
2 -> 30
3 -> 40

Output:
20
30
2

File table:

------------------------
ID: 3
Execution stack:
print(3)

Symbol table:
cnt -> 0
v1 -> (1, int)
v2 -> (2, int)
v3 -> (3, int)

Heap table:
1 -> 20
2 -> 30
3 -> 40

Output:
20
30
2

File table:

------------------------
ID: 4
Execution stack:
print(readHeap(v3))
countDown( cnt )

Symbol table:
cnt -> 0
v1 -> (1, int)
v2 -> (2, int)
v3 -> (3, int)

Heap table:
1 -> 20
2 -> 30
3 -> 40

Output:
20
30
2

File table:

------------------------
ID: 1
Execution stack:
await(cnt)
print(100); countDown( cnt ); print(100)

Symbol table:
cnt -> 0
v1 -> (1, int)
v2 -> (2, int)
v3 -> (3, int)

Heap table:
1 -> 20
2 -> 30
3 -> 40

Output:
20
30
2

File table:

------------------------
ID: 3
Execution stack:
print(3)

Symbol table:
cnt -> 0
v1 -> (1, int)
v2 -> (2, int)
v3 -> (3, int)

Heap table:
1 -> 20
2 -> 30
3 -> 40

Output:
20
30
2

File table:

------------------------
ID: 4
Execution stack:
print(readHeap(v3))
countDown( cnt )

Symbol table:
cnt -> 0
v1 -> (1, int)
v2 -> (2, int)
v3 -> (3, int)

Heap table:
1 -> 20
2 -> 30
3 -> 40

Output:
20
30
2

File table:

------------------------
ID: 1
Execution stack:
await(cnt)
print(100); countDown( cnt ); print(100)

Symbol table:
cnt -> 0
v1 -> (1, int)
v2 -> (2, int)
v3 -> (3, int)

Heap table:
1 -> 20
2 -> 30
3 -> 40

Output:
20
30
2
40
3

File table:

------------------------
ID: 3
Execution stack:

Symbol table:
cnt -> 0
v1 -> (1, int)
v2 -> (2, int)
v3 -> (3, int)

Heap table:
1 -> 20
2 -> 30
3 -> 40

Output:
20
30
2
40
3

File table:

------------------------
ID: 4
Execution stack:
countDown( cnt )

Symbol table:
cnt -> 0
v1 -> (1, int)
v2 -> (2, int)
v3 -> (3, int)

Heap table:
1 -> 20
2 -> 30
3 -> 40

Output:
20
30
2
40
3

File table:

------------------------
ID: 1
Execution stack:
await(cnt)
print(100); countDown( cnt ); print(100)

Symbol table:
cnt -> 0
v1 -> (1, int)
v2 -> (2, int)
v3 -> (3, int)

Heap table:
1 -> 20
2 -> 30
3 -> 40

Output:
20
30
2
40
3

File table:

------------------------
ID: 4
Execution stack:
countDown( cnt )

Symbol table:
cnt -> 0
v1 -> (1, int)
v2 -> (2, int)
v3 -> (3, int)

Heap table:
1 -> 20
2 -> 30
3 -> 40

Output:
20
30
2
40
3

File table:

------------------------
ID: 1
Execution stack:
await(cnt)
print(100); countDown( cnt ); print(100)

Symbol table:
cnt -> 0
v1 -> (1, int)
v2 -> (2, int)
v3 -> (3, int)

Heap table:
1 -> 20
2 -> 30
3 -> 40

Output:
20
30
2
40
3

File table:

------------------------
ID: 4
Execution stack:
print(4)

Symbol table:
cnt -> 0
v1 -> (1, int)
v2 -> (2, int)
v3 -> (3, int)

Heap table:
1 -> 20
2 -> 30
3 -> 40

Output:
20
30
2
40
3

File table:

------------------------
ID: 1
Execution stack:
await(cnt)
print(100); countDown( cnt ); print(100)

Symbol table:
cnt -> 0
v1 -> (1, int)
v2 -> (2, int)
v3 -> (3, int)

Heap table:
1 -> 20
2 -> 30
3 -> 40

Output:
20
30
2
40
3

File table:

------------------------
ID: 4
Execution stack:
print(4)

Symbol table:
cnt -> 0
v1 -> (1, int)
v2 -> (2, int)
v3 -> (3, int)

Heap table:
1 -> 20
2 -> 30
3 -> 40

Output:
20
30
2
40
3

File table:

------------------------
ID: 1
Execution stack:
print(100); countDown( cnt ); print(100)

Symbol table:
cnt -> 0
v1 -> (1, int)
v2 -> (2, int)
v3 -> (3, int)

Heap table:
1 -> 20
2 -> 30
3 -> 40

Output:
20
30
2
40
3
4

File table:

------------------------
ID: 4
Execution stack:

Symbol table:
cnt -> 0
v1 -> (1, int)
v2 -> (2, int)
v3 -> (3, int)

Heap table:
1 -> 20
2 -> 30
3 -> 40

Output:
20
30
2
40
3
4

File table:

------------------------
ID: 1
Execution stack:
print(100); countDown( cnt ); print(100)

Symbol table:
cnt -> 0
v1 -> (1, int)
v2 -> (2, int)
v3 -> (3, int)

Heap table:
1 -> 20
2 -> 30
3 -> 40

Output:
20
30
2
40
3
4

File table:

------------------------
ID: 1
Execution stack:
print(100)
countDown( cnt ); print(100)

Symbol table:
cnt -> 0
v1 -> (1, int)
v2 -> (2, int)
v3 -> (3, int)

Heap table:
1 -> 20
2 -> 30
3 -> 40

Output:
20
30
2
40
3
4

File table:

------------------------
ID: 1
Execution stack:
print(100)
countDown( cnt ); print(100)

Symbol table:
cnt -> 0
v1 -> (1, int)
v2 -> (2, int)
v3 -> (3, int)

Heap table:
1 -> 20
2 -> 30
3 -> 40

Output:
20
30
2
40
3
4

File table:

------------------------
ID: 1
Execution stack:
countDown( cnt ); print(100)

Symbol table:
cnt -> 0
v1 -> (1, int)
v2 -> (2, int)
v3 -> (3, int)

Heap table:
1 -> 20
2 -> 30
3 -> 40

Output:
20
30
2
40
3
4
100

File table:

------------------------
ID: 1
Execution stack:
countDown( cnt ); print(100)

Symbol table:
cnt -> 0
v1 -> (1, int)
v2 -> (2, int)
v3 -> (3, int)

Heap table:
1 -> 20
2 -> 30
3 -> 40

Output:
20
30
2
40
3
4
100

File table:

------------------------
ID: 1
Execution stack:
countDown( cnt )
print(100)

Symbol table:
cnt -> 0
v1 -> (1, int)
v2 -> (2, int)
v3 -> (3, int)

Heap table:
1 -> 20
2 -> 30
3 -> 40

Output:
20
30
2
40
3
4
100

File table:

------------------------
ID: 1
Execution stack:
countDown( cnt )
print(100)

Symbol table:
cnt -> 0
v1 -> (1, int)
v2 -> (2, int)
v3 -> (3, int)

Heap table:
1 -> 20
2 -> 30
3 -> 40

Output:
20
30
2
40
3
4
100

File table:

------------------------
ID: 1
Execution stack:
print(100)

Symbol table:
cnt -> 0
v1 -> (1, int)
v2 -> (2, int)
v3 -> (3, int)

Heap table:
1 -> 20
2 -> 30
3 -> 40

Output:
20
30
2
40
3
4
100

File table:

------------------------
ID: 1
Execution stack:
print(100)

Symbol table:
cnt -> 0
v1 -> (1, int)
v2 -> (2, int)
v3 -> (3, int)

Heap table:
1 -> 20
2 -> 30
3 -> 40

Output:
20
30
2
40
3
4
100

File table:

------------------------
ID: 1
Execution stack:

Symbol table:
cnt -> 0
v1 -> (1, int)
v2 -> (2, int)
v3 -> (3, int)

Heap table:
1 -> 20
2 -> 30
3 -> 40

Output:
20
30
2
40
3
4
100
100

File table:

------------------------
ID: 1
Execution stack:
int cnt; Ref(int) v1; Ref(int) v2; Ref(int) v3; new(v1, 2); new(v2, 3); new(v3, 4); newLatch(cnt, readHeap(v2)); fork(writeHeap(v1, readHeap(v1) * 10); print(readHeap(v1)); countDown( cnt )); fork(writeHeap(v2, readHeap(v2) * 10); print(readHeap(v2)); countDown( cnt )); fork(writeHeap(v3, readHeap(v3) * 10); print(readHeap(v3)); countDown( cnt )); await(cnt); print(100); countDown( cnt ); print(100)

Symbol table:

Heap table:

Output:

File table:

------------------------
ID: 1
Execution stack:
int cnt
Ref(int) v1; Ref(int) v2; Ref(int) v3; new(v1, 2); new(v2, 3); new(v3, 4); newLatch(cnt, readHeap(v2)); fork(writeHeap(v1, readHeap(v1) * 10); print(readHeap(v1)); countDown( cnt )); fork(writeHeap(v2, readHeap(v2) * 10); print(readHeap(v2)); countDown( cnt )); fork(writeHeap(v3, readHeap(v3) * 10); print(readHeap(v3)); countDown( cnt )); await(cnt); print(100); countDown( cnt ); print(100)

Symbol table:

Heap table:

Output:

File table:

------------------------
ID: 1
Execution stack:
int cnt
Ref(int) v1; Ref(int) v2; Ref(int) v3; new(v1, 2); new(v2, 3); new(v3, 4); newLatch(cnt, readHeap(v2)); fork(writeHeap(v1, readHeap(v1) * 10); print(readHeap(v1)); countDown( cnt )); fork(writeHeap(v2, readHeap(v2) * 10); print(readHeap(v2)); countDown( cnt )); fork(writeHeap(v3, readHeap(v3) * 10); print(readHeap(v3)); countDown( cnt )); await(cnt); print(100); countDown( cnt ); print(100)

Symbol table:

Heap table:

Output:

File table:

------------------------
ID: 1
Execution stack:
Ref(int) v1; Ref(int) v2; Ref(int) v3; new(v1, 2); new(v2, 3); new(v3, 4); newLatch(cnt, readHeap(v2)); fork(writeHeap(v1, readHeap(v1) * 10); print(readHeap(v1)); countDown( cnt )); fork(writeHeap(v2, readHeap(v2) * 10); print(readHeap(v2)); countDown( cnt )); fork(writeHeap(v3, readHeap(v3) * 10); print(readHeap(v3)); countDown( cnt )); await(cnt); print(100); countDown( cnt ); print(100)

Symbol table:
cnt -> 0

Heap table:

Output:

File table:

------------------------
ID: 1
Execution stack:
Ref(int) v1; Ref(int) v2; Ref(int) v3; new(v1, 2); new(v2, 3); new(v3, 4); newLatch(cnt, readHeap(v2)); fork(writeHeap(v1, readHeap(v1) * 10); print(readHeap(v1)); countDown( cnt )); fork(writeHeap(v2, readHeap(v2) * 10); print(readHeap(v2)); countDown( cnt )); fork(writeHeap(v3, readHeap(v3) * 10); print(readHeap(v3)); countDown( cnt )); await(cnt); print(100); countDown( cnt ); print(100)

Symbol table:
cnt -> 0

Heap table:

Output:

File table:

------------------------
ID: 1
Execution stack:
Ref(int) v1
Ref(int) v2; Ref(int) v3; new(v1, 2); new(v2, 3); new(v3, 4); newLatch(cnt, readHeap(v2)); fork(writeHeap(v1, readHeap(v1) * 10); print(readHeap(v1)); countDown( cnt )); fork(writeHeap(v2, readHeap(v2) * 10); print(readHeap(v2)); countDown( cnt )); fork(writeHeap(v3, readHeap(v3) * 10); print(readHeap(v3)); countDown( cnt )); await(cnt); print(100); countDown( cnt ); print(100)

Symbol table:
cnt -> 0

Heap table:

Output:

File table:

------------------------
ID: 1
Execution stack:
Ref(int) v1
Ref(int) v2; Ref(int) v3; new(v1, 2); new(v2, 3); new(v3, 4); newLatch(cnt, readHeap(v2)); fork(writeHeap(v1, readHeap(v1) * 10); print(readHeap(v1)); countDown( cnt )); fork(writeHeap(v2, readHeap(v2) * 10); print(readHeap(v2)); countDown( cnt )); fork(writeHeap(v3, readHeap(v3) * 10); print(readHeap(v3)); countDown( cnt )); await(cnt); print(100); countDown( cnt ); print(100)

Symbol table:
cnt -> 0

Heap table:

Output:

File table:

------------------------
ID: 1
Execution stack:
Ref(int) v2; Ref(int) v3; new(v1, 2); new(v2, 3); new(v3, 4); newLatch(cnt, readHeap(v2)); fork(writeHeap(v1, readHeap(v1) * 10); print(readHeap(v1)); countDown( cnt )); fork(writeHeap(v2, readHeap(v2) * 10); print(readHeap(v2)); countDown( cnt )); fork(writeHeap(v3, readHeap(v3) * 10); print(readHeap(v3)); countDown( cnt )); await(cnt); print(100); countDown( cnt ); print(100)

Symbol table:
cnt -> 0
v1 -> (1, int)

Heap table:

Output:

File table:

------------------------
ID: 1
Execution stack:
Ref(int) v2; Ref(int) v3; new(v1, 2); new(v2, 3); new(v3, 4); newLatch(cnt, readHeap(v2)); fork(writeHeap(v1, readHeap(v1) * 10); print(readHeap(v1)); countDown( cnt )); fork(writeHeap(v2, readHeap(v2) * 10); print(readHeap(v2)); countDown( cnt )); fork(writeHeap(v3, readHeap(v3) * 10); print(readHeap(v3)); countDown( cnt )); await(cnt); print(100); countDown( cnt ); print(100)

Symbol table:
cnt -> 0
v1 -> (1, int)

Heap table:

Output:

File table:

------------------------
ID: 1
Execution stack:
Ref(int) v2
Ref(int) v3; new(v1, 2); new(v2, 3); new(v3, 4); newLatch(cnt, readHeap(v2)); fork(writeHeap(v1, readHeap(v1) * 10); print(readHeap(v1)); countDown( cnt )); fork(writeHeap(v2, readHeap(v2) * 10); print(readHeap(v2)); countDown( cnt )); fork(writeHeap(v3, readHeap(v3) * 10); print(readHeap(v3)); countDown( cnt )); await(cnt); print(100); countDown( cnt ); print(100)

Symbol table:
cnt -> 0
v1 -> (1, int)

Heap table:

Output:

File table:

------------------------
ID: 1
Execution stack:
Ref(int) v2
Ref(int) v3; new(v1, 2); new(v2, 3); new(v3, 4); newLatch(cnt, readHeap(v2)); fork(writeHeap(v1, readHeap(v1) * 10); print(readHeap(v1)); countDown( cnt )); fork(writeHeap(v2, readHeap(v2) * 10); print(readHeap(v2)); countDown( cnt )); fork(writeHeap(v3, readHeap(v3) * 10); print(readHeap(v3)); countDown( cnt )); await(cnt); print(100); countDown( cnt ); print(100)

Symbol table:
cnt -> 0
v1 -> (1, int)

Heap table:

Output:

File table:

------------------------
ID: 1
Execution stack:
Ref(int) v3; new(v1, 2); new(v2, 3); new(v3, 4); newLatch(cnt, readHeap(v2)); fork(writeHeap(v1, readHeap(v1) * 10); print(readHeap(v1)); countDown( cnt )); fork(writeHeap(v2, readHeap(v2) * 10); print(readHeap(v2)); countDown( cnt )); fork(writeHeap(v3, readHeap(v3) * 10); print(readHeap(v3)); countDown( cnt )); await(cnt); print(100); countDown( cnt ); print(100)

Symbol table:
cnt -> 0
v1 -> (1, int)
v2 -> (1, int)

Heap table:

Output:

File table:

------------------------
ID: 1
Execution stack:
Ref(int) v3; new(v1, 2); new(v2, 3); new(v3, 4); newLatch(cnt, readHeap(v2)); fork(writeHeap(v1, readHeap(v1) * 10); print(readHeap(v1)); countDown( cnt )); fork(writeHeap(v2, readHeap(v2) * 10); print(readHeap(v2)); countDown( cnt )); fork(writeHeap(v3, readHeap(v3) * 10); print(readHeap(v3)); countDown( cnt )); await(cnt); print(100); countDown( cnt ); print(100)

Symbol table:
cnt -> 0
v1 -> (1, int)
v2 -> (1, int)

Heap table:

Output:

File table:

------------------------
ID: 1
Execution stack:
Ref(int) v3
new(v1, 2); new(v2, 3); new(v3, 4); newLatch(cnt, readHeap(v2)); fork(writeHeap(v1, readHeap(v1) * 10); print(readHeap(v1)); countDown( cnt )); fork(writeHeap(v2, readHeap(v2) * 10); print(readHeap(v2)); countDown( cnt )); fork(writeHeap(v3, readHeap(v3) * 10); print(readHeap(v3)); countDown( cnt )); await(cnt); print(100); countDown( cnt ); print(100)

Symbol table:
cnt -> 0
v1 -> (1, int)
v2 -> (1, int)

Heap table:

Output:

File table:

------------------------
ID: 1
Execution stack:
Ref(int) v3
new(v1, 2); new(v2, 3); new(v3, 4); newLatch(cnt, readHeap(v2)); fork(writeHeap(v1, readHeap(v1) * 10); print(readHeap(v1)); countDown( cnt )); fork(writeHeap(v2, readHeap(v2) * 10); print(readHeap(v2)); countDown( cnt )); fork(writeHeap(v3, readHeap(v3) * 10); print(readHeap(v3)); countDown( cnt )); await(cnt); print(100); countDown( cnt ); print(100)

Symbol table:
cnt -> 0
v1 -> (1, int)
v2 -> (1, int)

Heap table:

Output:

File table:

------------------------
ID: 1
Execution stack:
new(v1, 2); new(v2, 3); new(v3, 4); newLatch(cnt, readHeap(v2)); fork(writeHeap(v1, readHeap(v1) * 10); print(readHeap(v1)); countDown( cnt )); fork(writeHeap(v2, readHeap(v2) * 10); print(readHeap(v2)); countDown( cnt )); fork(writeHeap(v3, readHeap(v3) * 10); print(readHeap(v3)); countDown( cnt )); await(cnt); print(100); countDown( cnt ); print(100)

Symbol table:
cnt -> 0
v1 -> (1, int)
v2 -> (1, int)
v3 -> (1, int)

Heap table:

Output:

File table:

------------------------
ID: 1
Execution stack:
new(v1, 2); new(v2, 3); new(v3, 4); newLatch(cnt, readHeap(v2)); fork(writeHeap(v1, readHeap(v1) * 10); print(readHeap(v1)); countDown( cnt )); fork(writeHeap(v2, readHeap(v2) * 10); print(readHeap(v2)); countDown( cnt )); fork(writeHeap(v3, readHeap(v3) * 10); print(readHeap(v3)); countDown( cnt )); await(cnt); print(100); countDown( cnt ); print(100)

Symbol table:
cnt -> 0
v1 -> (1, int)
v2 -> (1, int)
v3 -> (1, int)

Heap table:

Output:

File table:

------------------------
ID: 1
Execution stack:
new(v1, 2)
new(v2, 3); new(v3, 4); newLatch(cnt, readHeap(v2)); fork(writeHeap(v1, readHeap(v1) * 10); print(readHeap(v1)); countDown( cnt )); fork(writeHeap(v2, readHeap(v2) * 10); print(readHeap(v2)); countDown( cnt )); fork(writeHeap(v3, readHeap(v3) * 10); print(readHeap(v3)); countDown( cnt )); await(cnt); print(100); countDown( cnt ); print(100)

Symbol table:
cnt -> 0
v1 -> (1, int)
v2 -> (1, int)
v3 -> (1, int)

Heap table:

Output:

File table:

------------------------
ID: 1
Execution stack:
new(v1, 2)
new(v2, 3); new(v3, 4); newLatch(cnt, readHeap(v2)); fork(writeHeap(v1, readHeap(v1) * 10); print(readHeap(v1)); countDown( cnt )); fork(writeHeap(v2, readHeap(v2) * 10); print(readHeap(v2)); countDown( cnt )); fork(writeHeap(v3, readHeap(v3) * 10); print(readHeap(v3)); countDown( cnt )); await(cnt); print(100); countDown( cnt ); print(100)

Symbol table:
cnt -> 0
v1 -> (1, int)
v2 -> (1, int)
v3 -> (1, int)

Heap table:

Output:

File table:

------------------------
ID: 1
Execution stack:
new(v2, 3); new(v3, 4); newLatch(cnt, readHeap(v2)); fork(writeHeap(v1, readHeap(v1) * 10); print(readHeap(v1)); countDown( cnt )); fork(writeHeap(v2, readHeap(v2) * 10); print(readHeap(v2)); countDown( cnt )); fork(writeHeap(v3, readHeap(v3) * 10); print(readHeap(v3)); countDown( cnt )); await(cnt); print(100); countDown( cnt ); print(100)

Symbol table:
cnt -> 0
v1 -> (1, int)
v2 -> (1, int)
v3 -> (1, int)

Heap table:
1 -> 2

Output:

File table:

------------------------
ID: 1
Execution stack:
new(v2, 3); new(v3, 4); newLatch(cnt, readHeap(v2)); fork(writeHeap(v1, readHeap(v1) * 10); print(readHeap(v1)); countDown( cnt )); fork(writeHeap(v2, readHeap(v2) * 10); print(readHeap(v2)); countDown( cnt )); fork(writeHeap(v3, readHeap(v3) * 10); print(readHeap(v3)); countDown( cnt )); await(cnt); print(100); countDown( cnt ); print(100)

Symbol table:
cnt -> 0
v1 -> (1, int)
v2 -> (1, int)
v3 -> (1, int)

Heap table:
1 -> 2

Output:

File table:

------------------------
ID: 1
Execution stack:
new(v2, 3)
new(v3, 4); newLatch(cnt, readHeap(v2)); fork(writeHeap(v1, readHeap(v1) * 10); print(readHeap(v1)); countDown( cnt )); fork(writeHeap(v2, readHeap(v2) * 10); print(readHeap(v2)); countDown( cnt )); fork(writeHeap(v3, readHeap(v3) * 10); print(readHeap(v3)); countDown( cnt )); await(cnt); print(100); countDown( cnt ); print(100)

Symbol table:
cnt -> 0
v1 -> (1, int)
v2 -> (1, int)
v3 -> (1, int)

Heap table:
1 -> 2

Output:

File table:

------------------------
ID: 1
Execution stack:
new(v2, 3)
new(v3, 4); newLatch(cnt, readHeap(v2)); fork(writeHeap(v1, readHeap(v1) * 10); print(readHeap(v1)); countDown( cnt )); fork(writeHeap(v2, readHeap(v2) * 10); print(readHeap(v2)); countDown( cnt )); fork(writeHeap(v3, readHeap(v3) * 10); print(readHeap(v3)); countDown( cnt )); await(cnt); print(100); countDown( cnt ); print(100)

Symbol table:
cnt -> 0
v1 -> (1, int)
v2 -> (1, int)
v3 -> (1, int)

Heap table:
1 -> 2

Output:

File table:

------------------------
ID: 1
Execution stack:
new(v3, 4); newLatch(cnt, readHeap(v2)); fork(writeHeap(v1, readHeap(v1) * 10); print(readHeap(v1)); countDown( cnt )); fork(writeHeap(v2, readHeap(v2) * 10); print(readHeap(v2)); countDown( cnt )); fork(writeHeap(v3, readHeap(v3) * 10); print(readHeap(v3)); countDown( cnt )); await(cnt); print(100); countDown( cnt ); print(100)

Symbol table:
cnt -> 0
v1 -> (1, int)
v2 -> (2, int)
v3 -> (1, int)

Heap table:
1 -> 2
2 -> 3

Output:

File table:

------------------------
ID: 1
Execution stack:
new(v3, 4); newLatch(cnt, readHeap(v2)); fork(writeHeap(v1, readHeap(v1) * 10); print(readHeap(v1)); countDown( cnt )); fork(writeHeap(v2, readHeap(v2) * 10); print(readHeap(v2)); countDown( cnt )); fork(writeHeap(v3, readHeap(v3) * 10); print(readHeap(v3)); countDown( cnt )); await(cnt); print(100); countDown( cnt ); print(100)

Symbol table:
cnt -> 0
v1 -> (1, int)
v2 -> (2, int)
v3 -> (1, int)

Heap table:
1 -> 2
2 -> 3

Output:

File table:

------------------------
ID: 1
Execution stack:
new(v3, 4)
newLatch(cnt, readHeap(v2)); fork(writeHeap(v1, readHeap(v1) * 10); print(readHeap(v1)); countDown( cnt )); fork(writeHeap(v2, readHeap(v2) * 10); print(readHeap(v2)); countDown( cnt )); fork(writeHeap(v3, readHeap(v3) * 10); print(readHeap(v3)); countDown( cnt )); await(cnt); print(100); countDown( cnt ); print(100)

Symbol table:
cnt -> 0
v1 -> (1, int)
v2 -> (2, int)
v3 -> (1, int)

Heap table:
1 -> 2
2 -> 3

Output:

File table:

------------------------
ID: 1
Execution stack:
new(v3, 4)
newLatch(cnt, readHeap(v2)); fork(writeHeap(v1, readHeap(v1) * 10); print(readHeap(v1)); countDown( cnt )); fork(writeHeap(v2, readHeap(v2) * 10); print(readHeap(v2)); countDown( cnt )); fork(writeHeap(v3, readHeap(v3) * 10); print(readHeap(v3)); countDown( cnt )); await(cnt); print(100); countDown( cnt ); print(100)

Symbol table:
cnt -> 0
v1 -> (1, int)
v2 -> (2, int)
v3 -> (1, int)

Heap table:
1 -> 2
2 -> 3

Output:

File table:

------------------------
ID: 1
Execution stack:
newLatch(cnt, readHeap(v2)); fork(writeHeap(v1, readHeap(v1) * 10); print(readHeap(v1)); countDown( cnt )); fork(writeHeap(v2, readHeap(v2) * 10); print(readHeap(v2)); countDown( cnt )); fork(writeHeap(v3, readHeap(v3) * 10); print(readHeap(v3)); countDown( cnt )); await(cnt); print(100); countDown( cnt ); print(100)

Symbol table:
cnt -> 0
v1 -> (1, int)
v2 -> (2, int)
v3 -> (3, int)

Heap table:
1 -> 2
2 -> 3
3 -> 4

Output:

File table:

------------------------
ID: 1
Execution stack:
newLatch(cnt, readHeap(v2)); fork(writeHeap(v1, readHeap(v1) * 10); print(readHeap(v1)); countDown( cnt )); fork(writeHeap(v2, readHeap(v2) * 10); print(readHeap(v2)); countDown( cnt )); fork(writeHeap(v3, readHeap(v3) * 10); print(readHeap(v3)); countDown( cnt )); await(cnt); print(100); countDown( cnt ); print(100)

Symbol table:
cnt -> 0
v1 -> (1, int)
v2 -> (2, int)
v3 -> (3, int)

Heap table:
1 -> 2
2 -> 3
3 -> 4

Output:

File table:

------------------------
ID: 1
Execution stack:
newLatch(cnt, readHeap(v2))
fork(writeHeap(v1, readHeap(v1) * 10); print(readHeap(v1)); countDown( cnt )); fork(writeHeap(v2, readHeap(v2) * 10); print(readHeap(v2)); countDown( cnt )); fork(writeHeap(v3, readHeap(v3) * 10); print(readHeap(v3)); countDown( cnt )); await(cnt); print(100); countDown( cnt ); print(100)

Symbol table:
cnt -> 0
v1 -> (1, int)
v2 -> (2, int)
v3 -> (3, int)

Heap table:
1 -> 2
2 -> 3
3 -> 4

Output:

File table:

------------------------
ID: 1
Execution stack:
newLatch(cnt, readHeap(v2))
fork(writeHeap(v1, readHeap(v1) * 10); print(readHeap(v1)); countDown( cnt )); fork(writeHeap(v2, readHeap(v2) * 10); print(readHeap(v2)); countDown( cnt )); fork(writeHeap(v3, readHeap(v3) * 10); print(readHeap(v3)); countDown( cnt )); await(cnt); print(100); countDown( cnt ); print(100)

Symbol table:
cnt -> 0
v1 -> (1, int)
v2 -> (2, int)
v3 -> (3, int)

Heap table:
1 -> 2
2 -> 3
3 -> 4

Output:

File table:

------------------------
ID: 1
Execution stack:
fork(writeHeap(v1, readHeap(v1) * 10); print(readHeap(v1)); countDown( cnt )); fork(writeHeap(v2, readHeap(v2) * 10); print(readHeap(v2)); countDown( cnt )); fork(writeHeap(v3, readHeap(v3) * 10); print(readHeap(v3)); countDown( cnt )); await(cnt); print(100); countDown( cnt ); print(100)

Symbol table:
cnt -> 0
v1 -> (1, int)
v2 -> (2, int)
v3 -> (3, int)

Heap table:
1 -> 2
2 -> 3
3 -> 4

Output:

File table:

------------------------
ID: 1
Execution stack:
fork(writeHeap(v1, readHeap(v1) * 10); print(readHeap(v1)); countDown( cnt )); fork(writeHeap(v2, readHeap(v2) * 10); print(readHeap(v2)); countDown( cnt )); fork(writeHeap(v3, readHeap(v3) * 10); print(readHeap(v3)); countDown( cnt )); await(cnt); print(100); countDown( cnt ); print(100)

Symbol table:
cnt -> 0
v1 -> (1, int)
v2 -> (2, int)
v3 -> (3, int)

Heap table:
1 -> 2
2 -> 3
3 -> 4

Output:

File table:

------------------------
ID: 1
Execution stack:
fork(writeHeap(v1, readHeap(v1) * 10); print(readHeap(v1)); countDown( cnt ))
fork(writeHeap(v2, readHeap(v2) * 10); print(readHeap(v2)); countDown( cnt )); fork(writeHeap(v3, readHeap(v3) * 10); print(readHeap(v3)); countDown( cnt )); await(cnt); print(100); countDown( cnt ); print(100)

Symbol table:
cnt -> 0
v1 -> (1, int)
v2 -> (2, int)
v3 -> (3, int)

Heap table:
1 -> 2
2 -> 3
3 -> 4

Output:

File table:

------------------------
ID: 1
Execution stack:
fork(writeHeap(v1, readHeap(v1) * 10); print(readHeap(v1)); countDown( cnt ))
fork(writeHeap(v2, readHeap(v2) * 10); print(readHeap(v2)); countDown( cnt )); fork(writeHeap(v3, readHeap(v3) * 10); print(readHeap(v3)); countDown( cnt )); await(cnt); print(100); countDown( cnt ); print(100)

Symbol table:
cnt -> 0
v1 -> (1, int)
v2 -> (2, int)
v3 -> (3, int)

Heap table:
1 -> 2
2 -> 3
3 -> 4

Output:

File table:

------------------------
ID: 1
Execution stack:
fork(writeHeap(v2, readHeap(v2) * 10); print(readHeap(v2)); countDown( cnt )); fork(writeHeap(v3, readHeap(v3) * 10); print(readHeap(v3)); countDown( cnt )); await(cnt); print(100); countDown( cnt ); print(100)

Symbol table:
cnt -> 0
v1 -> (1, int)
v2 -> (2, int)
v3 -> (3, int)

Heap table:
1 -> 2
2 -> 3
3 -> 4

Output:

File table:

------------------------
ID: 2
Execution stack:
writeHeap(v1, readHeap(v1) * 10); print(readHeap(v1)); countDown( cnt )

Symbol table:
cnt -> 0
v1 -> (1, int)
v2 -> (2, int)
v3 -> (3, int)

Heap table:
1 -> 2
2 -> 3
3 -> 4

Output:

File table:

------------------------
ID: 1
Execution stack:
fork(writeHeap(v2, readHeap(v2) * 10); print(readHeap(v2)); countDown( cnt )); fork(writeHeap(v3, readHeap(v3) * 10); print(readHeap(v3)); countDown( cnt )); await(cnt); print(100); countDown( cnt ); print(100)

Symbol table:
cnt -> 0
v1 -> (1, int)
v2 -> (2, int)
v3 -> (3, int)

Heap table:
1 -> 2
2 -> 3
3 -> 4

Output:

File table:

------------------------
ID: 2
Execution stack:
writeHeap(v1, readHeap(v1) * 10); print(readHeap(v1)); countDown( cnt )

Symbol table:
cnt -> 0
v1 -> (1, int)
v2 -> (2, int)
v3 -> (3, int)

Heap table:
1 -> 2
2 -> 3
3 -> 4

Output:

File table:

------------------------
ID: 1
Execution stack:
fork(writeHeap(v2, readHeap(v2) * 10); print(readHeap(v2)); countDown( cnt ))
fork(writeHeap(v3, readHeap(v3) * 10); print(readHeap(v3)); countDown( cnt )); await(cnt); print(100); countDown( cnt ); print(100)

Symbol table:
cnt -> 0
v1 -> (1, int)
v2 -> (2, int)
v3 -> (3, int)

Heap table:
1 -> 2
2 -> 3
3 -> 4

Output:

File table:

------------------------
ID: 2
Execution stack:
writeHeap(v1, readHeap(v1) * 10)
print(readHeap(v1)); countDown( cnt )

Symbol table:
cnt -> 0
v1 -> (1, int)
v2 -> (2, int)
v3 -> (3, int)

Heap table:
1 -> 2
2 -> 3
3 -> 4

Output:

File table:

------------------------
ID: 1
Execution stack:
fork(writeHeap(v2, readHeap(v2) * 10); print(readHeap(v2)); countDown( cnt ))
fork(writeHeap(v3, readHeap(v3) * 10); print(readHeap(v3)); countDown( cnt )); await(cnt); print(100); countDown( cnt ); print(100)

Symbol table:
cnt -> 0
v1 -> (1, int)
v2 -> (2, int)
v3 -> (3, int)

Heap table:
1 -> 2
2 -> 3
3 -> 4

Output:

File table:

------------------------
ID: 2
Execution stack:
writeHeap(v1, readHeap(v1) * 10)
print(readHeap(v1)); countDown( cnt )

Symbol table:
cnt -> 0
v1 -> (1, int)
v2 -> (2, int)
v3 -> (3, int)

Heap table:
1 -> 2
2 -> 3
3 -> 4

Output:

File table:

------------------------
ID: 1
Execution stack:
fork(writeHeap(v3, readHeap(v3) * 10); print(readHeap(v3)); countDown( cnt )); await(cnt); print(100); countDown( cnt ); print(100)

Symbol table:
cnt -> 0
v1 -> (1, int)
v2 -> (2, int)
v3 -> (3, int)

Heap table:
1 -> 20
2 -> 3
3 -> 4

Output:

File table:

------------------------
ID: 2
Execution stack:
print(readHeap(v1)); countDown( cnt )

Symbol table:
cnt -> 0
v1 -> (1, int)
v2 -> (2, int)
v3 -> (3, int)

Heap table:
1 -> 20
2 -> 3
3 -> 4

Output:

File table:

------------------------
ID: 3
Execution stack:
writeHeap(v2, readHeap(v2) * 10); print(readHeap(v2)); countDown( cnt )

Symbol table:
cnt -> 0
v1 -> (1, int)
v2 -> (2, int)
v3 -> (3, int)

Heap table:
1 -> 20
2 -> 3
3 -> 4

Output:

File table:

------------------------
ID: 1
Execution stack:
fork(writeHeap(v3, readHeap(v3) * 10); print(readHeap(v3)); countDown( cnt )); await(cnt); print(100); countDown( cnt ); print(100)

Symbol table:
cnt -> 0
v1 -> (1, int)
v2 -> (2, int)
v3 -> (3, int)

Heap table:
1 -> 20
2 -> 3
3 -> 4

Output:

File table:

------------------------
ID: 2
Execution stack:
print(readHeap(v1)); countDown( cnt )

Symbol table:
cnt -> 0
v1 -> (1, int)
v2 -> (2, int)
v3 -> (3, int)

Heap table:
1 -> 20
2 -> 3
3 -> 4

Output:

File table:

------------------------
ID: 3
Execution stack:
writeHeap(v2, readHeap(v2) * 10); print(readHeap(v2)); countDown( cnt )

Symbol table:
cnt -> 0
v1 -> (1, int)
v2 -> (2, int)
v3 -> (3, int)

Heap table:
1 -> 20
2 -> 3
3 -> 4

Output:

File table:

------------------------
ID: 1
Execution stack:
fork(writeHeap(v3, readHeap(v3) * 10); print(readHeap(v3)); countDown( cnt ))
await(cnt); print(100); countDown( cnt ); print(100)

Symbol table:
cnt -> 0
v1 -> (1, int)
v2 -> (2, int)
v3 -> (3, int)

Heap table:
1 -> 20
2 -> 3
3 -> 4

Output:

File table:

------------------------
ID: 2
Execution stack:
print(readHeap(v1))
countDown( cnt )

Symbol table:
cnt -> 0
v1 -> (1, int)
v2 -> (2, int)
v3 -> (3, int)

Heap table:
1 -> 20
2 -> 3
3 -> 4

Output:

File table:

------------------------
ID: 3
Execution stack:
writeHeap(v2, readHeap(v2) * 10)
print(readHeap(v2)); countDown( cnt )

Symbol table:
cnt -> 0
v1 -> (1, int)
v2 -> (2, int)
v3 -> (3, int)

Heap table:
1 -> 20
2 -> 3
3 -> 4

Output:

File table:

------------------------
ID: 1
Execution stack:
fork(writeHeap(v3, readHeap(v3) * 10); print(readHeap(v3)); countDown( cnt ))
await(cnt); print(100); countDown( cnt ); print(100)

Symbol table:
cnt -> 0
v1 -> (1, int)
v2 -> (2, int)
v3 -> (3, int)

Heap table:
1 -> 20
2 -> 3
3 -> 4

Output:

File table:

------------------------
ID: 2
Execution stack:
print(readHeap(v1))
countDown( cnt )

Symbol table:
cnt -> 0
v1 -> (1, int)
v2 -> (2, int)
v3 -> (3, int)

Heap table:
1 -> 20
2 -> 3
3 -> 4

Output:

File table:

------------------------
ID: 3
Execution stack:
writeHeap(v2, readHeap(v2) * 10)
print(readHeap(v2)); countDown( cnt )

Symbol table:
cnt -> 0
v1 -> (1, int)
v2 -> (2, int)
v3 -> (3, int)

Heap table:
1 -> 20
2 -> 3
3 -> 4

Output:

File table:

------------------------
ID: 1
Execution stack:
await(cnt); print(100); countDown( cnt ); print(100)

Symbol table:
cnt -> 0
v1 -> (1, int)
v2 -> (2, int)
v3 -> (3, int)

Heap table:
1 -> 20
2 -> 30
3 -> 4

Output:
20

File table:

------------------------
ID: 2
Execution stack:
countDown( cnt )

Symbol table:
cnt -> 0
v1 -> (1, int)
v2 -> (2, int)
v3 -> (3, int)

Heap table:
1 -> 20
2 -> 30
3 -> 4

Output:
20

File table:

------------------------
ID: 3
Execution stack:
print(readHeap(v2)); countDown( cnt )

Symbol table:
cnt -> 0
v1 -> (1, int)
v2 -> (2, int)
v3 -> (3, int)

Heap table:
1 -> 20
2 -> 30
3 -> 4

Output:
20

File table:

------------------------
ID: 4
Execution stack:
writeHeap(v3, readHeap(v3) * 10); print(readHeap(v3)); countDown( cnt )

Symbol table:
cnt -> 0
v1 -> (1, int)
v2 -> (2, int)
v3 -> (3, int)

Heap table:
1 -> 20
2 -> 30
3 -> 4

Output:
20

File table:

------------------------
ID: 1
Execution stack:
await(cnt); print(100); countDown( cnt ); print(100)

Symbol table:
cnt -> 0
v1 -> (1, int)
v2 -> (2, int)
v3 -> (3, int)

Heap table:
1 -> 20
2 -> 30
3 -> 4

Output:
20

File table:

------------------------
ID: 2
Execution stack:
countDown( cnt )

Symbol table:
cnt -> 0
v1 -> (1, int)
v2 -> (2, int)
v3 -> (3, int)

Heap table:
1 -> 20
2 -> 30
3 -> 4

Output:
20

File table:

------------------------
ID: 3
Execution stack:
print(readHeap(v2)); countDown( cnt )

Symbol table:
cnt -> 0
v1 -> (1, int)
v2 -> (2, int)
v3 -> (3, int)

Heap table:
1 -> 20
2 -> 30
3 -> 4

Output:
20

File table:

------------------------
ID: 4
Execution stack:
writeHeap(v3, readHeap(v3) * 10); print(readHeap(v3)); countDown( cnt )

Symbol table:
cnt -> 0
v1 -> (1, int)
v2 -> (2, int)
v3 -> (3, int)

Heap table:
1 -> 20
2 -> 30
3 -> 4

Output:
20

File table:

------------------------
ID: 1
Execution stack:
await(cnt)
print(100); countDown( cnt ); print(100)

Symbol table:
cnt -> 0
v1 -> (1, int)
v2 -> (2, int)
v3 -> (3, int)

Heap table:
1 -> 20
2 -> 30
3 -> 4

Output:
20

File table:

------------------------
ID: 2
Execution stack:
print(2)

Symbol table:
cnt -> 0
v1 -> (1, int)
v2 -> (2, int)
v3 -> (3, int)

Heap table:
1 -> 20
2 -> 30
3 -> 4

Output:
20

File table:

------------------------
ID: 3
Execution stack:
print(readHeap(v2))
countDown( cnt )

Symbol table:
cnt -> 0
v1 -> (1, int)
v2 -> (2, int)
v3 -> (3, int)

Heap table:
1 -> 20
2 -> 30
3 -> 4

Output:
20

File table:

------------------------
ID: 4
Execution stack:
writeHeap(v3, readHeap(v3) * 10)
print(readHeap(v3)); countDown( cnt )

Symbol table:
cnt -> 0
v1 -> (1, int)
v2 -> (2, int)
v3 -> (3, int)

Heap table:
1 -> 20
2 -> 30
3 -> 4

Output:
20

File table:

------------------------
ID: 1
Execution stack:
await(cnt)
print(100); countDown( cnt ); print(100)

Symbol table:
cnt -> 0
v1 -> (1, int)
v2 -> (2, int)
v3 -> (3, int)

Heap table:
1 -> 20
2 -> 30
3 -> 4

Output:
20

File table:

------------------------
ID: 2
Execution stack:
print(2)

Symbol table:
cnt -> 0
v1 -> (1, int)
v2 -> (2, int)
v3 -> (3, int)

Heap table:
1 -> 20
2 -> 30
3 -> 4

Output:
20

File table:

------------------------
ID: 3
Execution stack:
print(readHeap(v2))
countDown( cnt )

Symbol table:
cnt -> 0
v1 -> (1, int)
v2 -> (2, int)
v3 -> (3, int)

Heap table:
1 -> 20
2 -> 30
3 -> 4

Output:
20

File table:

------------------------
ID: 4
Execution stack:
writeHeap(v3, readHeap(v3) * 10)
print(readHeap(v3)); countDown( cnt )

Symbol table:
cnt -> 0
v1 -> (1, int)
v2 -> (2, int)
v3 -> (3, int)

Heap table:
1 -> 20
2 -> 30
3 -> 4

Output:
20

File table:

------------------------
ID: 1
Execution stack:
await(cnt)
print(100); countDown( cnt ); print(100)

Symbol table:
cnt -> 0
v1 -> (1, int)
v2 -> (2, int)
v3 -> (3, int)

Heap table:
1 -> 20
2 -> 30
3 -> 40

Output:
20
30
2

File table:

------------------------
ID: 2
Execution stack:

Symbol table:
cnt -> 0
v1 -> (1, int)
v2 -> (2, int)
v3 -> (3, int)

Heap table:
1 -> 20
2 -> 30
3 -> 40

Output:
20
30
2

File table:

------------------------
ID: 3
Execution stack:
countDown( cnt )

Symbol table:
cnt -> 0
v1 -> (1, int)
v2 -> (2, int)
v3 -> (3, int)

Heap table:
1 -> 20
2 -> 30
3 -> 40

Output:
20
30
2

File table:

------------------------
ID: 4
Execution stack:
print(readHeap(v3)); countDown( cnt )

Symbol table:
cnt -> 0
v1 -> (1, int)
v2 -> (2, int)
v3 -> (3, int)

Heap table:
1 -> 20
2 -> 30
3 -> 40

Output:
20
30
2

File table:

------------------------
ID: 1
Execution stack:
await(cnt)
print(100); countDown( cnt ); print(100)

Symbol table:
cnt -> 0
v1 -> (1, int)
v2 -> (2, int)
v3 -> (3, int)

Heap table:
1 -> 20
2 -> 30
3 -> 40

Output:
20
30
2

File table:

------------------------
ID: 3
Execution stack:
countDown( cnt )

Symbol table:
cnt -> 0
v1 -> (1, int)
v2 -> (2, int)
v3 -> (3, int)

Heap table:
1 -> 20
2 -> 30
3 -> 40

Output:
20
30
2

File table:

------------------------
ID: 4
Execution stack:
print(readHeap(v3)); countDown( cnt )

Symbol table:
cnt -> 0
v1 -> (1, int)
v2 -> (2, int)
v3 -> (3, int)

Heap table:
1 -> 20
2 -> 30
3 -> 40

Output:
20
30
2

File table:

------------------------
ID: 1
Execution stack:
await(cnt)
print(100); countDown( cnt ); print(100)

Symbol table:
cnt -> 0
v1 -> (1, int)
v2 -> (2, int)
v3 -> (3, int)

Heap table:
1 -> 20
2 -> 30
3 -> 40

Output:
20
30
2

File table:

------------------------
ID: 3
Execution stack:
print(3)

Symbol table:
cnt -> 0
v1 -> (1, int)
v2 -> (2, int)
v3 -> (3, int)

Heap table:
1 -> 20
2 -> 30
3 -> 40

Output:
20
30
2

File table:

------------------------
ID: 4
Execution stack:
print(readHeap(v3))
countDown( cnt )

Symbol table:
cnt -> 0
v1 -> (1, int)
v2 -> (2, int)
v3 -> (3, int)

Heap table:
1 -> 20
2 -> 30
3 -> 40

Output:
20
30
2

File table:

------------------------
ID: 1
Execution stack:
await(cnt)
print(100); countDown( cnt ); print(100)

Symbol table:
cnt -> 0
v1 -> (1, int)
v2 -> (2, int)
v3 -> (3, int)

Heap table:
1 -> 20
2 -> 30
3 -> 40

Output:
20
30
2

File table:

------------------------
ID: 3
Execution stack:
print(3)

Symbol table:
cnt -> 0
v1 -> (1, int)
v2 -> (2, int)
v3 -> (3, int)

Heap table:
1 -> 20
2 -> 30
3 -> 40

Output:
20
30
2

File table:

------------------------
ID: 4
Execution stack:
print(readHeap(v3))
countDown( cnt )

Symbol table:
cnt -> 0
v1 -> (1, int)
v2 -> (2, int)
v3 -> (3, int)

Heap table:
1 -> 20
2 -> 30
3 -> 40

Output:
20
30
2

File table:

------------------------
ID: 1
Execution stack:
await(cnt)
print(100); countDown( cnt ); print(100)

Symbol table:
cnt -> 0
v1 -> (1, int)
v2 -> (2, int)
v3 -> (3, int)

Heap table:
1 -> 20
2 -> 30
3 -> 40

Output:
20
30
2
40
3

File table:

------------------------
ID: 3
Execution stack:

Symbol table:
cnt -> 0
v1 -> (1, int)
v2 -> (2, int)
v3 -> (3, int)

Heap table:
1 -> 20
2 -> 30
3 -> 40

Output:
20
30
2
40
3

File table:

------------------------
ID: 4
Execution stack:
countDown( cnt )

Symbol table:
cnt -> 0
v1 -> (1, int)
v2 -> (2, int)
v3 -> (3, int)

Heap table:
1 -> 20
2 -> 30
3 -> 40

Output:
20
30
2
40
3

File table:

------------------------
ID: 1
Execution stack:
await(cnt)
print(100); countDown( cnt ); print(100)

Symbol table:
cnt -> 0
v1 -> (1, int)
v2 -> (2, int)
v3 -> (3, int)

Heap table:
1 -> 20
2 -> 30
3 -> 40

Output:
20
30
2
40
3

File table:

------------------------
ID: 4
Execution stack:
countDown( cnt )

Symbol table:
cnt -> 0
v1 -> (1, int)
v2 -> (2, int)
v3 -> (3, int)

Heap table:
1 -> 20
2 -> 30
3 -> 40

Output:
20
30
2
40
3

File table:

------------------------
ID: 1
Execution stack:
await(cnt)
print(100); countDown( cnt ); print(100)

Symbol table:
cnt -> 0
v1 -> (1, int)
v2 -> (2, int)
v3 -> (3, int)

Heap table:
1 -> 20
2 -> 30
3 -> 40

Output:
20
30
2
40
3

File table:

------------------------
ID: 4
Execution stack:
print(4)

Symbol table:
cnt -> 0
v1 -> (1, int)
v2 -> (2, int)
v3 -> (3, int)

Heap table:
1 -> 20
2 -> 30
3 -> 40

Output:
20
30
2
40
3

File table:

------------------------
ID: 1
Execution stack:
await(cnt)
print(100); countDown( cnt ); print(100)

Symbol table:
cnt -> 0
v1 -> (1, int)
v2 -> (2, int)
v3 -> (3, int)

Heap table:
1 -> 20
2 -> 30
3 -> 40

Output:
20
30
2
40
3

File table:

------------------------
ID: 4
Execution stack:
print(4)

Symbol table:
cnt -> 0
v1 -> (1, int)
v2 -> (2, int)
v3 -> (3, int)

Heap table:
1 -> 20
2 -> 30
3 -> 40

Output:
20
30
2
40
3

File table:

------------------------
ID: 1
Execution stack:
print(100); countDown( cnt ); print(100)

Symbol table:
cnt -> 0
v1 -> (1, int)
v2 -> (2, int)
v3 -> (3, int)

Heap table:
1 -> 20
2 -> 30
3 -> 40

Output:
20
30
2
40
3
4

File table:

------------------------
ID: 4
Execution stack:

Symbol table:
cnt -> 0
v1 -> (1, int)
v2 -> (2, int)
v3 -> (3, int)

Heap table:
1 -> 20
2 -> 30
3 -> 40

Output:
20
30
2
40
3
4

File table:

------------------------
ID: 1
Execution stack:
print(100); countDown( cnt ); print(100)

Symbol table:
cnt -> 0
v1 -> (1, int)
v2 -> (2, int)
v3 -> (3, int)

Heap table:
1 -> 20
2 -> 30
3 -> 40

Output:
20
30
2
40
3
4

File table:

------------------------
ID: 1
Execution stack:
print(100)
countDown( cnt ); print(100)

Symbol table:
cnt -> 0
v1 -> (1, int)
v2 -> (2, int)
v3 -> (3, int)

Heap table:
1 -> 20
2 -> 30
3 -> 40

Output:
20
30
2
40
3
4

File table:

------------------------
ID: 1
Execution stack:
print(100)
countDown( cnt ); print(100)

Symbol table:
cnt -> 0
v1 -> (1, int)
v2 -> (2, int)
v3 -> (3, int)

Heap table:
1 -> 20
2 -> 30
3 -> 40

Output:
20
30
2
40
3
4

File table:

------------------------
ID: 1
Execution stack:
countDown( cnt ); print(100)

Symbol table:
cnt -> 0
v1 -> (1, int)
v2 -> (2, int)
v3 -> (3, int)

Heap table:
1 -> 20
2 -> 30
3 -> 40

Output:
20
30
2
40
3
4
100

File table:

------------------------
ID: 1
Execution stack:
countDown( cnt ); print(100)

Symbol table:
cnt -> 0
v1 -> (1, int)
v2 -> (2, int)
v3 -> (3, int)

Heap table:
1 -> 20
2 -> 30
3 -> 40

Output:
20
30
2
40
3
4
100

File table:

------------------------
ID: 1
Execution stack:
countDown( cnt )
print(100)

Symbol table:
cnt -> 0
v1 -> (1, int)
v2 -> (2, int)
v3 -> (3, int)

Heap table:
1 -> 20
2 -> 30
3 -> 40

Output:
20
30
2
40
3
4
100

File table:

------------------------
ID: 1
Execution stack:
countDown( cnt )
print(100)

Symbol table:
cnt -> 0
v1 -> (1, int)
v2 -> (2, int)
v3 -> (3, int)

Heap table:
1 -> 20
2 -> 30
3 -> 40

Output:
20
30
2
40
3
4
100

File table:

------------------------
ID: 1
Execution stack:
print(1)
print(100)

Symbol table:
cnt -> 0
v1 -> (1, int)
v2 -> (2, int)
v3 -> (3, int)

Heap table:
1 -> 20
2 -> 30
3 -> 40

Output:
20
30
2
40
3
4
100

File table:

------------------------
ID: 1
Execution stack:
print(1)
print(100)

Symbol table:
cnt -> 0
v1 -> (1, int)
v2 -> (2, int)
v3 -> (3, int)

Heap table:
1 -> 20
2 -> 30
3 -> 40

Output:
20
30
2
40
3
4
100

File table:

------------------------
ID: 1
Execution stack:
print(100)

Symbol table:
cnt -> 0
v1 -> (1, int)
v2 -> (2, int)
v3 -> (3, int)

Heap table:
1 -> 20
2 -> 30
3 -> 40

Output:
20
30
2
40
3
4
100
1

File table:

------------------------
ID: 1
Execution stack:
print(100)

Symbol table:
cnt -> 0
v1 -> (1, int)
v2 -> (2, int)
v3 -> (3, int)

Heap table:
1 -> 20
2 -> 30
3 -> 40

Output:
20
30
2
40
3
4
100
1

File table:

------------------------
ID: 1
Execution stack:

Symbol table:
cnt -> 0
v1 -> (1, int)
v2 -> (2, int)
v3 -> (3, int)

Heap table:
1 -> 20
2 -> 30
3 -> 40

Output:
20
30
2
40
3
4
100
1
100

File table:

------------------------
ID: 1
Execution stack:
int cnt; Ref(int) v1; Ref(int) v2; Ref(int) v3; new(v1, 2); new(v2, 3); new(v3, 4); newLatch(cnt, readHeap(v2)); fork(writeHeap(v1, readHeap(v1) * 10); print(readHeap(v1)); countDown( cnt )); fork(writeHeap(v2, readHeap(v2) * 10); print(readHeap(v2)); countDown( cnt )); fork(writeHeap(v3, readHeap(v3) * 10); print(readHeap(v3)); countDown( cnt )); await(cnt); print(100); countDown( cnt ); print(100)

Symbol table:

Heap table:

Output:

File table:

------------------------
ID: 1
Execution stack:
int cnt
Ref(int) v1; Ref(int) v2; Ref(int) v3; new(v1, 2); new(v2, 3); new(v3, 4); newLatch(cnt, readHeap(v2)); fork(writeHeap(v1, readHeap(v1) * 10); print(readHeap(v1)); countDown( cnt )); fork(writeHeap(v2, readHeap(v2) * 10); print(readHeap(v2)); countDown( cnt )); fork(writeHeap(v3, readHeap(v3) * 10); print(readHeap(v3)); countDown( cnt )); await(cnt); print(100); countDown( cnt ); print(100)

Symbol table:

Heap table:

Output:

File table:

------------------------
ID: 1
Execution stack:
int cnt
Ref(int) v1; Ref(int) v2; Ref(int) v3; new(v1, 2); new(v2, 3); new(v3, 4); newLatch(cnt, readHeap(v2)); fork(writeHeap(v1, readHeap(v1) * 10); print(readHeap(v1)); countDown( cnt )); fork(writeHeap(v2, readHeap(v2) * 10); print(readHeap(v2)); countDown( cnt )); fork(writeHeap(v3, readHeap(v3) * 10); print(readHeap(v3)); countDown( cnt )); await(cnt); print(100); countDown( cnt ); print(100)

Symbol table:

Heap table:

Output:

File table:

------------------------
ID: 1
Execution stack:
Ref(int) v1; Ref(int) v2; Ref(int) v3; new(v1, 2); new(v2, 3); new(v3, 4); newLatch(cnt, readHeap(v2)); fork(writeHeap(v1, readHeap(v1) * 10); print(readHeap(v1)); countDown( cnt )); fork(writeHeap(v2, readHeap(v2) * 10); print(readHeap(v2)); countDown( cnt )); fork(writeHeap(v3, readHeap(v3) * 10); print(readHeap(v3)); countDown( cnt )); await(cnt); print(100); countDown( cnt ); print(100)

Symbol table:
cnt -> 0

Heap table:

Output:

File table:

------------------------
ID: 1
Execution stack:
Ref(int) v1; Ref(int) v2; Ref(int) v3; new(v1, 2); new(v2, 3); new(v3, 4); newLatch(cnt, readHeap(v2)); fork(writeHeap(v1, readHeap(v1) * 10); print(readHeap(v1)); countDown( cnt )); fork(writeHeap(v2, readHeap(v2) * 10); print(readHeap(v2)); countDown( cnt )); fork(writeHeap(v3, readHeap(v3) * 10); print(readHeap(v3)); countDown( cnt )); await(cnt); print(100); countDown( cnt ); print(100)

Symbol table:
cnt -> 0

Heap table:

Output:

File table:

------------------------
ID: 1
Execution stack:
Ref(int) v1
Ref(int) v2; Ref(int) v3; new(v1, 2); new(v2, 3); new(v3, 4); newLatch(cnt, readHeap(v2)); fork(writeHeap(v1, readHeap(v1) * 10); print(readHeap(v1)); countDown( cnt )); fork(writeHeap(v2, readHeap(v2) * 10); print(readHeap(v2)); countDown( cnt )); fork(writeHeap(v3, readHeap(v3) * 10); print(readHeap(v3)); countDown( cnt )); await(cnt); print(100); countDown( cnt ); print(100)

Symbol table:
cnt -> 0

Heap table:

Output:

File table:

------------------------
ID: 1
Execution stack:
Ref(int) v1
Ref(int) v2; Ref(int) v3; new(v1, 2); new(v2, 3); new(v3, 4); newLatch(cnt, readHeap(v2)); fork(writeHeap(v1, readHeap(v1) * 10); print(readHeap(v1)); countDown( cnt )); fork(writeHeap(v2, readHeap(v2) * 10); print(readHeap(v2)); countDown( cnt )); fork(writeHeap(v3, readHeap(v3) * 10); print(readHeap(v3)); countDown( cnt )); await(cnt); print(100); countDown( cnt ); print(100)

Symbol table:
cnt -> 0

Heap table:

Output:

File table:

------------------------
ID: 1
Execution stack:
Ref(int) v2; Ref(int) v3; new(v1, 2); new(v2, 3); new(v3, 4); newLatch(cnt, readHeap(v2)); fork(writeHeap(v1, readHeap(v1) * 10); print(readHeap(v1)); countDown( cnt )); fork(writeHeap(v2, readHeap(v2) * 10); print(readHeap(v2)); countDown( cnt )); fork(writeHeap(v3, readHeap(v3) * 10); print(readHeap(v3)); countDown( cnt )); await(cnt); print(100); countDown( cnt ); print(100)

Symbol table:
cnt -> 0
v1 -> (1, int)

Heap table:

Output:

File table:

------------------------
ID: 1
Execution stack:
Ref(int) v2; Ref(int) v3; new(v1, 2); new(v2, 3); new(v3, 4); newLatch(cnt, readHeap(v2)); fork(writeHeap(v1, readHeap(v1) * 10); print(readHeap(v1)); countDown( cnt )); fork(writeHeap(v2, readHeap(v2) * 10); print(readHeap(v2)); countDown( cnt )); fork(writeHeap(v3, readHeap(v3) * 10); print(readHeap(v3)); countDown( cnt )); await(cnt); print(100); countDown( cnt ); print(100)

Symbol table:
cnt -> 0
v1 -> (1, int)

Heap table:

Output:

File table:

------------------------
ID: 1
Execution stack:
Ref(int) v2
Ref(int) v3; new(v1, 2); new(v2, 3); new(v3, 4); newLatch(cnt, readHeap(v2)); fork(writeHeap(v1, readHeap(v1) * 10); print(readHeap(v1)); countDown( cnt )); fork(writeHeap(v2, readHeap(v2) * 10); print(readHeap(v2)); countDown( cnt )); fork(writeHeap(v3, readHeap(v3) * 10); print(readHeap(v3)); countDown( cnt )); await(cnt); print(100); countDown( cnt ); print(100)

Symbol table:
cnt -> 0
v1 -> (1, int)

Heap table:

Output:

File table:

------------------------
ID: 1
Execution stack:
Ref(int) v2
Ref(int) v3; new(v1, 2); new(v2, 3); new(v3, 4); newLatch(cnt, readHeap(v2)); fork(writeHeap(v1, readHeap(v1) * 10); print(readHeap(v1)); countDown( cnt )); fork(writeHeap(v2, readHeap(v2) * 10); print(readHeap(v2)); countDown( cnt )); fork(writeHeap(v3, readHeap(v3) * 10); print(readHeap(v3)); countDown( cnt )); await(cnt); print(100); countDown( cnt ); print(100)

Symbol table:
cnt -> 0
v1 -> (1, int)

Heap table:

Output:

File table:

------------------------
ID: 1
Execution stack:
Ref(int) v3; new(v1, 2); new(v2, 3); new(v3, 4); newLatch(cnt, readHeap(v2)); fork(writeHeap(v1, readHeap(v1) * 10); print(readHeap(v1)); countDown( cnt )); fork(writeHeap(v2, readHeap(v2) * 10); print(readHeap(v2)); countDown( cnt )); fork(writeHeap(v3, readHeap(v3) * 10); print(readHeap(v3)); countDown( cnt )); await(cnt); print(100); countDown( cnt ); print(100)

Symbol table:
cnt -> 0
v1 -> (1, int)
v2 -> (1, int)

Heap table:

Output:

File table:

------------------------
ID: 1
Execution stack:
Ref(int) v3; new(v1, 2); new(v2, 3); new(v3, 4); newLatch(cnt, readHeap(v2)); fork(writeHeap(v1, readHeap(v1) * 10); print(readHeap(v1)); countDown( cnt )); fork(writeHeap(v2, readHeap(v2) * 10); print(readHeap(v2)); countDown( cnt )); fork(writeHeap(v3, readHeap(v3) * 10); print(readHeap(v3)); countDown( cnt )); await(cnt); print(100); countDown( cnt ); print(100)

Symbol table:
cnt -> 0
v1 -> (1, int)
v2 -> (1, int)

Heap table:

Output:

File table:

------------------------
ID: 1
Execution stack:
Ref(int) v3
new(v1, 2); new(v2, 3); new(v3, 4); newLatch(cnt, readHeap(v2)); fork(writeHeap(v1, readHeap(v1) * 10); print(readHeap(v1)); countDown( cnt )); fork(writeHeap(v2, readHeap(v2) * 10); print(readHeap(v2)); countDown( cnt )); fork(writeHeap(v3, readHeap(v3) * 10); print(readHeap(v3)); countDown( cnt )); await(cnt); print(100); countDown( cnt ); print(100)

Symbol table:
cnt -> 0
v1 -> (1, int)
v2 -> (1, int)

Heap table:

Output:

File table:

------------------------
ID: 1
Execution stack:
Ref(int) v3
new(v1, 2); new(v2, 3); new(v3, 4); newLatch(cnt, readHeap(v2)); fork(writeHeap(v1, readHeap(v1) * 10); print(readHeap(v1)); countDown( cnt )); fork(writeHeap(v2, readHeap(v2) * 10); print(readHeap(v2)); countDown( cnt )); fork(writeHeap(v3, readHeap(v3) * 10); print(readHeap(v3)); countDown( cnt )); await(cnt); print(100); countDown( cnt ); print(100)

Symbol table:
cnt -> 0
v1 -> (1, int)
v2 -> (1, int)

Heap table:

Output:

File table:

------------------------
ID: 1
Execution stack:
new(v1, 2); new(v2, 3); new(v3, 4); newLatch(cnt, readHeap(v2)); fork(writeHeap(v1, readHeap(v1) * 10); print(readHeap(v1)); countDown( cnt )); fork(writeHeap(v2, readHeap(v2) * 10); print(readHeap(v2)); countDown( cnt )); fork(writeHeap(v3, readHeap(v3) * 10); print(readHeap(v3)); countDown( cnt )); await(cnt); print(100); countDown( cnt ); print(100)

Symbol table:
cnt -> 0
v1 -> (1, int)
v2 -> (1, int)
v3 -> (1, int)

Heap table:

Output:

File table:

------------------------
ID: 1
Execution stack:
new(v1, 2); new(v2, 3); new(v3, 4); newLatch(cnt, readHeap(v2)); fork(writeHeap(v1, readHeap(v1) * 10); print(readHeap(v1)); countDown( cnt )); fork(writeHeap(v2, readHeap(v2) * 10); print(readHeap(v2)); countDown( cnt )); fork(writeHeap(v3, readHeap(v3) * 10); print(readHeap(v3)); countDown( cnt )); await(cnt); print(100); countDown( cnt ); print(100)

Symbol table:
cnt -> 0
v1 -> (1, int)
v2 -> (1, int)
v3 -> (1, int)

Heap table:

Output:

File table:

------------------------
ID: 1
Execution stack:
new(v1, 2)
new(v2, 3); new(v3, 4); newLatch(cnt, readHeap(v2)); fork(writeHeap(v1, readHeap(v1) * 10); print(readHeap(v1)); countDown( cnt )); fork(writeHeap(v2, readHeap(v2) * 10); print(readHeap(v2)); countDown( cnt )); fork(writeHeap(v3, readHeap(v3) * 10); print(readHeap(v3)); countDown( cnt )); await(cnt); print(100); countDown( cnt ); print(100)

Symbol table:
cnt -> 0
v1 -> (1, int)
v2 -> (1, int)
v3 -> (1, int)

Heap table:

Output:

File table:

------------------------
ID: 1
Execution stack:
new(v1, 2)
new(v2, 3); new(v3, 4); newLatch(cnt, readHeap(v2)); fork(writeHeap(v1, readHeap(v1) * 10); print(readHeap(v1)); countDown( cnt )); fork(writeHeap(v2, readHeap(v2) * 10); print(readHeap(v2)); countDown( cnt )); fork(writeHeap(v3, readHeap(v3) * 10); print(readHeap(v3)); countDown( cnt )); await(cnt); print(100); countDown( cnt ); print(100)

Symbol table:
cnt -> 0
v1 -> (1, int)
v2 -> (1, int)
v3 -> (1, int)

Heap table:

Output:

File table:

------------------------
ID: 1
Execution stack:
new(v2, 3); new(v3, 4); newLatch(cnt, readHeap(v2)); fork(writeHeap(v1, readHeap(v1) * 10); print(readHeap(v1)); countDown( cnt )); fork(writeHeap(v2, readHeap(v2) * 10); print(readHeap(v2)); countDown( cnt )); fork(writeHeap(v3, readHeap(v3) * 10); print(readHeap(v3)); countDown( cnt )); await(cnt); print(100); countDown( cnt ); print(100)

Symbol table:
cnt -> 0
v1 -> (1, int)
v2 -> (1, int)
v3 -> (1, int)

Heap table:
1 -> 2

Output:

File table:

------------------------
ID: 1
Execution stack:
new(v2, 3); new(v3, 4); newLatch(cnt, readHeap(v2)); fork(writeHeap(v1, readHeap(v1) * 10); print(readHeap(v1)); countDown( cnt )); fork(writeHeap(v2, readHeap(v2) * 10); print(readHeap(v2)); countDown( cnt )); fork(writeHeap(v3, readHeap(v3) * 10); print(readHeap(v3)); countDown( cnt )); await(cnt); print(100); countDown( cnt ); print(100)

Symbol table:
cnt -> 0
v1 -> (1, int)
v2 -> (1, int)
v3 -> (1, int)

Heap table:
1 -> 2

Output:

File table:

------------------------
ID: 1
Execution stack:
new(v2, 3)
new(v3, 4); newLatch(cnt, readHeap(v2)); fork(writeHeap(v1, readHeap(v1) * 10); print(readHeap(v1)); countDown( cnt )); fork(writeHeap(v2, readHeap(v2) * 10); print(readHeap(v2)); countDown( cnt )); fork(writeHeap(v3, readHeap(v3) * 10); print(readHeap(v3)); countDown( cnt )); await(cnt); print(100); countDown( cnt ); print(100)

Symbol table:
cnt -> 0
v1 -> (1, int)
v2 -> (1, int)
v3 -> (1, int)

Heap table:
1 -> 2

Output:

File table:

------------------------
ID: 1
Execution stack:
new(v2, 3)
new(v3, 4); newLatch(cnt, readHeap(v2)); fork(writeHeap(v1, readHeap(v1) * 10); print(readHeap(v1)); countDown( cnt )); fork(writeHeap(v2, readHeap(v2) * 10); print(readHeap(v2)); countDown( cnt )); fork(writeHeap(v3, readHeap(v3) * 10); print(readHeap(v3)); countDown( cnt )); await(cnt); print(100); countDown( cnt ); print(100)

Symbol table:
cnt -> 0
v1 -> (1, int)
v2 -> (1, int)
v3 -> (1, int)

Heap table:
1 -> 2

Output:

File table:

------------------------
ID: 1
Execution stack:
new(v3, 4); newLatch(cnt, readHeap(v2)); fork(writeHeap(v1, readHeap(v1) * 10); print(readHeap(v1)); countDown( cnt )); fork(writeHeap(v2, readHeap(v2) * 10); print(readHeap(v2)); countDown( cnt )); fork(writeHeap(v3, readHeap(v3) * 10); print(readHeap(v3)); countDown( cnt )); await(cnt); print(100); countDown( cnt ); print(100)

Symbol table:
cnt -> 0
v1 -> (1, int)
v2 -> (2, int)
v3 -> (1, int)

Heap table:
1 -> 2
2 -> 3

Output:

File table:

------------------------
ID: 1
Execution stack:
new(v3, 4); newLatch(cnt, readHeap(v2)); fork(writeHeap(v1, readHeap(v1) * 10); print(readHeap(v1)); countDown( cnt )); fork(writeHeap(v2, readHeap(v2) * 10); print(readHeap(v2)); countDown( cnt )); fork(writeHeap(v3, readHeap(v3) * 10); print(readHeap(v3)); countDown( cnt )); await(cnt); print(100); countDown( cnt ); print(100)

Symbol table:
cnt -> 0
v1 -> (1, int)
v2 -> (2, int)
v3 -> (1, int)

Heap table:
1 -> 2
2 -> 3

Output:

File table:

------------------------
ID: 1
Execution stack:
new(v3, 4)
newLatch(cnt, readHeap(v2)); fork(writeHeap(v1, readHeap(v1) * 10); print(readHeap(v1)); countDown( cnt )); fork(writeHeap(v2, readHeap(v2) * 10); print(readHeap(v2)); countDown( cnt )); fork(writeHeap(v3, readHeap(v3) * 10); print(readHeap(v3)); countDown( cnt )); await(cnt); print(100); countDown( cnt ); print(100)

Symbol table:
cnt -> 0
v1 -> (1, int)
v2 -> (2, int)
v3 -> (1, int)

Heap table:
1 -> 2
2 -> 3

Output:

File table:

------------------------
ID: 1
Execution stack:
new(v3, 4)
newLatch(cnt, readHeap(v2)); fork(writeHeap(v1, readHeap(v1) * 10); print(readHeap(v1)); countDown( cnt )); fork(writeHeap(v2, readHeap(v2) * 10); print(readHeap(v2)); countDown( cnt )); fork(writeHeap(v3, readHeap(v3) * 10); print(readHeap(v3)); countDown( cnt )); await(cnt); print(100); countDown( cnt ); print(100)

Symbol table:
cnt -> 0
v1 -> (1, int)
v2 -> (2, int)
v3 -> (1, int)

Heap table:
1 -> 2
2 -> 3

Output:

File table:

------------------------
ID: 1
Execution stack:
newLatch(cnt, readHeap(v2)); fork(writeHeap(v1, readHeap(v1) * 10); print(readHeap(v1)); countDown( cnt )); fork(writeHeap(v2, readHeap(v2) * 10); print(readHeap(v2)); countDown( cnt )); fork(writeHeap(v3, readHeap(v3) * 10); print(readHeap(v3)); countDown( cnt )); await(cnt); print(100); countDown( cnt ); print(100)

Symbol table:
cnt -> 0
v1 -> (1, int)
v2 -> (2, int)
v3 -> (3, int)

Heap table:
1 -> 2
2 -> 3
3 -> 4

Output:

File table:

------------------------
ID: 1
Execution stack:
newLatch(cnt, readHeap(v2)); fork(writeHeap(v1, readHeap(v1) * 10); print(readHeap(v1)); countDown( cnt )); fork(writeHeap(v2, readHeap(v2) * 10); print(readHeap(v2)); countDown( cnt )); fork(writeHeap(v3, readHeap(v3) * 10); print(readHeap(v3)); countDown( cnt )); await(cnt); print(100); countDown( cnt ); print(100)

Symbol table:
cnt -> 0
v1 -> (1, int)
v2 -> (2, int)
v3 -> (3, int)

Heap table:
1 -> 2
2 -> 3
3 -> 4

Output:

File table:

------------------------
ID: 1
Execution stack:
newLatch(cnt, readHeap(v2))
fork(writeHeap(v1, readHeap(v1) * 10); print(readHeap(v1)); countDown( cnt )); fork(writeHeap(v2, readHeap(v2) * 10); print(readHeap(v2)); countDown( cnt )); fork(writeHeap(v3, readHeap(v3) * 10); print(readHeap(v3)); countDown( cnt )); await(cnt); print(100); countDown( cnt ); print(100)

Symbol table:
cnt -> 0
v1 -> (1, int)
v2 -> (2, int)
v3 -> (3, int)

Heap table:
1 -> 2
2 -> 3
3 -> 4

Output:

File table:

------------------------
ID: 1
Execution stack:
newLatch(cnt, readHeap(v2))
fork(writeHeap(v1, readHeap(v1) * 10); print(readHeap(v1)); countDown( cnt )); fork(writeHeap(v2, readHeap(v2) * 10); print(readHeap(v2)); countDown( cnt )); fork(writeHeap(v3, readHeap(v3) * 10); print(readHeap(v3)); countDown( cnt )); await(cnt); print(100); countDown( cnt ); print(100)

Symbol table:
cnt -> 0
v1 -> (1, int)
v2 -> (2, int)
v3 -> (3, int)

Heap table:
1 -> 2
2 -> 3
3 -> 4

Output:

File table:

------------------------
ID: 1
Execution stack:
fork(writeHeap(v1, readHeap(v1) * 10); print(readHeap(v1)); countDown( cnt )); fork(writeHeap(v2, readHeap(v2) * 10); print(readHeap(v2)); countDown( cnt )); fork(writeHeap(v3, readHeap(v3) * 10); print(readHeap(v3)); countDown( cnt )); await(cnt); print(100); countDown( cnt ); print(100)

Symbol table:
cnt -> 0
v1 -> (1, int)
v2 -> (2, int)
v3 -> (3, int)

Heap table:
1 -> 2
2 -> 3
3 -> 4

Output:

File table:

------------------------
ID: 1
Execution stack:
fork(writeHeap(v1, readHeap(v1) * 10); print(readHeap(v1)); countDown( cnt )); fork(writeHeap(v2, readHeap(v2) * 10); print(readHeap(v2)); countDown( cnt )); fork(writeHeap(v3, readHeap(v3) * 10); print(readHeap(v3)); countDown( cnt )); await(cnt); print(100); countDown( cnt ); print(100)

Symbol table:
cnt -> 0
v1 -> (1, int)
v2 -> (2, int)
v3 -> (3, int)

Heap table:
1 -> 2
2 -> 3
3 -> 4

Output:

File table:

------------------------
ID: 1
Execution stack:
fork(writeHeap(v1, readHeap(v1) * 10); print(readHeap(v1)); countDown( cnt ))
fork(writeHeap(v2, readHeap(v2) * 10); print(readHeap(v2)); countDown( cnt )); fork(writeHeap(v3, readHeap(v3) * 10); print(readHeap(v3)); countDown( cnt )); await(cnt); print(100); countDown( cnt ); print(100)

Symbol table:
cnt -> 0
v1 -> (1, int)
v2 -> (2, int)
v3 -> (3, int)

Heap table:
1 -> 2
2 -> 3
3 -> 4

Output:

File table:

------------------------
ID: 1
Execution stack:
fork(writeHeap(v1, readHeap(v1) * 10); print(readHeap(v1)); countDown( cnt ))
fork(writeHeap(v2, readHeap(v2) * 10); print(readHeap(v2)); countDown( cnt )); fork(writeHeap(v3, readHeap(v3) * 10); print(readHeap(v3)); countDown( cnt )); await(cnt); print(100); countDown( cnt ); print(100)

Symbol table:
cnt -> 0
v1 -> (1, int)
v2 -> (2, int)
v3 -> (3, int)

Heap table:
1 -> 2
2 -> 3
3 -> 4

Output:

File table:

------------------------
ID: 1
Execution stack:
fork(writeHeap(v2, readHeap(v2) * 10); print(readHeap(v2)); countDown( cnt )); fork(writeHeap(v3, readHeap(v3) * 10); print(readHeap(v3)); countDown( cnt )); await(cnt); print(100); countDown( cnt ); print(100)

Symbol table:
cnt -> 0
v1 -> (1, int)
v2 -> (2, int)
v3 -> (3, int)

Heap table:
1 -> 2
2 -> 3
3 -> 4

Output:

File table:

------------------------
ID: 2
Execution stack:
writeHeap(v1, readHeap(v1) * 10); print(readHeap(v1)); countDown( cnt )

Symbol table:
cnt -> 0
v1 -> (1, int)
v2 -> (2, int)
v3 -> (3, int)

Heap table:
1 -> 2
2 -> 3
3 -> 4

Output:

File table:

------------------------
ID: 1
Execution stack:
fork(writeHeap(v2, readHeap(v2) * 10); print(readHeap(v2)); countDown( cnt )); fork(writeHeap(v3, readHeap(v3) * 10); print(readHeap(v3)); countDown( cnt )); await(cnt); print(100); countDown( cnt ); print(100)

Symbol table:
cnt -> 0
v1 -> (1, int)
v2 -> (2, int)
v3 -> (3, int)

Heap table:
1 -> 2
2 -> 3
3 -> 4

Output:

File table:

------------------------
ID: 2
Execution stack:
writeHeap(v1, readHeap(v1) * 10); print(readHeap(v1)); countDown( cnt )

Symbol table:
cnt -> 0
v1 -> (1, int)
v2 -> (2, int)
v3 -> (3, int)

Heap table:
1 -> 2
2 -> 3
3 -> 4

Output:

File table:

------------------------
ID: 1
Execution stack:
fork(writeHeap(v2, readHeap(v2) * 10); print(readHeap(v2)); countDown( cnt ))
fork(writeHeap(v3, readHeap(v3) * 10); print(readHeap(v3)); countDown( cnt )); await(cnt); print(100); countDown( cnt ); print(100)

Symbol table:
cnt -> 0
v1 -> (1, int)
v2 -> (2, int)
v3 -> (3, int)

Heap table:
1 -> 2
2 -> 3
3 -> 4

Output:

File table:

------------------------
ID: 2
Execution stack:
writeHeap(v1, readHeap(v1) * 10)
print(readHeap(v1)); countDown( cnt )

Symbol table:
cnt -> 0
v1 -> (1, int)
v2 -> (2, int)
v3 -> (3, int)

Heap table:
1 -> 2
2 -> 3
3 -> 4

Output:

File table:

------------------------
ID: 1
Execution stack:
fork(writeHeap(v2, readHeap(v2) * 10); print(readHeap(v2)); countDown( cnt ))
fork(writeHeap(v3, readHeap(v3) * 10); print(readHeap(v3)); countDown( cnt )); await(cnt); print(100); countDown( cnt ); print(100)

Symbol table:
cnt -> 0
v1 -> (1, int)
v2 -> (2, int)
v3 -> (3, int)

Heap table:
1 -> 2
2 -> 3
3 -> 4

Output:

File table:

------------------------
ID: 2
Execution stack:
writeHeap(v1, readHeap(v1) * 10)
print(readHeap(v1)); countDown( cnt )

Symbol table:
cnt -> 0
v1 -> (1, int)
v2 -> (2, int)
v3 -> (3, int)

Heap table:
1 -> 2
2 -> 3
3 -> 4

Output:

File table:

------------------------
ID: 1
Execution stack:
fork(writeHeap(v3, readHeap(v3) * 10); print(readHeap(v3)); countDown( cnt )); await(cnt); print(100); countDown( cnt ); print(100)

Symbol table:
cnt -> 0
v1 -> (1, int)
v2 -> (2, int)
v3 -> (3, int)

Heap table:
1 -> 20
2 -> 3
3 -> 4

Output:

File table:

------------------------
ID: 2
Execution stack:
print(readHeap(v1)); countDown( cnt )

Symbol table:
cnt -> 0
v1 -> (1, int)
v2 -> (2, int)
v3 -> (3, int)

Heap table:
1 -> 20
2 -> 3
3 -> 4

Output:

File table:

------------------------
ID: 3
Execution stack:
writeHeap(v2, readHeap(v2) * 10); print(readHeap(v2)); countDown( cnt )

Symbol table:
cnt -> 0
v1 -> (1, int)
v2 -> (2, int)
v3 -> (3, int)

Heap table:
1 -> 20
2 -> 3
3 -> 4

Output:

File table:

------------------------
ID: 1
Execution stack:
fork(writeHeap(v3, readHeap(v3) * 10); print(readHeap(v3)); countDown( cnt )); await(cnt); print(100); countDown( cnt ); print(100)

Symbol table:
cnt -> 0
v1 -> (1, int)
v2 -> (2, int)
v3 -> (3, int)

Heap table:
1 -> 20
2 -> 3
3 -> 4

Output:

File table:

------------------------
ID: 2
Execution stack:
print(readHeap(v1)); countDown( cnt )

Symbol table:
cnt -> 0
v1 -> (1, int)
v2 -> (2, int)
v3 -> (3, int)

Heap table:
1 -> 20
2 -> 3
3 -> 4

Output:

File table:

------------------------
ID: 3
Execution stack:
writeHeap(v2, readHeap(v2) * 10); print(readHeap(v2)); countDown( cnt )

Symbol table:
cnt -> 0
v1 -> (1, int)
v2 -> (2, int)
v3 -> (3, int)

Heap table:
1 -> 20
2 -> 3
3 -> 4

Output:

File table:

------------------------
ID: 1
Execution stack:
fork(writeHeap(v3, readHeap(v3) * 10); print(readHeap(v3)); countDown( cnt ))
await(cnt); print(100); countDown( cnt ); print(100)

Symbol table:
cnt -> 0
v1 -> (1, int)
v2 -> (2, int)
v3 -> (3, int)

Heap table:
1 -> 20
2 -> 3
3 -> 4

Output:

File table:

------------------------
ID: 2
Execution stack:
print(readHeap(v1))
countDown( cnt )

Symbol table:
cnt -> 0
v1 -> (1, int)
v2 -> (2, int)
v3 -> (3, int)

Heap table:
1 -> 20
2 -> 3
3 -> 4

Output:

File table:

------------------------
ID: 3
Execution stack:
writeHeap(v2, readHeap(v2) * 10)
print(readHeap(v2)); countDown( cnt )

Symbol table:
cnt -> 0
v1 -> (1, int)
v2 -> (2, int)
v3 -> (3, int)

Heap table:
1 -> 20
2 -> 3
3 -> 4

Output:

File table:

------------------------
ID: 1
Execution stack:
fork(writeHeap(v3, readHeap(v3) * 10); print(readHeap(v3)); countDown( cnt ))
await(cnt); print(100); countDown( cnt ); print(100)

Symbol table:
cnt -> 0
v1 -> (1, int)
v2 -> (2, int)
v3 -> (3, int)

Heap table:
1 -> 20
2 -> 3
3 -> 4

Output:

File table:

------------------------
ID: 2
Execution stack:
print(readHeap(v1))
countDown( cnt )

Symbol table:
cnt -> 0
v1 -> (1, int)
v2 -> (2, int)
v3 -> (3, int)

Heap table:
1 -> 20
2 -> 3
3 -> 4

Output:

File table:

------------------------
ID: 3
Execution stack:
writeHeap(v2, readHeap(v2) * 10)
print(readHeap(v2)); countDown( cnt )

Symbol table:
cnt -> 0
v1 -> (1, int)
v2 -> (2, int)
v3 -> (3, int)

Heap table:
1 -> 20
2 -> 3
3 -> 4

Output:

File table:

------------------------
ID: 1
Execution stack:
await(cnt); print(100); countDown( cnt ); print(100)

Symbol table:
cnt -> 0
v1 -> (1, int)
v2 -> (2, int)
v3 -> (3, int)

Heap table:
1 -> 20
2 -> 30
3 -> 4

Output:
20

File table:

------------------------
ID: 2
Execution stack:
countDown( cnt )

Symbol table:
cnt -> 0
v1 -> (1, int)
v2 -> (2, int)
v3 -> (3, int)

Heap table:
1 -> 20
2 -> 30
3 -> 4

Output:
20

File table:

------------------------
ID: 3
Execution stack:
print(readHeap(v2)); countDown( cnt )

Symbol table:
cnt -> 0
v1 -> (1, int)
v2 -> (2, int)
v3 -> (3, int)

Heap table:
1 -> 20
2 -> 30
3 -> 4

Output:
20

File table:

------------------------
ID: 4
Execution stack:
writeHeap(v3, readHeap(v3) * 10); print(readHeap(v3)); countDown( cnt )

Symbol table:
cnt -> 0
v1 -> (1, int)
v2 -> (2, int)
v3 -> (3, int)

Heap table:
1 -> 20
2 -> 30
3 -> 4

Output:
20

File table:

------------------------
ID: 1
Execution stack:
await(cnt); print(100); countDown( cnt ); print(100)

Symbol table:
cnt -> 0
v1 -> (1, int)
v2 -> (2, int)
v3 -> (3, int)

Heap table:
1 -> 20
2 -> 30
3 -> 4

Output:
20

File table:

------------------------
ID: 2
Execution stack:
countDown( cnt )

Symbol table:
cnt -> 0
v1 -> (1, int)
v2 -> (2, int)
v3 -> (3, int)

Heap table:
1 -> 20
2 -> 30
3 -> 4

Output:
20

File table:

------------------------
ID: 3
Execution stack:
print(readHeap(v2)); countDown( cnt )

Symbol table:
cnt -> 0
v1 -> (1, int)
v2 -> (2, int)
v3 -> (3, int)

Heap table:
1 -> 20
2 -> 30
3 -> 4

Output:
20

File table:

------------------------
ID: 4
Execution stack:
writeHeap(v3, readHeap(v3) * 10); print(readHeap(v3)); countDown( cnt )

Symbol table:
cnt -> 0
v1 -> (1, int)
v2 -> (2, int)
v3 -> (3, int)

Heap table:
1 -> 20
2 -> 30
3 -> 4

Output:
20

File table:

------------------------
ID: 1
Execution stack:
await(cnt)
print(100); countDown( cnt ); print(100)

Symbol table:
cnt -> 0
v1 -> (1, int)
v2 -> (2, int)
v3 -> (3, int)

Heap table:
1 -> 20
2 -> 30
3 -> 4

Output:
20
2

File table:

------------------------
ID: 2
Execution stack:

Symbol table:
cnt -> 0
v1 -> (1, int)
v2 -> (2, int)
v3 -> (3, int)

Heap table:
1 -> 20
2 -> 30
3 -> 4

Output:
20
2

File table:

------------------------
ID: 3
Execution stack:
print(readHeap(v2))
countDown( cnt )

Symbol table:
cnt -> 0
v1 -> (1, int)
v2 -> (2, int)
v3 -> (3, int)

Heap table:
1 -> 20
2 -> 30
3 -> 4

Output:
20
2

File table:

------------------------
ID: 4
Execution stack:
writeHeap(v3, readHeap(v3) * 10)
print(readHeap(v3)); countDown( cnt )

Symbol table:
cnt -> 0
v1 -> (1, int)
v2 -> (2, int)
v3 -> (3, int)

Heap table:
1 -> 20
2 -> 30
3 -> 4

Output:
20
2

File table:

------------------------
ID: 1
Execution stack:
await(cnt)
print(100); countDown( cnt ); print(100)

Symbol table:
cnt -> 0
v1 -> (1, int)
v2 -> (2, int)
v3 -> (3, int)

Heap table:
1 -> 20
2 -> 30
3 -> 4

Output:
20
2

File table:

------------------------
ID: 3
Execution stack:
print(readHeap(v2))
countDown( cnt )

Symbol table:
cnt -> 0
v1 -> (1, int)
v2 -> (2, int)
v3 -> (3, int)

Heap table:
1 -> 20
2 -> 30
3 -> 4

Output:
20
2

File table:

------------------------
ID: 4
Execution stack:
writeHeap(v3, readHeap(v3) * 10)
print(readHeap(v3)); countDown( cnt )

Symbol table:
cnt -> 0
v1 -> (1, int)
v2 -> (2, int)
v3 -> (3, int)

Heap table:
1 -> 20
2 -> 30
3 -> 4

Output:
20
2

File table:

------------------------
ID: 1
Execution stack:
await(cnt)
print(100); countDown( cnt ); print(100)

Symbol table:
cnt -> 0
v1 -> (1, int)
v2 -> (2, int)
v3 -> (3, int)

Heap table:
1 -> 20
2 -> 30
3 -> 40

Output:
20
2
30

File table:

------------------------
ID: 3
Execution stack:
countDown( cnt )

Symbol table:
cnt -> 0
v1 -> (1, int)
v2 -> (2, int)
v3 -> (3, int)

Heap table:
1 -> 20
2 -> 30
3 -> 40

Output:
20
2
30

File table:

------------------------
ID: 4
Execution stack:
print(readHeap(v3)); countDown( cnt )

Symbol table:
cnt -> 0
v1 -> (1, int)
v2 -> (2, int)
v3 -> (3, int)

Heap table:
1 -> 20
2 -> 30
3 -> 40

Output:
20
2
30

File table:

------------------------
ID: 1
Execution stack:
await(cnt)
print(100); countDown( cnt ); print(100)

Symbol table:
cnt -> 0
v1 -> (1, int)
v2 -> (2, int)
v3 -> (3, int)

Heap table:
1 -> 20
2 -> 30
3 -> 40

Output:
20
2
30

File table:

------------------------
ID: 3
Execution stack:
countDown( cnt )

Symbol table:
cnt -> 0
v1 -> (1, int)
v2 -> (2, int)
v3 -> (3, int)

Heap table:
1 -> 20
2 -> 30
3 -> 40

Output:
20
2
30

File table:

------------------------
ID: 4
Execution stack:
print(readHeap(v3)); countDown( cnt )

Symbol table:
cnt -> 0
v1 -> (1, int)
v2 -> (2, int)
v3 -> (3, int)

Heap table:
1 -> 20
2 -> 30
3 -> 40

Output:
20
2
30

File table:

------------------------
ID: 1
Execution stack:
await(cnt)
print(100); countDown( cnt ); print(100)

Symbol table:
cnt -> 0
v1 -> (1, int)
v2 -> (2, int)
v3 -> (3, int)

Heap table:
1 -> 20
2 -> 30
3 -> 40

Output:
20
2
30
3

File table:

------------------------
ID: 3
Execution stack:

Symbol table:
cnt -> 0
v1 -> (1, int)
v2 -> (2, int)
v3 -> (3, int)

Heap table:
1 -> 20
2 -> 30
3 -> 40

Output:
20
2
30
3

File table:

------------------------
ID: 4
Execution stack:
print(readHeap(v3))
countDown( cnt )

Symbol table:
cnt -> 0
v1 -> (1, int)
v2 -> (2, int)
v3 -> (3, int)

Heap table:
1 -> 20
2 -> 30
3 -> 40

Output:
20
2
30
3

File table:

------------------------
ID: 1
Execution stack:
await(cnt)
print(100); countDown( cnt ); print(100)

Symbol table:
cnt -> 0
v1 -> (1, int)
v2 -> (2, int)
v3 -> (3, int)

Heap table:
1 -> 20
2 -> 30
3 -> 40

Output:
20
2
30
3

File table:

------------------------
ID: 4
Execution stack:
print(readHeap(v3))
countDown( cnt )

Symbol table:
cnt -> 0
v1 -> (1, int)
v2 -> (2, int)
v3 -> (3, int)

Heap table:
1 -> 20
2 -> 30
3 -> 40

Output:
20
2
30
3

File table:

------------------------
ID: 1
Execution stack:
await(cnt)
print(100); countDown( cnt ); print(100)

Symbol table:
cnt -> 0
v1 -> (1, int)
v2 -> (2, int)
v3 -> (3, int)

Heap table:
1 -> 20
2 -> 30
3 -> 40

Output:
20
2
30
3
40

File table:

------------------------
ID: 4
Execution stack:
countDown( cnt )

Symbol table:
cnt -> 0
v1 -> (1, int)
v2 -> (2, int)
v3 -> (3, int)

Heap table:
1 -> 20
2 -> 30
3 -> 40

Output:
20
2
30
3
40

File table:

------------------------
ID: 1
Execution stack:
await(cnt)
print(100); countDown( cnt ); print(100)

Symbol table:
cnt -> 0
v1 -> (1, int)
v2 -> (2, int)
v3 -> (3, int)

Heap table:
1 -> 20
2 -> 30
3 -> 40

Output:
20
2
30
3
40

File table:

------------------------
ID: 4
Execution stack:
countDown( cnt )

Symbol table:
cnt -> 0
v1 -> (1, int)
v2 -> (2, int)
v3 -> (3, int)

Heap table:
1 -> 20
2 -> 30
3 -> 40

Output:
20
2
30
3
40

File table:

------------------------
ID: 1
Execution stack:
await(cnt)
print(100); countDown( cnt ); print(100)

Symbol table:
cnt -> 0
v1 -> (1, int)
v2 -> (2, int)
v3 -> (3, int)

Heap table:
1 -> 20
2 -> 30
3 -> 40

Output:
20
2
30
3
40
4

File table:

------------------------
ID: 4
Execution stack:

Symbol table:
cnt -> 0
v1 -> (1, int)
v2 -> (2, int)
v3 -> (3, int)

Heap table:
1 -> 20
2 -> 30
3 -> 40

Output:
20
2
30
3
40
4

File table:

------------------------
ID: 1
Execution stack:
await(cnt)
print(100); countDown( cnt ); print(100)

Symbol table:
cnt -> 0
v1 -> (1, int)
v2 -> (2, int)
v3 -> (3, int)

Heap table:
1 -> 20
2 -> 30
3 -> 40

Output:
20
2
30
3
40
4

File table:

------------------------
ID: 1
Execution stack:
print(100); countDown( cnt ); print(100)

Symbol table:
cnt -> 0
v1 -> (1, int)
v2 -> (2, int)
v3 -> (3, int)

Heap table:
1 -> 20
2 -> 30
3 -> 40

Output:
20
2
30
3
40
4

File table:

------------------------
ID: 1
Execution stack:
print(100); countDown( cnt ); print(100)

Symbol table:
cnt -> 0
v1 -> (1, int)
v2 -> (2, int)
v3 -> (3, int)

Heap table:
1 -> 20
2 -> 30
3 -> 40

Output:
20
2
30
3
40
4

File table:

------------------------
ID: 1
Execution stack:
print(100)
countDown( cnt ); print(100)

Symbol table:
cnt -> 0
v1 -> (1, int)
v2 -> (2, int)
v3 -> (3, int)

Heap table:
1 -> 20
2 -> 30
3 -> 40

Output:
20
2
30
3
40
4

File table:

------------------------
ID: 1
Execution stack:
print(100)
countDown( cnt ); print(100)

Symbol table:
cnt -> 0
v1 -> (1, int)
v2 -> (2, int)
v3 -> (3, int)

Heap table:
1 -> 20
2 -> 30
3 -> 40

Output:
20
2
30
3
40
4

File table:

------------------------
ID: 1
Execution stack:
countDown( cnt ); print(100)

Symbol table:
cnt -> 0
v1 -> (1, int)
v2 -> (2, int)
v3 -> (3, int)

Heap table:
1 -> 20
2 -> 30
3 -> 40

Output:
20
2
30
3
40
4
100

File table:

------------------------
ID: 1
Execution stack:
countDown( cnt ); print(100)

Symbol table:
cnt -> 0
v1 -> (1, int)
v2 -> (2, int)
v3 -> (3, int)

Heap table:
1 -> 20
2 -> 30
3 -> 40

Output:
20
2
30
3
40
4
100

File table:

------------------------
ID: 1
Execution stack:
countDown( cnt )
print(100)

Symbol table:
cnt -> 0
v1 -> (1, int)
v2 -> (2, int)
v3 -> (3, int)

Heap table:
1 -> 20
2 -> 30
3 -> 40

Output:
20
2
30
3
40
4
100

File table:

------------------------
ID: 1
Execution stack:
countDown( cnt )
print(100)

Symbol table:
cnt -> 0
v1 -> (1, int)
v2 -> (2, int)
v3 -> (3, int)

Heap table:
1 -> 20
2 -> 30
3 -> 40

Output:
20
2
30
3
40
4
100

File table:

------------------------
ID: 1
Execution stack:
print(100)

Symbol table:
cnt -> 0
v1 -> (1, int)
v2 -> (2, int)
v3 -> (3, int)

Heap table:
1 -> 20
2 -> 30
3 -> 40

Output:
20
2
30
3
40
4
100
1

File table:

------------------------
ID: 1
Execution stack:
print(100)

Symbol table:
cnt -> 0
v1 -> (1, int)
v2 -> (2, int)
v3 -> (3, int)

Heap table:
1 -> 20
2 -> 30
3 -> 40

Output:
20
2
30
3
40
4
100
1

File table:

------------------------
ID: 1
Execution stack:

Symbol table:
cnt -> 0
v1 -> (1, int)
v2 -> (2, int)
v3 -> (3, int)

Heap table:
1 -> 20
2 -> 30
3 -> 40

Output:
20
2
30
3
40
4
100
1
100

File table:

------------------------
ID: 1
Execution stack:
int cnt; Ref(int) v1; Ref(int) v2; Ref(int) v3; new(v1, 2); new(v2, 3); new(v3, 4); newLatch(cnt, readHeap(v2)); fork(writeHeap(v1, readHeap(v1) * 10); print(readHeap(v1)); countDown( cnt )); fork(writeHeap(v2, readHeap(v2) * 10); print(readHeap(v2)); countDown( cnt )); fork(writeHeap(v3, readHeap(v3) * 10); print(readHeap(v3)); countDown( cnt )); await(cnt); print(100); countDown( cnt ); print(100)

Symbol table:

Heap table:

Output:

File table:

------------------------
ID: 1
Execution stack:
int cnt
Ref(int) v1; Ref(int) v2; Ref(int) v3; new(v1, 2); new(v2, 3); new(v3, 4); newLatch(cnt, readHeap(v2)); fork(writeHeap(v1, readHeap(v1) * 10); print(readHeap(v1)); countDown( cnt )); fork(writeHeap(v2, readHeap(v2) * 10); print(readHeap(v2)); countDown( cnt )); fork(writeHeap(v3, readHeap(v3) * 10); print(readHeap(v3)); countDown( cnt )); await(cnt); print(100); countDown( cnt ); print(100)

Symbol table:

Heap table:

Output:

File table:

------------------------
ID: 1
Execution stack:
int cnt
Ref(int) v1; Ref(int) v2; Ref(int) v3; new(v1, 2); new(v2, 3); new(v3, 4); newLatch(cnt, readHeap(v2)); fork(writeHeap(v1, readHeap(v1) * 10); print(readHeap(v1)); countDown( cnt )); fork(writeHeap(v2, readHeap(v2) * 10); print(readHeap(v2)); countDown( cnt )); fork(writeHeap(v3, readHeap(v3) * 10); print(readHeap(v3)); countDown( cnt )); await(cnt); print(100); countDown( cnt ); print(100)

Symbol table:

Heap table:

Output:

File table:

------------------------
ID: 1
Execution stack:
Ref(int) v1; Ref(int) v2; Ref(int) v3; new(v1, 2); new(v2, 3); new(v3, 4); newLatch(cnt, readHeap(v2)); fork(writeHeap(v1, readHeap(v1) * 10); print(readHeap(v1)); countDown( cnt )); fork(writeHeap(v2, readHeap(v2) * 10); print(readHeap(v2)); countDown( cnt )); fork(writeHeap(v3, readHeap(v3) * 10); print(readHeap(v3)); countDown( cnt )); await(cnt); print(100); countDown( cnt ); print(100)

Symbol table:
cnt -> 0

Heap table:

Output:

File table:

------------------------
ID: 1
Execution stack:
Ref(int) v1; Ref(int) v2; Ref(int) v3; new(v1, 2); new(v2, 3); new(v3, 4); newLatch(cnt, readHeap(v2)); fork(writeHeap(v1, readHeap(v1) * 10); print(readHeap(v1)); countDown( cnt )); fork(writeHeap(v2, readHeap(v2) * 10); print(readHeap(v2)); countDown( cnt )); fork(writeHeap(v3, readHeap(v3) * 10); print(readHeap(v3)); countDown( cnt )); await(cnt); print(100); countDown( cnt ); print(100)

Symbol table:
cnt -> 0

Heap table:

Output:

File table:

------------------------
ID: 1
Execution stack:
Ref(int) v1
Ref(int) v2; Ref(int) v3; new(v1, 2); new(v2, 3); new(v3, 4); newLatch(cnt, readHeap(v2)); fork(writeHeap(v1, readHeap(v1) * 10); print(readHeap(v1)); countDown( cnt )); fork(writeHeap(v2, readHeap(v2) * 10); print(readHeap(v2)); countDown( cnt )); fork(writeHeap(v3, readHeap(v3) * 10); print(readHeap(v3)); countDown( cnt )); await(cnt); print(100); countDown( cnt ); print(100)

Symbol table:
cnt -> 0

Heap table:

Output:

File table:

------------------------
ID: 1
Execution stack:
Ref(int) v1
Ref(int) v2; Ref(int) v3; new(v1, 2); new(v2, 3); new(v3, 4); newLatch(cnt, readHeap(v2)); fork(writeHeap(v1, readHeap(v1) * 10); print(readHeap(v1)); countDown( cnt )); fork(writeHeap(v2, readHeap(v2) * 10); print(readHeap(v2)); countDown( cnt )); fork(writeHeap(v3, readHeap(v3) * 10); print(readHeap(v3)); countDown( cnt )); await(cnt); print(100); countDown( cnt ); print(100)

Symbol table:
cnt -> 0

Heap table:

Output:

File table:

------------------------
ID: 1
Execution stack:
Ref(int) v2; Ref(int) v3; new(v1, 2); new(v2, 3); new(v3, 4); newLatch(cnt, readHeap(v2)); fork(writeHeap(v1, readHeap(v1) * 10); print(readHeap(v1)); countDown( cnt )); fork(writeHeap(v2, readHeap(v2) * 10); print(readHeap(v2)); countDown( cnt )); fork(writeHeap(v3, readHeap(v3) * 10); print(readHeap(v3)); countDown( cnt )); await(cnt); print(100); countDown( cnt ); print(100)

Symbol table:
cnt -> 0
v1 -> (1, int)

Heap table:

Output:

File table:

------------------------
ID: 1
Execution stack:
Ref(int) v2; Ref(int) v3; new(v1, 2); new(v2, 3); new(v3, 4); newLatch(cnt, readHeap(v2)); fork(writeHeap(v1, readHeap(v1) * 10); print(readHeap(v1)); countDown( cnt )); fork(writeHeap(v2, readHeap(v2) * 10); print(readHeap(v2)); countDown( cnt )); fork(writeHeap(v3, readHeap(v3) * 10); print(readHeap(v3)); countDown( cnt )); await(cnt); print(100); countDown( cnt ); print(100)

Symbol table:
cnt -> 0
v1 -> (1, int)

Heap table:

Output:

File table:

------------------------
ID: 1
Execution stack:
Ref(int) v2
Ref(int) v3; new(v1, 2); new(v2, 3); new(v3, 4); newLatch(cnt, readHeap(v2)); fork(writeHeap(v1, readHeap(v1) * 10); print(readHeap(v1)); countDown( cnt )); fork(writeHeap(v2, readHeap(v2) * 10); print(readHeap(v2)); countDown( cnt )); fork(writeHeap(v3, readHeap(v3) * 10); print(readHeap(v3)); countDown( cnt )); await(cnt); print(100); countDown( cnt ); print(100)

Symbol table:
cnt -> 0
v1 -> (1, int)

Heap table:

Output:

File table:

------------------------
ID: 1
Execution stack:
Ref(int) v2
Ref(int) v3; new(v1, 2); new(v2, 3); new(v3, 4); newLatch(cnt, readHeap(v2)); fork(writeHeap(v1, readHeap(v1) * 10); print(readHeap(v1)); countDown( cnt )); fork(writeHeap(v2, readHeap(v2) * 10); print(readHeap(v2)); countDown( cnt )); fork(writeHeap(v3, readHeap(v3) * 10); print(readHeap(v3)); countDown( cnt )); await(cnt); print(100); countDown( cnt ); print(100)

Symbol table:
cnt -> 0
v1 -> (1, int)

Heap table:

Output:

File table:

------------------------
ID: 1
Execution stack:
Ref(int) v3; new(v1, 2); new(v2, 3); new(v3, 4); newLatch(cnt, readHeap(v2)); fork(writeHeap(v1, readHeap(v1) * 10); print(readHeap(v1)); countDown( cnt )); fork(writeHeap(v2, readHeap(v2) * 10); print(readHeap(v2)); countDown( cnt )); fork(writeHeap(v3, readHeap(v3) * 10); print(readHeap(v3)); countDown( cnt )); await(cnt); print(100); countDown( cnt ); print(100)

Symbol table:
cnt -> 0
v1 -> (1, int)
v2 -> (1, int)

Heap table:

Output:

File table:

------------------------
ID: 1
Execution stack:
Ref(int) v3; new(v1, 2); new(v2, 3); new(v3, 4); newLatch(cnt, readHeap(v2)); fork(writeHeap(v1, readHeap(v1) * 10); print(readHeap(v1)); countDown( cnt )); fork(writeHeap(v2, readHeap(v2) * 10); print(readHeap(v2)); countDown( cnt )); fork(writeHeap(v3, readHeap(v3) * 10); print(readHeap(v3)); countDown( cnt )); await(cnt); print(100); countDown( cnt ); print(100)

Symbol table:
cnt -> 0
v1 -> (1, int)
v2 -> (1, int)

Heap table:

Output:

File table:

------------------------
ID: 1
Execution stack:
Ref(int) v3
new(v1, 2); new(v2, 3); new(v3, 4); newLatch(cnt, readHeap(v2)); fork(writeHeap(v1, readHeap(v1) * 10); print(readHeap(v1)); countDown( cnt )); fork(writeHeap(v2, readHeap(v2) * 10); print(readHeap(v2)); countDown( cnt )); fork(writeHeap(v3, readHeap(v3) * 10); print(readHeap(v3)); countDown( cnt )); await(cnt); print(100); countDown( cnt ); print(100)

Symbol table:
cnt -> 0
v1 -> (1, int)
v2 -> (1, int)

Heap table:

Output:

File table:

------------------------
ID: 1
Execution stack:
Ref(int) v3
new(v1, 2); new(v2, 3); new(v3, 4); newLatch(cnt, readHeap(v2)); fork(writeHeap(v1, readHeap(v1) * 10); print(readHeap(v1)); countDown( cnt )); fork(writeHeap(v2, readHeap(v2) * 10); print(readHeap(v2)); countDown( cnt )); fork(writeHeap(v3, readHeap(v3) * 10); print(readHeap(v3)); countDown( cnt )); await(cnt); print(100); countDown( cnt ); print(100)

Symbol table:
cnt -> 0
v1 -> (1, int)
v2 -> (1, int)

Heap table:

Output:

File table:

------------------------
ID: 1
Execution stack:
new(v1, 2); new(v2, 3); new(v3, 4); newLatch(cnt, readHeap(v2)); fork(writeHeap(v1, readHeap(v1) * 10); print(readHeap(v1)); countDown( cnt )); fork(writeHeap(v2, readHeap(v2) * 10); print(readHeap(v2)); countDown( cnt )); fork(writeHeap(v3, readHeap(v3) * 10); print(readHeap(v3)); countDown( cnt )); await(cnt); print(100); countDown( cnt ); print(100)

Symbol table:
cnt -> 0
v1 -> (1, int)
v2 -> (1, int)
v3 -> (1, int)

Heap table:

Output:

File table:

------------------------
ID: 1
Execution stack:
new(v1, 2); new(v2, 3); new(v3, 4); newLatch(cnt, readHeap(v2)); fork(writeHeap(v1, readHeap(v1) * 10); print(readHeap(v1)); countDown( cnt )); fork(writeHeap(v2, readHeap(v2) * 10); print(readHeap(v2)); countDown( cnt )); fork(writeHeap(v3, readHeap(v3) * 10); print(readHeap(v3)); countDown( cnt )); await(cnt); print(100); countDown( cnt ); print(100)

Symbol table:
cnt -> 0
v1 -> (1, int)
v2 -> (1, int)
v3 -> (1, int)

Heap table:

Output:

File table:

------------------------
ID: 1
Execution stack:
new(v1, 2)
new(v2, 3); new(v3, 4); newLatch(cnt, readHeap(v2)); fork(writeHeap(v1, readHeap(v1) * 10); print(readHeap(v1)); countDown( cnt )); fork(writeHeap(v2, readHeap(v2) * 10); print(readHeap(v2)); countDown( cnt )); fork(writeHeap(v3, readHeap(v3) * 10); print(readHeap(v3)); countDown( cnt )); await(cnt); print(100); countDown( cnt ); print(100)

Symbol table:
cnt -> 0
v1 -> (1, int)
v2 -> (1, int)
v3 -> (1, int)

Heap table:

Output:

File table:

------------------------
ID: 1
Execution stack:
new(v1, 2)
new(v2, 3); new(v3, 4); newLatch(cnt, readHeap(v2)); fork(writeHeap(v1, readHeap(v1) * 10); print(readHeap(v1)); countDown( cnt )); fork(writeHeap(v2, readHeap(v2) * 10); print(readHeap(v2)); countDown( cnt )); fork(writeHeap(v3, readHeap(v3) * 10); print(readHeap(v3)); countDown( cnt )); await(cnt); print(100); countDown( cnt ); print(100)

Symbol table:
cnt -> 0
v1 -> (1, int)
v2 -> (1, int)
v3 -> (1, int)

Heap table:

Output:

File table:

------------------------
ID: 1
Execution stack:
new(v2, 3); new(v3, 4); newLatch(cnt, readHeap(v2)); fork(writeHeap(v1, readHeap(v1) * 10); print(readHeap(v1)); countDown( cnt )); fork(writeHeap(v2, readHeap(v2) * 10); print(readHeap(v2)); countDown( cnt )); fork(writeHeap(v3, readHeap(v3) * 10); print(readHeap(v3)); countDown( cnt )); await(cnt); print(100); countDown( cnt ); print(100)

Symbol table:
cnt -> 0
v1 -> (1, int)
v2 -> (1, int)
v3 -> (1, int)

Heap table:
1 -> 2

Output:

File table:

------------------------
ID: 1
Execution stack:
new(v2, 3); new(v3, 4); newLatch(cnt, readHeap(v2)); fork(writeHeap(v1, readHeap(v1) * 10); print(readHeap(v1)); countDown( cnt )); fork(writeHeap(v2, readHeap(v2) * 10); print(readHeap(v2)); countDown( cnt )); fork(writeHeap(v3, readHeap(v3) * 10); print(readHeap(v3)); countDown( cnt )); await(cnt); print(100); countDown( cnt ); print(100)

Symbol table:
cnt -> 0
v1 -> (1, int)
v2 -> (1, int)
v3 -> (1, int)

Heap table:
1 -> 2

Output:

File table:

------------------------
ID: 1
Execution stack:
new(v2, 3)
new(v3, 4); newLatch(cnt, readHeap(v2)); fork(writeHeap(v1, readHeap(v1) * 10); print(readHeap(v1)); countDown( cnt )); fork(writeHeap(v2, readHeap(v2) * 10); print(readHeap(v2)); countDown( cnt )); fork(writeHeap(v3, readHeap(v3) * 10); print(readHeap(v3)); countDown( cnt )); await(cnt); print(100); countDown( cnt ); print(100)

Symbol table:
cnt -> 0
v1 -> (1, int)
v2 -> (1, int)
v3 -> (1, int)

Heap table:
1 -> 2

Output:

File table:

------------------------
ID: 1
Execution stack:
new(v2, 3)
new(v3, 4); newLatch(cnt, readHeap(v2)); fork(writeHeap(v1, readHeap(v1) * 10); print(readHeap(v1)); countDown( cnt )); fork(writeHeap(v2, readHeap(v2) * 10); print(readHeap(v2)); countDown( cnt )); fork(writeHeap(v3, readHeap(v3) * 10); print(readHeap(v3)); countDown( cnt )); await(cnt); print(100); countDown( cnt ); print(100)

Symbol table:
cnt -> 0
v1 -> (1, int)
v2 -> (1, int)
v3 -> (1, int)

Heap table:
1 -> 2

Output:

File table:

------------------------
ID: 1
Execution stack:
new(v3, 4); newLatch(cnt, readHeap(v2)); fork(writeHeap(v1, readHeap(v1) * 10); print(readHeap(v1)); countDown( cnt )); fork(writeHeap(v2, readHeap(v2) * 10); print(readHeap(v2)); countDown( cnt )); fork(writeHeap(v3, readHeap(v3) * 10); print(readHeap(v3)); countDown( cnt )); await(cnt); print(100); countDown( cnt ); print(100)

Symbol table:
cnt -> 0
v1 -> (1, int)
v2 -> (2, int)
v3 -> (1, int)

Heap table:
1 -> 2
2 -> 3

Output:

File table:

------------------------
ID: 1
Execution stack:
new(v3, 4); newLatch(cnt, readHeap(v2)); fork(writeHeap(v1, readHeap(v1) * 10); print(readHeap(v1)); countDown( cnt )); fork(writeHeap(v2, readHeap(v2) * 10); print(readHeap(v2)); countDown( cnt )); fork(writeHeap(v3, readHeap(v3) * 10); print(readHeap(v3)); countDown( cnt )); await(cnt); print(100); countDown( cnt ); print(100)

Symbol table:
cnt -> 0
v1 -> (1, int)
v2 -> (2, int)
v3 -> (1, int)

Heap table:
1 -> 2
2 -> 3

Output:

File table:

------------------------
ID: 1
Execution stack:
new(v3, 4)
newLatch(cnt, readHeap(v2)); fork(writeHeap(v1, readHeap(v1) * 10); print(readHeap(v1)); countDown( cnt )); fork(writeHeap(v2, readHeap(v2) * 10); print(readHeap(v2)); countDown( cnt )); fork(writeHeap(v3, readHeap(v3) * 10); print(readHeap(v3)); countDown( cnt )); await(cnt); print(100); countDown( cnt ); print(100)

Symbol table:
cnt -> 0
v1 -> (1, int)
v2 -> (2, int)
v3 -> (1, int)

Heap table:
1 -> 2
2 -> 3

Output:

File table:

------------------------
ID: 1
Execution stack:
new(v3, 4)
newLatch(cnt, readHeap(v2)); fork(writeHeap(v1, readHeap(v1) * 10); print(readHeap(v1)); countDown( cnt )); fork(writeHeap(v2, readHeap(v2) * 10); print(readHeap(v2)); countDown( cnt )); fork(writeHeap(v3, readHeap(v3) * 10); print(readHeap(v3)); countDown( cnt )); await(cnt); print(100); countDown( cnt ); print(100)

Symbol table:
cnt -> 0
v1 -> (1, int)
v2 -> (2, int)
v3 -> (1, int)

Heap table:
1 -> 2
2 -> 3

Output:

File table:

------------------------
ID: 1
Execution stack:
newLatch(cnt, readHeap(v2)); fork(writeHeap(v1, readHeap(v1) * 10); print(readHeap(v1)); countDown( cnt )); fork(writeHeap(v2, readHeap(v2) * 10); print(readHeap(v2)); countDown( cnt )); fork(writeHeap(v3, readHeap(v3) * 10); print(readHeap(v3)); countDown( cnt )); await(cnt); print(100); countDown( cnt ); print(100)

Symbol table:
cnt -> 0
v1 -> (1, int)
v2 -> (2, int)
v3 -> (3, int)

Heap table:
1 -> 2
2 -> 3
3 -> 4

Output:

File table:

------------------------
ID: 1
Execution stack:
newLatch(cnt, readHeap(v2)); fork(writeHeap(v1, readHeap(v1) * 10); print(readHeap(v1)); countDown( cnt )); fork(writeHeap(v2, readHeap(v2) * 10); print(readHeap(v2)); countDown( cnt )); fork(writeHeap(v3, readHeap(v3) * 10); print(readHeap(v3)); countDown( cnt )); await(cnt); print(100); countDown( cnt ); print(100)

Symbol table:
cnt -> 0
v1 -> (1, int)
v2 -> (2, int)
v3 -> (3, int)

Heap table:
1 -> 2
2 -> 3
3 -> 4

Output:

File table:

------------------------
ID: 1
Execution stack:
newLatch(cnt, readHeap(v2))
fork(writeHeap(v1, readHeap(v1) * 10); print(readHeap(v1)); countDown( cnt )); fork(writeHeap(v2, readHeap(v2) * 10); print(readHeap(v2)); countDown( cnt )); fork(writeHeap(v3, readHeap(v3) * 10); print(readHeap(v3)); countDown( cnt )); await(cnt); print(100); countDown( cnt ); print(100)

Symbol table:
cnt -> 0
v1 -> (1, int)
v2 -> (2, int)
v3 -> (3, int)

Heap table:
1 -> 2
2 -> 3
3 -> 4

Output:

File table:

------------------------
ID: 1
Execution stack:
newLatch(cnt, readHeap(v2))
fork(writeHeap(v1, readHeap(v1) * 10); print(readHeap(v1)); countDown( cnt )); fork(writeHeap(v2, readHeap(v2) * 10); print(readHeap(v2)); countDown( cnt )); fork(writeHeap(v3, readHeap(v3) * 10); print(readHeap(v3)); countDown( cnt )); await(cnt); print(100); countDown( cnt ); print(100)

Symbol table:
cnt -> 0
v1 -> (1, int)
v2 -> (2, int)
v3 -> (3, int)

Heap table:
1 -> 2
2 -> 3
3 -> 4

Output:

File table:

------------------------
ID: 1
Execution stack:
fork(writeHeap(v1, readHeap(v1) * 10); print(readHeap(v1)); countDown( cnt )); fork(writeHeap(v2, readHeap(v2) * 10); print(readHeap(v2)); countDown( cnt )); fork(writeHeap(v3, readHeap(v3) * 10); print(readHeap(v3)); countDown( cnt )); await(cnt); print(100); countDown( cnt ); print(100)

Symbol table:
cnt -> 0
v1 -> (1, int)
v2 -> (2, int)
v3 -> (3, int)

Heap table:
1 -> 2
2 -> 3
3 -> 4

Output:

File table:

------------------------
ID: 1
Execution stack:
fork(writeHeap(v1, readHeap(v1) * 10); print(readHeap(v1)); countDown( cnt )); fork(writeHeap(v2, readHeap(v2) * 10); print(readHeap(v2)); countDown( cnt )); fork(writeHeap(v3, readHeap(v3) * 10); print(readHeap(v3)); countDown( cnt )); await(cnt); print(100); countDown( cnt ); print(100)

Symbol table:
cnt -> 0
v1 -> (1, int)
v2 -> (2, int)
v3 -> (3, int)

Heap table:
1 -> 2
2 -> 3
3 -> 4

Output:

File table:

------------------------
ID: 1
Execution stack:
fork(writeHeap(v1, readHeap(v1) * 10); print(readHeap(v1)); countDown( cnt ))
fork(writeHeap(v2, readHeap(v2) * 10); print(readHeap(v2)); countDown( cnt )); fork(writeHeap(v3, readHeap(v3) * 10); print(readHeap(v3)); countDown( cnt )); await(cnt); print(100); countDown( cnt ); print(100)

Symbol table:
cnt -> 0
v1 -> (1, int)
v2 -> (2, int)
v3 -> (3, int)

Heap table:
1 -> 2
2 -> 3
3 -> 4

Output:

File table:

------------------------
ID: 1
Execution stack:
fork(writeHeap(v1, readHeap(v1) * 10); print(readHeap(v1)); countDown( cnt ))
fork(writeHeap(v2, readHeap(v2) * 10); print(readHeap(v2)); countDown( cnt )); fork(writeHeap(v3, readHeap(v3) * 10); print(readHeap(v3)); countDown( cnt )); await(cnt); print(100); countDown( cnt ); print(100)

Symbol table:
cnt -> 0
v1 -> (1, int)
v2 -> (2, int)
v3 -> (3, int)

Heap table:
1 -> 2
2 -> 3
3 -> 4

Output:

File table:

------------------------
ID: 1
Execution stack:
fork(writeHeap(v2, readHeap(v2) * 10); print(readHeap(v2)); countDown( cnt )); fork(writeHeap(v3, readHeap(v3) * 10); print(readHeap(v3)); countDown( cnt )); await(cnt); print(100); countDown( cnt ); print(100)

Symbol table:
cnt -> 0
v1 -> (1, int)
v2 -> (2, int)
v3 -> (3, int)

Heap table:
1 -> 2
2 -> 3
3 -> 4

Output:

File table:

------------------------
ID: 2
Execution stack:
writeHeap(v1, readHeap(v1) * 10); print(readHeap(v1)); countDown( cnt )

Symbol table:
cnt -> 0
v1 -> (1, int)
v2 -> (2, int)
v3 -> (3, int)

Heap table:
1 -> 2
2 -> 3
3 -> 4

Output:

File table:

------------------------
ID: 1
Execution stack:
fork(writeHeap(v2, readHeap(v2) * 10); print(readHeap(v2)); countDown( cnt )); fork(writeHeap(v3, readHeap(v3) * 10); print(readHeap(v3)); countDown( cnt )); await(cnt); print(100); countDown( cnt ); print(100)

Symbol table:
cnt -> 0
v1 -> (1, int)
v2 -> (2, int)
v3 -> (3, int)

Heap table:
1 -> 2
2 -> 3
3 -> 4

Output:

File table:

------------------------
ID: 2
Execution stack:
writeHeap(v1, readHeap(v1) * 10); print(readHeap(v1)); countDown( cnt )

Symbol table:
cnt -> 0
v1 -> (1, int)
v2 -> (2, int)
v3 -> (3, int)

Heap table:
1 -> 2
2 -> 3
3 -> 4

Output:

File table:

------------------------
ID: 1
Execution stack:
fork(writeHeap(v2, readHeap(v2) * 10); print(readHeap(v2)); countDown( cnt ))
fork(writeHeap(v3, readHeap(v3) * 10); print(readHeap(v3)); countDown( cnt )); await(cnt); print(100); countDown( cnt ); print(100)

Symbol table:
cnt -> 0
v1 -> (1, int)
v2 -> (2, int)
v3 -> (3, int)

Heap table:
1 -> 2
2 -> 3
3 -> 4

Output:

File table:

------------------------
ID: 2
Execution stack:
writeHeap(v1, readHeap(v1) * 10)
print(readHeap(v1)); countDown( cnt )

Symbol table:
cnt -> 0
v1 -> (1, int)
v2 -> (2, int)
v3 -> (3, int)

Heap table:
1 -> 2
2 -> 3
3 -> 4

Output:

File table:

------------------------
ID: 1
Execution stack:
fork(writeHeap(v2, readHeap(v2) * 10); print(readHeap(v2)); countDown( cnt ))
fork(writeHeap(v3, readHeap(v3) * 10); print(readHeap(v3)); countDown( cnt )); await(cnt); print(100); countDown( cnt ); print(100)

Symbol table:
cnt -> 0
v1 -> (1, int)
v2 -> (2, int)
v3 -> (3, int)

Heap table:
1 -> 2
2 -> 3
3 -> 4

Output:

File table:

------------------------
ID: 2
Execution stack:
writeHeap(v1, readHeap(v1) * 10)
print(readHeap(v1)); countDown( cnt )

Symbol table:
cnt -> 0
v1 -> (1, int)
v2 -> (2, int)
v3 -> (3, int)

Heap table:
1 -> 2
2 -> 3
3 -> 4

Output:

File table:

------------------------
ID: 1
Execution stack:
fork(writeHeap(v3, readHeap(v3) * 10); print(readHeap(v3)); countDown( cnt )); await(cnt); print(100); countDown( cnt ); print(100)

Symbol table:
cnt -> 0
v1 -> (1, int)
v2 -> (2, int)
v3 -> (3, int)

Heap table:
1 -> 20
2 -> 3
3 -> 4

Output:

File table:

------------------------
ID: 2
Execution stack:
print(readHeap(v1)); countDown( cnt )

Symbol table:
cnt -> 0
v1 -> (1, int)
v2 -> (2, int)
v3 -> (3, int)

Heap table:
1 -> 20
2 -> 3
3 -> 4

Output:

File table:

------------------------
ID: 3
Execution stack:
writeHeap(v2, readHeap(v2) * 10); print(readHeap(v2)); countDown( cnt )

Symbol table:
cnt -> 0
v1 -> (1, int)
v2 -> (2, int)
v3 -> (3, int)

Heap table:
1 -> 20
2 -> 3
3 -> 4

Output:

File table:

------------------------
ID: 1
Execution stack:
fork(writeHeap(v3, readHeap(v3) * 10); print(readHeap(v3)); countDown( cnt )); await(cnt); print(100); countDown( cnt ); print(100)

Symbol table:
cnt -> 0
v1 -> (1, int)
v2 -> (2, int)
v3 -> (3, int)

Heap table:
1 -> 20
2 -> 3
3 -> 4

Output:

File table:

------------------------
ID: 2
Execution stack:
print(readHeap(v1)); countDown( cnt )

Symbol table:
cnt -> 0
v1 -> (1, int)
v2 -> (2, int)
v3 -> (3, int)

Heap table:
1 -> 20
2 -> 3
3 -> 4

Output:

File table:

------------------------
ID: 3
Execution stack:
writeHeap(v2, readHeap(v2) * 10); print(readHeap(v2)); countDown( cnt )

Symbol table:
cnt -> 0
v1 -> (1, int)
v2 -> (2, int)
v3 -> (3, int)

Heap table:
1 -> 20
2 -> 3
3 -> 4

Output:

File table:

------------------------
ID: 1
Execution stack:
fork(writeHeap(v3, readHeap(v3) * 10); print(readHeap(v3)); countDown( cnt ))
await(cnt); print(100); countDown( cnt ); print(100)

Symbol table:
cnt -> 0
v1 -> (1, int)
v2 -> (2, int)
v3 -> (3, int)

Heap table:
1 -> 20
2 -> 3
3 -> 4

Output:

File table:

------------------------
ID: 2
Execution stack:
print(readHeap(v1))
countDown( cnt )

Symbol table:
cnt -> 0
v1 -> (1, int)
v2 -> (2, int)
v3 -> (3, int)

Heap table:
1 -> 20
2 -> 3
3 -> 4

Output:

File table:

------------------------
ID: 3
Execution stack:
writeHeap(v2, readHeap(v2) * 10)
print(readHeap(v2)); countDown( cnt )

Symbol table:
cnt -> 0
v1 -> (1, int)
v2 -> (2, int)
v3 -> (3, int)

Heap table:
1 -> 20
2 -> 3
3 -> 4

Output:

File table:

------------------------
ID: 1
Execution stack:
fork(writeHeap(v3, readHeap(v3) * 10); print(readHeap(v3)); countDown( cnt ))
await(cnt); print(100); countDown( cnt ); print(100)

Symbol table:
cnt -> 0
v1 -> (1, int)
v2 -> (2, int)
v3 -> (3, int)

Heap table:
1 -> 20
2 -> 3
3 -> 4

Output:

File table:

------------------------
ID: 2
Execution stack:
print(readHeap(v1))
countDown( cnt )

Symbol table:
cnt -> 0
v1 -> (1, int)
v2 -> (2, int)
v3 -> (3, int)

Heap table:
1 -> 20
2 -> 3
3 -> 4

Output:

File table:

------------------------
ID: 3
Execution stack:
writeHeap(v2, readHeap(v2) * 10)
print(readHeap(v2)); countDown( cnt )

Symbol table:
cnt -> 0
v1 -> (1, int)
v2 -> (2, int)
v3 -> (3, int)

Heap table:
1 -> 20
2 -> 3
3 -> 4

Output:

File table:

------------------------
ID: 1
Execution stack:
await(cnt); print(100); countDown( cnt ); print(100)

Symbol table:
cnt -> 0
v1 -> (1, int)
v2 -> (2, int)
v3 -> (3, int)

Heap table:
1 -> 20
2 -> 30
3 -> 4

Output:
20

File table:

------------------------
ID: 2
Execution stack:
countDown( cnt )

Symbol table:
cnt -> 0
v1 -> (1, int)
v2 -> (2, int)
v3 -> (3, int)

Heap table:
1 -> 20
2 -> 30
3 -> 4

Output:
20

File table:

------------------------
ID: 3
Execution stack:
print(readHeap(v2)); countDown( cnt )

Symbol table:
cnt -> 0
v1 -> (1, int)
v2 -> (2, int)
v3 -> (3, int)

Heap table:
1 -> 20
2 -> 30
3 -> 4

Output:
20

File table:

------------------------
ID: 4
Execution stack:
writeHeap(v3, readHeap(v3) * 10); print(readHeap(v3)); countDown( cnt )

Symbol table:
cnt -> 0
v1 -> (1, int)
v2 -> (2, int)
v3 -> (3, int)

Heap table:
1 -> 20
2 -> 30
3 -> 4

Output:
20

File table:

------------------------
ID: 1
Execution stack:
await(cnt); print(100); countDown( cnt ); print(100)

Symbol table:
cnt -> 0
v1 -> (1, int)
v2 -> (2, int)
v3 -> (3, int)

Heap table:
1 -> 20
2 -> 30
3 -> 4

Output:
20

File table:

------------------------
ID: 2
Execution stack:
countDown( cnt )

Symbol table:
cnt -> 0
v1 -> (1, int)
v2 -> (2, int)
v3 -> (3, int)

Heap table:
1 -> 20
2 -> 30
3 -> 4

Output:
20

File table:

------------------------
ID: 3
Execution stack:
print(readHeap(v2)); countDown( cnt )

Symbol table:
cnt -> 0
v1 -> (1, int)
v2 -> (2, int)
v3 -> (3, int)

Heap table:
1 -> 20
2 -> 30
3 -> 4

Output:
20

File table:

------------------------
ID: 4
Execution stack:
writeHeap(v3, readHeap(v3) * 10); print(readHeap(v3)); countDown( cnt )

Symbol table:
cnt -> 0
v1 -> (1, int)
v2 -> (2, int)
v3 -> (3, int)

Heap table:
1 -> 20
2 -> 30
3 -> 4

Output:
20

File table:

------------------------
ID: 1
Execution stack:
await(cnt)
print(100); countDown( cnt ); print(100)

Symbol table:
cnt -> 0
v1 -> (1, int)
v2 -> (2, int)
v3 -> (3, int)

Heap table:
1 -> 20
2 -> 30
3 -> 4

Output:
20
2

File table:

------------------------
ID: 2
Execution stack:

Symbol table:
cnt -> 0
v1 -> (1, int)
v2 -> (2, int)
v3 -> (3, int)

Heap table:
1 -> 20
2 -> 30
3 -> 4

Output:
20
2

File table:

------------------------
ID: 3
Execution stack:
print(readHeap(v2))
countDown( cnt )

Symbol table:
cnt -> 0
v1 -> (1, int)
v2 -> (2, int)
v3 -> (3, int)

Heap table:
1 -> 20
2 -> 30
3 -> 4

Output:
20
2

File table:

------------------------
ID: 4
Execution stack:
writeHeap(v3, readHeap(v3) * 10)
print(readHeap(v3)); countDown( cnt )

Symbol table:
cnt -> 0
v1 -> (1, int)
v2 -> (2, int)
v3 -> (3, int)

Heap table:
1 -> 20
2 -> 30
3 -> 4

Output:
20
2

File table:

------------------------
ID: 1
Execution stack:
await(cnt)
print(100); countDown( cnt ); print(100)

Symbol table:
cnt -> 0
v1 -> (1, int)
v2 -> (2, int)
v3 -> (3, int)

Heap table:
1 -> 20
2 -> 30
3 -> 4

Output:
20
2

File table:

------------------------
ID: 3
Execution stack:
print(readHeap(v2))
countDown( cnt )

Symbol table:
cnt -> 0
v1 -> (1, int)
v2 -> (2, int)
v3 -> (3, int)

Heap table:
1 -> 20
2 -> 30
3 -> 4

Output:
20
2

File table:

------------------------
ID: 4
Execution stack:
writeHeap(v3, readHeap(v3) * 10)
print(readHeap(v3)); countDown( cnt )

Symbol table:
cnt -> 0
v1 -> (1, int)
v2 -> (2, int)
v3 -> (3, int)

Heap table:
1 -> 20
2 -> 30
3 -> 4

Output:
20
2

File table:

------------------------
ID: 1
Execution stack:
await(cnt)
print(100); countDown( cnt ); print(100)

Symbol table:
cnt -> 0
v1 -> (1, int)
v2 -> (2, int)
v3 -> (3, int)

Heap table:
1 -> 20
2 -> 30
3 -> 40

Output:
20
2
30

File table:

------------------------
ID: 3
Execution stack:
countDown( cnt )

Symbol table:
cnt -> 0
v1 -> (1, int)
v2 -> (2, int)
v3 -> (3, int)

Heap table:
1 -> 20
2 -> 30
3 -> 40

Output:
20
2
30

File table:

------------------------
ID: 4
Execution stack:
print(readHeap(v3)); countDown( cnt )

Symbol table:
cnt -> 0
v1 -> (1, int)
v2 -> (2, int)
v3 -> (3, int)

Heap table:
1 -> 20
2 -> 30
3 -> 40

Output:
20
2
30

File table:

------------------------
ID: 1
Execution stack:
await(cnt)
print(100); countDown( cnt ); print(100)

Symbol table:
cnt -> 0
v1 -> (1, int)
v2 -> (2, int)
v3 -> (3, int)

Heap table:
1 -> 20
2 -> 30
3 -> 40

Output:
20
2
30

File table:

------------------------
ID: 3
Execution stack:
countDown( cnt )

Symbol table:
cnt -> 0
v1 -> (1, int)
v2 -> (2, int)
v3 -> (3, int)

Heap table:
1 -> 20
2 -> 30
3 -> 40

Output:
20
2
30

File table:

------------------------
ID: 4
Execution stack:
print(readHeap(v3)); countDown( cnt )

Symbol table:
cnt -> 0
v1 -> (1, int)
v2 -> (2, int)
v3 -> (3, int)

Heap table:
1 -> 20
2 -> 30
3 -> 40

Output:
20
2
30

File table:

------------------------
ID: 1
Execution stack:
await(cnt)
print(100); countDown( cnt ); print(100)

Symbol table:
cnt -> 0
v1 -> (1, int)
v2 -> (2, int)
v3 -> (3, int)

Heap table:
1 -> 20
2 -> 30
3 -> 40

Output:
20
2
30
3

File table:

------------------------
ID: 3
Execution stack:

Symbol table:
cnt -> 0
v1 -> (1, int)
v2 -> (2, int)
v3 -> (3, int)

Heap table:
1 -> 20
2 -> 30
3 -> 40

Output:
20
2
30
3

File table:

------------------------
ID: 4
Execution stack:
print(readHeap(v3))
countDown( cnt )

Symbol table:
cnt -> 0
v1 -> (1, int)
v2 -> (2, int)
v3 -> (3, int)

Heap table:
1 -> 20
2 -> 30
3 -> 40

Output:
20
2
30
3

File table:

------------------------
ID: 1
Execution stack:
await(cnt)
print(100); countDown( cnt ); print(100)

Symbol table:
cnt -> 0
v1 -> (1, int)
v2 -> (2, int)
v3 -> (3, int)

Heap table:
1 -> 20
2 -> 30
3 -> 40

Output:
20
2
30
3

File table:

------------------------
ID: 4
Execution stack:
print(readHeap(v3))
countDown( cnt )

Symbol table:
cnt -> 0
v1 -> (1, int)
v2 -> (2, int)
v3 -> (3, int)

Heap table:
1 -> 20
2 -> 30
3 -> 40

Output:
20
2
30
3

File table:

------------------------
ID: 1
Execution stack:
await(cnt)
print(100); countDown( cnt ); print(100)

Symbol table:
cnt -> 0
v1 -> (1, int)
v2 -> (2, int)
v3 -> (3, int)

Heap table:
1 -> 20
2 -> 30
3 -> 40

Output:
20
2
30
3
40

File table:

------------------------
ID: 4
Execution stack:
countDown( cnt )

Symbol table:
cnt -> 0
v1 -> (1, int)
v2 -> (2, int)
v3 -> (3, int)

Heap table:
1 -> 20
2 -> 30
3 -> 40

Output:
20
2
30
3
40

File table:

------------------------
ID: 1
Execution stack:
await(cnt)
print(100); countDown( cnt ); print(100)

Symbol table:
cnt -> 0
v1 -> (1, int)
v2 -> (2, int)
v3 -> (3, int)

Heap table:
1 -> 20
2 -> 30
3 -> 40

Output:
20
2
30
3
40

File table:

------------------------
ID: 4
Execution stack:
countDown( cnt )

Symbol table:
cnt -> 0
v1 -> (1, int)
v2 -> (2, int)
v3 -> (3, int)

Heap table:
1 -> 20
2 -> 30
3 -> 40

Output:
20
2
30
3
40

File table:

------------------------
ID: 1
Execution stack:
await(cnt)
print(100); countDown( cnt ); print(100)

Symbol table:
cnt -> 0
v1 -> (1, int)
v2 -> (2, int)
v3 -> (3, int)

Heap table:
1 -> 20
2 -> 30
3 -> 40

Output:
20
2
30
3
40
4

File table:

------------------------
ID: 4
Execution stack:

Symbol table:
cnt -> 0
v1 -> (1, int)
v2 -> (2, int)
v3 -> (3, int)

Heap table:
1 -> 20
2 -> 30
3 -> 40

Output:
20
2
30
3
40
4

File table:

------------------------
ID: 1
Execution stack:
await(cnt)
print(100); countDown( cnt ); print(100)

Symbol table:
cnt -> 0
v1 -> (1, int)
v2 -> (2, int)
v3 -> (3, int)

Heap table:
1 -> 20
2 -> 30
3 -> 40

Output:
20
2
30
3
40
4

File table:

------------------------
ID: 1
Execution stack:
print(100); countDown( cnt ); print(100)

Symbol table:
cnt -> 0
v1 -> (1, int)
v2 -> (2, int)
v3 -> (3, int)

Heap table:
1 -> 20
2 -> 30
3 -> 40

Output:
20
2
30
3
40
4

File table:

------------------------
ID: 1
Execution stack:
print(100); countDown( cnt ); print(100)

Symbol table:
cnt -> 0
v1 -> (1, int)
v2 -> (2, int)
v3 -> (3, int)

Heap table:
1 -> 20
2 -> 30
3 -> 40

Output:
20
2
30
3
40
4

File table:

------------------------
ID: 1
Execution stack:
print(100)
countDown( cnt ); print(100)

Symbol table:
cnt -> 0
v1 -> (1, int)
v2 -> (2, int)
v3 -> (3, int)

Heap table:
1 -> 20
2 -> 30
3 -> 40

Output:
20
2
30
3
40
4

File table:

------------------------
ID: 1
Execution stack:
print(100)
countDown( cnt ); print(100)

Symbol table:
cnt -> 0
v1 -> (1, int)
v2 -> (2, int)
v3 -> (3, int)

Heap table:
1 -> 20
2 -> 30
3 -> 40

Output:
20
2
30
3
40
4

File table:

------------------------
ID: 1
Execution stack:
countDown( cnt ); print(100)

Symbol table:
cnt -> 0
v1 -> (1, int)
v2 -> (2, int)
v3 -> (3, int)

Heap table:
1 -> 20
2 -> 30
3 -> 40

Output:
20
2
30
3
40
4
100

File table:

------------------------
ID: 1
Execution stack:
countDown( cnt ); print(100)

Symbol table:
cnt -> 0
v1 -> (1, int)
v2 -> (2, int)
v3 -> (3, int)

Heap table:
1 -> 20
2 -> 30
3 -> 40

Output:
20
2
30
3
40
4
100

File table:

------------------------
ID: 1
Execution stack:
countDown( cnt )
print(100)

Symbol table:
cnt -> 0
v1 -> (1, int)
v2 -> (2, int)
v3 -> (3, int)

Heap table:
1 -> 20
2 -> 30
3 -> 40

Output:
20
2
30
3
40
4
100

File table:

------------------------
ID: 1
Execution stack:
countDown( cnt )
print(100)

Symbol table:
cnt -> 0
v1 -> (1, int)
v2 -> (2, int)
v3 -> (3, int)

Heap table:
1 -> 20
2 -> 30
3 -> 40

Output:
20
2
30
3
40
4
100

File table:

------------------------
ID: 1
Execution stack:
print(100)

Symbol table:
cnt -> 0
v1 -> (1, int)
v2 -> (2, int)
v3 -> (3, int)

Heap table:
1 -> 20
2 -> 30
3 -> 40

Output:
20
2
30
3
40
4
100
1

File table:

------------------------
ID: 1
Execution stack:
print(100)

Symbol table:
cnt -> 0
v1 -> (1, int)
v2 -> (2, int)
v3 -> (3, int)

Heap table:
1 -> 20
2 -> 30
3 -> 40

Output:
20
2
30
3
40
4
100
1

File table:

------------------------
ID: 1
Execution stack:

Symbol table:
cnt -> 0
v1 -> (1, int)
v2 -> (2, int)
v3 -> (3, int)

Heap table:
1 -> 20
2 -> 30
3 -> 40

Output:
20
2
30
3
40
4
100
1
100

File table:

------------------------
ID: 1
Execution stack:
int cnt; Ref(int) v1; Ref(int) v2; Ref(int) v3; new(v1, 2); new(v2, 3); new(v3, 4); newLatch(cnt, readHeap(v2)); fork(writeHeap(v1, readHeap(v1) * 10); print(readHeap(v1)); countDown( cnt )); fork(writeHeap(v2, readHeap(v2) * 10); print(readHeap(v2)); countDown( cnt )); fork(writeHeap(v3, readHeap(v3) * 10); print(readHeap(v3)); countDown( cnt )); await(cnt); print(100); countDown( cnt ); print(100)

Symbol table:

Heap table:

Output:

File table:

------------------------
ID: 1
Execution stack:
int cnt
Ref(int) v1; Ref(int) v2; Ref(int) v3; new(v1, 2); new(v2, 3); new(v3, 4); newLatch(cnt, readHeap(v2)); fork(writeHeap(v1, readHeap(v1) * 10); print(readHeap(v1)); countDown( cnt )); fork(writeHeap(v2, readHeap(v2) * 10); print(readHeap(v2)); countDown( cnt )); fork(writeHeap(v3, readHeap(v3) * 10); print(readHeap(v3)); countDown( cnt )); await(cnt); print(100); countDown( cnt ); print(100)

Symbol table:

Heap table:

Output:

File table:

------------------------
ID: 1
Execution stack:
int cnt
Ref(int) v1; Ref(int) v2; Ref(int) v3; new(v1, 2); new(v2, 3); new(v3, 4); newLatch(cnt, readHeap(v2)); fork(writeHeap(v1, readHeap(v1) * 10); print(readHeap(v1)); countDown( cnt )); fork(writeHeap(v2, readHeap(v2) * 10); print(readHeap(v2)); countDown( cnt )); fork(writeHeap(v3, readHeap(v3) * 10); print(readHeap(v3)); countDown( cnt )); await(cnt); print(100); countDown( cnt ); print(100)

Symbol table:

Heap table:

Output:

File table:

------------------------
ID: 1
Execution stack:
Ref(int) v1; Ref(int) v2; Ref(int) v3; new(v1, 2); new(v2, 3); new(v3, 4); newLatch(cnt, readHeap(v2)); fork(writeHeap(v1, readHeap(v1) * 10); print(readHeap(v1)); countDown( cnt )); fork(writeHeap(v2, readHeap(v2) * 10); print(readHeap(v2)); countDown( cnt )); fork(writeHeap(v3, readHeap(v3) * 10); print(readHeap(v3)); countDown( cnt )); await(cnt); print(100); countDown( cnt ); print(100)

Symbol table:
cnt -> 0

Heap table:

Output:

File table:

------------------------
ID: 1
Execution stack:
Ref(int) v1; Ref(int) v2; Ref(int) v3; new(v1, 2); new(v2, 3); new(v3, 4); newLatch(cnt, readHeap(v2)); fork(writeHeap(v1, readHeap(v1) * 10); print(readHeap(v1)); countDown( cnt )); fork(writeHeap(v2, readHeap(v2) * 10); print(readHeap(v2)); countDown( cnt )); fork(writeHeap(v3, readHeap(v3) * 10); print(readHeap(v3)); countDown( cnt )); await(cnt); print(100); countDown( cnt ); print(100)

Symbol table:
cnt -> 0

Heap table:

Output:

File table:

------------------------
ID: 1
Execution stack:
Ref(int) v1
Ref(int) v2; Ref(int) v3; new(v1, 2); new(v2, 3); new(v3, 4); newLatch(cnt, readHeap(v2)); fork(writeHeap(v1, readHeap(v1) * 10); print(readHeap(v1)); countDown( cnt )); fork(writeHeap(v2, readHeap(v2) * 10); print(readHeap(v2)); countDown( cnt )); fork(writeHeap(v3, readHeap(v3) * 10); print(readHeap(v3)); countDown( cnt )); await(cnt); print(100); countDown( cnt ); print(100)

Symbol table:
cnt -> 0

Heap table:

Output:

File table:

------------------------
ID: 1
Execution stack:
Ref(int) v1
Ref(int) v2; Ref(int) v3; new(v1, 2); new(v2, 3); new(v3, 4); newLatch(cnt, readHeap(v2)); fork(writeHeap(v1, readHeap(v1) * 10); print(readHeap(v1)); countDown( cnt )); fork(writeHeap(v2, readHeap(v2) * 10); print(readHeap(v2)); countDown( cnt )); fork(writeHeap(v3, readHeap(v3) * 10); print(readHeap(v3)); countDown( cnt )); await(cnt); print(100); countDown( cnt ); print(100)

Symbol table:
cnt -> 0

Heap table:

Output:

File table:

------------------------
ID: 1
Execution stack:
Ref(int) v2; Ref(int) v3; new(v1, 2); new(v2, 3); new(v3, 4); newLatch(cnt, readHeap(v2)); fork(writeHeap(v1, readHeap(v1) * 10); print(readHeap(v1)); countDown( cnt )); fork(writeHeap(v2, readHeap(v2) * 10); print(readHeap(v2)); countDown( cnt )); fork(writeHeap(v3, readHeap(v3) * 10); print(readHeap(v3)); countDown( cnt )); await(cnt); print(100); countDown( cnt ); print(100)

Symbol table:
cnt -> 0
v1 -> (1, int)

Heap table:

Output:

File table:

------------------------
ID: 1
Execution stack:
Ref(int) v2; Ref(int) v3; new(v1, 2); new(v2, 3); new(v3, 4); newLatch(cnt, readHeap(v2)); fork(writeHeap(v1, readHeap(v1) * 10); print(readHeap(v1)); countDown( cnt )); fork(writeHeap(v2, readHeap(v2) * 10); print(readHeap(v2)); countDown( cnt )); fork(writeHeap(v3, readHeap(v3) * 10); print(readHeap(v3)); countDown( cnt )); await(cnt); print(100); countDown( cnt ); print(100)

Symbol table:
cnt -> 0
v1 -> (1, int)

Heap table:

Output:

File table:

------------------------
ID: 1
Execution stack:
Ref(int) v2
Ref(int) v3; new(v1, 2); new(v2, 3); new(v3, 4); newLatch(cnt, readHeap(v2)); fork(writeHeap(v1, readHeap(v1) * 10); print(readHeap(v1)); countDown( cnt )); fork(writeHeap(v2, readHeap(v2) * 10); print(readHeap(v2)); countDown( cnt )); fork(writeHeap(v3, readHeap(v3) * 10); print(readHeap(v3)); countDown( cnt )); await(cnt); print(100); countDown( cnt ); print(100)

Symbol table:
cnt -> 0
v1 -> (1, int)

Heap table:

Output:

File table:

------------------------
ID: 1
Execution stack:
Ref(int) v2
Ref(int) v3; new(v1, 2); new(v2, 3); new(v3, 4); newLatch(cnt, readHeap(v2)); fork(writeHeap(v1, readHeap(v1) * 10); print(readHeap(v1)); countDown( cnt )); fork(writeHeap(v2, readHeap(v2) * 10); print(readHeap(v2)); countDown( cnt )); fork(writeHeap(v3, readHeap(v3) * 10); print(readHeap(v3)); countDown( cnt )); await(cnt); print(100); countDown( cnt ); print(100)

Symbol table:
cnt -> 0
v1 -> (1, int)

Heap table:

Output:

File table:

------------------------
ID: 1
Execution stack:
Ref(int) v3; new(v1, 2); new(v2, 3); new(v3, 4); newLatch(cnt, readHeap(v2)); fork(writeHeap(v1, readHeap(v1) * 10); print(readHeap(v1)); countDown( cnt )); fork(writeHeap(v2, readHeap(v2) * 10); print(readHeap(v2)); countDown( cnt )); fork(writeHeap(v3, readHeap(v3) * 10); print(readHeap(v3)); countDown( cnt )); await(cnt); print(100); countDown( cnt ); print(100)

Symbol table:
cnt -> 0
v1 -> (1, int)
v2 -> (1, int)

Heap table:

Output:

File table:

------------------------
ID: 1
Execution stack:
Ref(int) v3; new(v1, 2); new(v2, 3); new(v3, 4); newLatch(cnt, readHeap(v2)); fork(writeHeap(v1, readHeap(v1) * 10); print(readHeap(v1)); countDown( cnt )); fork(writeHeap(v2, readHeap(v2) * 10); print(readHeap(v2)); countDown( cnt )); fork(writeHeap(v3, readHeap(v3) * 10); print(readHeap(v3)); countDown( cnt )); await(cnt); print(100); countDown( cnt ); print(100)

Symbol table:
cnt -> 0
v1 -> (1, int)
v2 -> (1, int)

Heap table:

Output:

File table:

------------------------
ID: 1
Execution stack:
Ref(int) v3
new(v1, 2); new(v2, 3); new(v3, 4); newLatch(cnt, readHeap(v2)); fork(writeHeap(v1, readHeap(v1) * 10); print(readHeap(v1)); countDown( cnt )); fork(writeHeap(v2, readHeap(v2) * 10); print(readHeap(v2)); countDown( cnt )); fork(writeHeap(v3, readHeap(v3) * 10); print(readHeap(v3)); countDown( cnt )); await(cnt); print(100); countDown( cnt ); print(100)

Symbol table:
cnt -> 0
v1 -> (1, int)
v2 -> (1, int)

Heap table:

Output:

File table:

------------------------
ID: 1
Execution stack:
Ref(int) v3
new(v1, 2); new(v2, 3); new(v3, 4); newLatch(cnt, readHeap(v2)); fork(writeHeap(v1, readHeap(v1) * 10); print(readHeap(v1)); countDown( cnt )); fork(writeHeap(v2, readHeap(v2) * 10); print(readHeap(v2)); countDown( cnt )); fork(writeHeap(v3, readHeap(v3) * 10); print(readHeap(v3)); countDown( cnt )); await(cnt); print(100); countDown( cnt ); print(100)

Symbol table:
cnt -> 0
v1 -> (1, int)
v2 -> (1, int)

Heap table:

Output:

File table:

------------------------
ID: 1
Execution stack:
new(v1, 2); new(v2, 3); new(v3, 4); newLatch(cnt, readHeap(v2)); fork(writeHeap(v1, readHeap(v1) * 10); print(readHeap(v1)); countDown( cnt )); fork(writeHeap(v2, readHeap(v2) * 10); print(readHeap(v2)); countDown( cnt )); fork(writeHeap(v3, readHeap(v3) * 10); print(readHeap(v3)); countDown( cnt )); await(cnt); print(100); countDown( cnt ); print(100)

Symbol table:
cnt -> 0
v1 -> (1, int)
v2 -> (1, int)
v3 -> (1, int)

Heap table:

Output:

File table:

------------------------
ID: 1
Execution stack:
new(v1, 2); new(v2, 3); new(v3, 4); newLatch(cnt, readHeap(v2)); fork(writeHeap(v1, readHeap(v1) * 10); print(readHeap(v1)); countDown( cnt )); fork(writeHeap(v2, readHeap(v2) * 10); print(readHeap(v2)); countDown( cnt )); fork(writeHeap(v3, readHeap(v3) * 10); print(readHeap(v3)); countDown( cnt )); await(cnt); print(100); countDown( cnt ); print(100)

Symbol table:
cnt -> 0
v1 -> (1, int)
v2 -> (1, int)
v3 -> (1, int)

Heap table:

Output:

File table:

------------------------
ID: 1
Execution stack:
new(v1, 2)
new(v2, 3); new(v3, 4); newLatch(cnt, readHeap(v2)); fork(writeHeap(v1, readHeap(v1) * 10); print(readHeap(v1)); countDown( cnt )); fork(writeHeap(v2, readHeap(v2) * 10); print(readHeap(v2)); countDown( cnt )); fork(writeHeap(v3, readHeap(v3) * 10); print(readHeap(v3)); countDown( cnt )); await(cnt); print(100); countDown( cnt ); print(100)

Symbol table:
cnt -> 0
v1 -> (1, int)
v2 -> (1, int)
v3 -> (1, int)

Heap table:

Output:

File table:

------------------------
ID: 1
Execution stack:
new(v1, 2)
new(v2, 3); new(v3, 4); newLatch(cnt, readHeap(v2)); fork(writeHeap(v1, readHeap(v1) * 10); print(readHeap(v1)); countDown( cnt )); fork(writeHeap(v2, readHeap(v2) * 10); print(readHeap(v2)); countDown( cnt )); fork(writeHeap(v3, readHeap(v3) * 10); print(readHeap(v3)); countDown( cnt )); await(cnt); print(100); countDown( cnt ); print(100)

Symbol table:
cnt -> 0
v1 -> (1, int)
v2 -> (1, int)
v3 -> (1, int)

Heap table:

Output:

File table:

------------------------
ID: 1
Execution stack:
new(v2, 3); new(v3, 4); newLatch(cnt, readHeap(v2)); fork(writeHeap(v1, readHeap(v1) * 10); print(readHeap(v1)); countDown( cnt )); fork(writeHeap(v2, readHeap(v2) * 10); print(readHeap(v2)); countDown( cnt )); fork(writeHeap(v3, readHeap(v3) * 10); print(readHeap(v3)); countDown( cnt )); await(cnt); print(100); countDown( cnt ); print(100)

Symbol table:
cnt -> 0
v1 -> (1, int)
v2 -> (1, int)
v3 -> (1, int)

Heap table:
1 -> 2

Output:

File table:

------------------------
ID: 1
Execution stack:
new(v2, 3); new(v3, 4); newLatch(cnt, readHeap(v2)); fork(writeHeap(v1, readHeap(v1) * 10); print(readHeap(v1)); countDown( cnt )); fork(writeHeap(v2, readHeap(v2) * 10); print(readHeap(v2)); countDown( cnt )); fork(writeHeap(v3, readHeap(v3) * 10); print(readHeap(v3)); countDown( cnt )); await(cnt); print(100); countDown( cnt ); print(100)

Symbol table:
cnt -> 0
v1 -> (1, int)
v2 -> (1, int)
v3 -> (1, int)

Heap table:
1 -> 2

Output:

File table:

------------------------
ID: 1
Execution stack:
new(v2, 3)
new(v3, 4); newLatch(cnt, readHeap(v2)); fork(writeHeap(v1, readHeap(v1) * 10); print(readHeap(v1)); countDown( cnt )); fork(writeHeap(v2, readHeap(v2) * 10); print(readHeap(v2)); countDown( cnt )); fork(writeHeap(v3, readHeap(v3) * 10); print(readHeap(v3)); countDown( cnt )); await(cnt); print(100); countDown( cnt ); print(100)

Symbol table:
cnt -> 0
v1 -> (1, int)
v2 -> (1, int)
v3 -> (1, int)

Heap table:
1 -> 2

Output:

File table:

------------------------
ID: 1
Execution stack:
new(v2, 3)
new(v3, 4); newLatch(cnt, readHeap(v2)); fork(writeHeap(v1, readHeap(v1) * 10); print(readHeap(v1)); countDown( cnt )); fork(writeHeap(v2, readHeap(v2) * 10); print(readHeap(v2)); countDown( cnt )); fork(writeHeap(v3, readHeap(v3) * 10); print(readHeap(v3)); countDown( cnt )); await(cnt); print(100); countDown( cnt ); print(100)

Symbol table:
cnt -> 0
v1 -> (1, int)
v2 -> (1, int)
v3 -> (1, int)

Heap table:
1 -> 2

Output:

File table:

------------------------
ID: 1
Execution stack:
new(v3, 4); newLatch(cnt, readHeap(v2)); fork(writeHeap(v1, readHeap(v1) * 10); print(readHeap(v1)); countDown( cnt )); fork(writeHeap(v2, readHeap(v2) * 10); print(readHeap(v2)); countDown( cnt )); fork(writeHeap(v3, readHeap(v3) * 10); print(readHeap(v3)); countDown( cnt )); await(cnt); print(100); countDown( cnt ); print(100)

Symbol table:
cnt -> 0
v1 -> (1, int)
v2 -> (2, int)
v3 -> (1, int)

Heap table:
1 -> 2
2 -> 3

Output:

File table:

------------------------
ID: 1
Execution stack:
new(v3, 4); newLatch(cnt, readHeap(v2)); fork(writeHeap(v1, readHeap(v1) * 10); print(readHeap(v1)); countDown( cnt )); fork(writeHeap(v2, readHeap(v2) * 10); print(readHeap(v2)); countDown( cnt )); fork(writeHeap(v3, readHeap(v3) * 10); print(readHeap(v3)); countDown( cnt )); await(cnt); print(100); countDown( cnt ); print(100)

Symbol table:
cnt -> 0
v1 -> (1, int)
v2 -> (2, int)
v3 -> (1, int)

Heap table:
1 -> 2
2 -> 3

Output:

File table:

------------------------
ID: 1
Execution stack:
new(v3, 4)
newLatch(cnt, readHeap(v2)); fork(writeHeap(v1, readHeap(v1) * 10); print(readHeap(v1)); countDown( cnt )); fork(writeHeap(v2, readHeap(v2) * 10); print(readHeap(v2)); countDown( cnt )); fork(writeHeap(v3, readHeap(v3) * 10); print(readHeap(v3)); countDown( cnt )); await(cnt); print(100); countDown( cnt ); print(100)

Symbol table:
cnt -> 0
v1 -> (1, int)
v2 -> (2, int)
v3 -> (1, int)

Heap table:
1 -> 2
2 -> 3

Output:

File table:

------------------------
ID: 1
Execution stack:
new(v3, 4)
newLatch(cnt, readHeap(v2)); fork(writeHeap(v1, readHeap(v1) * 10); print(readHeap(v1)); countDown( cnt )); fork(writeHeap(v2, readHeap(v2) * 10); print(readHeap(v2)); countDown( cnt )); fork(writeHeap(v3, readHeap(v3) * 10); print(readHeap(v3)); countDown( cnt )); await(cnt); print(100); countDown( cnt ); print(100)

Symbol table:
cnt -> 0
v1 -> (1, int)
v2 -> (2, int)
v3 -> (1, int)

Heap table:
1 -> 2
2 -> 3

Output:

File table:

------------------------
ID: 1
Execution stack:
newLatch(cnt, readHeap(v2)); fork(writeHeap(v1, readHeap(v1) * 10); print(readHeap(v1)); countDown( cnt )); fork(writeHeap(v2, readHeap(v2) * 10); print(readHeap(v2)); countDown( cnt )); fork(writeHeap(v3, readHeap(v3) * 10); print(readHeap(v3)); countDown( cnt )); await(cnt); print(100); countDown( cnt ); print(100)

Symbol table:
cnt -> 0
v1 -> (1, int)
v2 -> (2, int)
v3 -> (3, int)

Heap table:
1 -> 2
2 -> 3
3 -> 4

Output:

File table:

------------------------
ID: 1
Execution stack:
newLatch(cnt, readHeap(v2)); fork(writeHeap(v1, readHeap(v1) * 10); print(readHeap(v1)); countDown( cnt )); fork(writeHeap(v2, readHeap(v2) * 10); print(readHeap(v2)); countDown( cnt )); fork(writeHeap(v3, readHeap(v3) * 10); print(readHeap(v3)); countDown( cnt )); await(cnt); print(100); countDown( cnt ); print(100)

Symbol table:
cnt -> 0
v1 -> (1, int)
v2 -> (2, int)
v3 -> (3, int)

Heap table:
1 -> 2
2 -> 3
3 -> 4

Output:

File table:

------------------------
ID: 1
Execution stack:
newLatch(cnt, readHeap(v2))
fork(writeHeap(v1, readHeap(v1) * 10); print(readHeap(v1)); countDown( cnt )); fork(writeHeap(v2, readHeap(v2) * 10); print(readHeap(v2)); countDown( cnt )); fork(writeHeap(v3, readHeap(v3) * 10); print(readHeap(v3)); countDown( cnt )); await(cnt); print(100); countDown( cnt ); print(100)

Symbol table:
cnt -> 0
v1 -> (1, int)
v2 -> (2, int)
v3 -> (3, int)

Heap table:
1 -> 2
2 -> 3
3 -> 4

Output:

File table:

------------------------
ID: 1
Execution stack:
newLatch(cnt, readHeap(v2))
fork(writeHeap(v1, readHeap(v1) * 10); print(readHeap(v1)); countDown( cnt )); fork(writeHeap(v2, readHeap(v2) * 10); print(readHeap(v2)); countDown( cnt )); fork(writeHeap(v3, readHeap(v3) * 10); print(readHeap(v3)); countDown( cnt )); await(cnt); print(100); countDown( cnt ); print(100)

Symbol table:
cnt -> 0
v1 -> (1, int)
v2 -> (2, int)
v3 -> (3, int)

Heap table:
1 -> 2
2 -> 3
3 -> 4

Output:

File table:

------------------------
ID: 1
Execution stack:
fork(writeHeap(v1, readHeap(v1) * 10); print(readHeap(v1)); countDown( cnt )); fork(writeHeap(v2, readHeap(v2) * 10); print(readHeap(v2)); countDown( cnt )); fork(writeHeap(v3, readHeap(v3) * 10); print(readHeap(v3)); countDown( cnt )); await(cnt); print(100); countDown( cnt ); print(100)

Symbol table:
cnt -> 1
v1 -> (1, int)
v2 -> (2, int)
v3 -> (3, int)

Heap table:
1 -> 2
2 -> 3
3 -> 4

Output:

File table:

------------------------
ID: 1
Execution stack:
fork(writeHeap(v1, readHeap(v1) * 10); print(readHeap(v1)); countDown( cnt )); fork(writeHeap(v2, readHeap(v2) * 10); print(readHeap(v2)); countDown( cnt )); fork(writeHeap(v3, readHeap(v3) * 10); print(readHeap(v3)); countDown( cnt )); await(cnt); print(100); countDown( cnt ); print(100)

Symbol table:
cnt -> 1
v1 -> (1, int)
v2 -> (2, int)
v3 -> (3, int)

Heap table:
1 -> 2
2 -> 3
3 -> 4

Output:

File table:

------------------------
ID: 1
Execution stack:
fork(writeHeap(v1, readHeap(v1) * 10); print(readHeap(v1)); countDown( cnt ))
fork(writeHeap(v2, readHeap(v2) * 10); print(readHeap(v2)); countDown( cnt )); fork(writeHeap(v3, readHeap(v3) * 10); print(readHeap(v3)); countDown( cnt )); await(cnt); print(100); countDown( cnt ); print(100)

Symbol table:
cnt -> 1
v1 -> (1, int)
v2 -> (2, int)
v3 -> (3, int)

Heap table:
1 -> 2
2 -> 3
3 -> 4

Output:

File table:

------------------------
ID: 1
Execution stack:
fork(writeHeap(v1, readHeap(v1) * 10); print(readHeap(v1)); countDown( cnt ))
fork(writeHeap(v2, readHeap(v2) * 10); print(readHeap(v2)); countDown( cnt )); fork(writeHeap(v3, readHeap(v3) * 10); print(readHeap(v3)); countDown( cnt )); await(cnt); print(100); countDown( cnt ); print(100)

Symbol table:
cnt -> 1
v1 -> (1, int)
v2 -> (2, int)
v3 -> (3, int)

Heap table:
1 -> 2
2 -> 3
3 -> 4

Output:

File table:

------------------------
ID: 1
Execution stack:
fork(writeHeap(v2, readHeap(v2) * 10); print(readHeap(v2)); countDown( cnt )); fork(writeHeap(v3, readHeap(v3) * 10); print(readHeap(v3)); countDown( cnt )); await(cnt); print(100); countDown( cnt ); print(100)

Symbol table:
cnt -> 1
v1 -> (1, int)
v2 -> (2, int)
v3 -> (3, int)

Heap table:
1 -> 2
2 -> 3
3 -> 4

Output:

File table:

------------------------
ID: 5
Execution stack:
writeHeap(v1, readHeap(v1) * 10); print(readHeap(v1)); countDown( cnt )

Symbol table:
cnt -> 1
v1 -> (1, int)
v2 -> (2, int)
v3 -> (3, int)

Heap table:
1 -> 2
2 -> 3
3 -> 4

Output:

File table:

------------------------
ID: 1
Execution stack:
fork(writeHeap(v2, readHeap(v2) * 10); print(readHeap(v2)); countDown( cnt )); fork(writeHeap(v3, readHeap(v3) * 10); print(readHeap(v3)); countDown( cnt )); await(cnt); print(100); countDown( cnt ); print(100)

Symbol table:
cnt -> 1
v1 -> (1, int)
v2 -> (2, int)
v3 -> (3, int)

Heap table:
1 -> 2
2 -> 3
3 -> 4

Output:

File table:

------------------------
ID: 5
Execution stack:
writeHeap(v1, readHeap(v1) * 10); print(readHeap(v1)); countDown( cnt )

Symbol table:
cnt -> 1
v1 -> (1, int)
v2 -> (2, int)
v3 -> (3, int)

Heap table:
1 -> 2
2 -> 3
3 -> 4

Output:

File table:

------------------------
ID: 1
Execution stack:
fork(writeHeap(v2, readHeap(v2) * 10); print(readHeap(v2)); countDown( cnt ))
fork(writeHeap(v3, readHeap(v3) * 10); print(readHeap(v3)); countDown( cnt )); await(cnt); print(100); countDown( cnt ); print(100)

Symbol table:
cnt -> 1
v1 -> (1, int)
v2 -> (2, int)
v3 -> (3, int)

Heap table:
1 -> 2
2 -> 3
3 -> 4

Output:

File table:

------------------------
ID: 5
Execution stack:
writeHeap(v1, readHeap(v1) * 10)
print(readHeap(v1)); countDown( cnt )

Symbol table:
cnt -> 1
v1 -> (1, int)
v2 -> (2, int)
v3 -> (3, int)

Heap table:
1 -> 2
2 -> 3
3 -> 4

Output:

File table:

------------------------
ID: 1
Execution stack:
fork(writeHeap(v2, readHeap(v2) * 10); print(readHeap(v2)); countDown( cnt ))
fork(writeHeap(v3, readHeap(v3) * 10); print(readHeap(v3)); countDown( cnt )); await(cnt); print(100); countDown( cnt ); print(100)

Symbol table:
cnt -> 1
v1 -> (1, int)
v2 -> (2, int)
v3 -> (3, int)

Heap table:
1 -> 2
2 -> 3
3 -> 4

Output:

File table:

------------------------
ID: 5
Execution stack:
writeHeap(v1, readHeap(v1) * 10)
print(readHeap(v1)); countDown( cnt )

Symbol table:
cnt -> 1
v1 -> (1, int)
v2 -> (2, int)
v3 -> (3, int)

Heap table:
1 -> 2
2 -> 3
3 -> 4

Output:

File table:

------------------------
ID: 1
Execution stack:
fork(writeHeap(v3, readHeap(v3) * 10); print(readHeap(v3)); countDown( cnt )); await(cnt); print(100); countDown( cnt ); print(100)

Symbol table:
cnt -> 1
v1 -> (1, int)
v2 -> (2, int)
v3 -> (3, int)

Heap table:
1 -> 20
2 -> 3
3 -> 4

Output:

File table:

------------------------
ID: 5
Execution stack:
print(readHeap(v1)); countDown( cnt )

Symbol table:
cnt -> 1
v1 -> (1, int)
v2 -> (2, int)
v3 -> (3, int)

Heap table:
1 -> 20
2 -> 3
3 -> 4

Output:

File table:

------------------------
ID: 6
Execution stack:
writeHeap(v2, readHeap(v2) * 10); print(readHeap(v2)); countDown( cnt )

Symbol table:
cnt -> 1
v1 -> (1, int)
v2 -> (2, int)
v3 -> (3, int)

Heap table:
1 -> 20
2 -> 3
3 -> 4

Output:

File table:

------------------------
ID: 1
Execution stack:
fork(writeHeap(v3, readHeap(v3) * 10); print(readHeap(v3)); countDown( cnt )); await(cnt); print(100); countDown( cnt ); print(100)

Symbol table:
cnt -> 1
v1 -> (1, int)
v2 -> (2, int)
v3 -> (3, int)

Heap table:
1 -> 20
2 -> 3
3 -> 4

Output:

File table:

------------------------
ID: 5
Execution stack:
print(readHeap(v1)); countDown( cnt )

Symbol table:
cnt -> 1
v1 -> (1, int)
v2 -> (2, int)
v3 -> (3, int)

Heap table:
1 -> 20
2 -> 3
3 -> 4

Output:

File table:

------------------------
ID: 6
Execution stack:
writeHeap(v2, readHeap(v2) * 10); print(readHeap(v2)); countDown( cnt )

Symbol table:
cnt -> 1
v1 -> (1, int)
v2 -> (2, int)
v3 -> (3, int)

Heap table:
1 -> 20
2 -> 3
3 -> 4

Output:

File table:

------------------------
ID: 1
Execution stack:
fork(writeHeap(v3, readHeap(v3) * 10); print(readHeap(v3)); countDown( cnt ))
await(cnt); print(100); countDown( cnt ); print(100)

Symbol table:
cnt -> 1
v1 -> (1, int)
v2 -> (2, int)
v3 -> (3, int)

Heap table:
1 -> 20
2 -> 3
3 -> 4

Output:

File table:

------------------------
ID: 5
Execution stack:
print(readHeap(v1))
countDown( cnt )

Symbol table:
cnt -> 1
v1 -> (1, int)
v2 -> (2, int)
v3 -> (3, int)

Heap table:
1 -> 20
2 -> 3
3 -> 4

Output:

File table:

------------------------
ID: 6
Execution stack:
writeHeap(v2, readHeap(v2) * 10)
print(readHeap(v2)); countDown( cnt )

Symbol table:
cnt -> 1
v1 -> (1, int)
v2 -> (2, int)
v3 -> (3, int)

Heap table:
1 -> 20
2 -> 3
3 -> 4

Output:

File table:

------------------------
ID: 1
Execution stack:
fork(writeHeap(v3, readHeap(v3) * 10); print(readHeap(v3)); countDown( cnt ))
await(cnt); print(100); countDown( cnt ); print(100)

Symbol table:
cnt -> 1
v1 -> (1, int)
v2 -> (2, int)
v3 -> (3, int)

Heap table:
1 -> 20
2 -> 3
3 -> 4

Output:

File table:

------------------------
ID: 5
Execution stack:
print(readHeap(v1))
countDown( cnt )

Symbol table:
cnt -> 1
v1 -> (1, int)
v2 -> (2, int)
v3 -> (3, int)

Heap table:
1 -> 20
2 -> 3
3 -> 4

Output:

File table:

------------------------
ID: 6
Execution stack:
writeHeap(v2, readHeap(v2) * 10)
print(readHeap(v2)); countDown( cnt )

Symbol table:
cnt -> 1
v1 -> (1, int)
v2 -> (2, int)
v3 -> (3, int)

Heap table:
1 -> 20
2 -> 3
3 -> 4

Output:

File table:

------------------------
ID: 1
Execution stack:
await(cnt); print(100); countDown( cnt ); print(100)

Symbol table:
cnt -> 1
v1 -> (1, int)
v2 -> (2, int)
v3 -> (3, int)

Heap table:
1 -> 20
2 -> 30
3 -> 4

Output:
20

File table:

------------------------
ID: 5
Execution stack:
countDown( cnt )

Symbol table:
cnt -> 1
v1 -> (1, int)
v2 -> (2, int)
v3 -> (3, int)

Heap table:
1 -> 20
2 -> 30
3 -> 4

Output:
20

File table:

------------------------
ID: 6
Execution stack:
print(readHeap(v2)); countDown( cnt )

Symbol table:
cnt -> 1
v1 -> (1, int)
v2 -> (2, int)
v3 -> (3, int)

Heap table:
1 -> 20
2 -> 30
3 -> 4

Output:
20

File table:

------------------------
ID: 7
Execution stack:
writeHeap(v3, readHeap(v3) * 10); print(readHeap(v3)); countDown( cnt )

Symbol table:
cnt -> 1
v1 -> (1, int)
v2 -> (2, int)
v3 -> (3, int)

Heap table:
1 -> 20
2 -> 30
3 -> 4

Output:
20

File table:

------------------------
ID: 1
Execution stack:
await(cnt); print(100); countDown( cnt ); print(100)

Symbol table:
cnt -> 1
v1 -> (1, int)
v2 -> (2, int)
v3 -> (3, int)

Heap table:
1 -> 20
2 -> 30
3 -> 4

Output:
20

File table:

------------------------
ID: 5
Execution stack:
countDown( cnt )

Symbol table:
cnt -> 1
v1 -> (1, int)
v2 -> (2, int)
v3 -> (3, int)

Heap table:
1 -> 20
2 -> 30
3 -> 4

Output:
20

File table:

------------------------
ID: 6
Execution stack:
print(readHeap(v2)); countDown( cnt )

Symbol table:
cnt -> 1
v1 -> (1, int)
v2 -> (2, int)
v3 -> (3, int)

Heap table:
1 -> 20
2 -> 30
3 -> 4

Output:
20

File table:

------------------------
ID: 7
Execution stack:
writeHeap(v3, readHeap(v3) * 10); print(readHeap(v3)); countDown( cnt )

Symbol table:
cnt -> 1
v1 -> (1, int)
v2 -> (2, int)
v3 -> (3, int)

Heap table:
1 -> 20
2 -> 30
3 -> 4

Output:
20

File table:

------------------------
ID: 1
Execution stack:
await(cnt)
print(100); countDown( cnt ); print(100)

Symbol table:
cnt -> 1
v1 -> (1, int)
v2 -> (2, int)
v3 -> (3, int)

Heap table:
1 -> 20
2 -> 30
3 -> 4

Output:
20
5

File table:

------------------------
ID: 5
Execution stack:

Symbol table:
cnt -> 1
v1 -> (1, int)
v2 -> (2, int)
v3 -> (3, int)

Heap table:
1 -> 20
2 -> 30
3 -> 4

Output:
20
5

File table:

------------------------
ID: 6
Execution stack:
print(readHeap(v2))
countDown( cnt )

Symbol table:
cnt -> 1
v1 -> (1, int)
v2 -> (2, int)
v3 -> (3, int)

Heap table:
1 -> 20
2 -> 30
3 -> 4

Output:
20
5

File table:

------------------------
ID: 7
Execution stack:
writeHeap(v3, readHeap(v3) * 10)
print(readHeap(v3)); countDown( cnt )

Symbol table:
cnt -> 1
v1 -> (1, int)
v2 -> (2, int)
v3 -> (3, int)

Heap table:
1 -> 20
2 -> 30
3 -> 4

Output:
20
5

File table:

------------------------
ID: 1
Execution stack:
await(cnt)
print(100); countDown( cnt ); print(100)

Symbol table:
cnt -> 1
v1 -> (1, int)
v2 -> (2, int)
v3 -> (3, int)

Heap table:
1 -> 20
2 -> 30
3 -> 4

Output:
20
5

File table:

------------------------
ID: 6
Execution stack:
print(readHeap(v2))
countDown( cnt )

Symbol table:
cnt -> 1
v1 -> (1, int)
v2 -> (2, int)
v3 -> (3, int)

Heap table:
1 -> 20
2 -> 30
3 -> 4

Output:
20
5

File table:

------------------------
ID: 7
Execution stack:
writeHeap(v3, readHeap(v3) * 10)
print(readHeap(v3)); countDown( cnt )

Symbol table:
cnt -> 1
v1 -> (1, int)
v2 -> (2, int)
v3 -> (3, int)

Heap table:
1 -> 20
2 -> 30
3 -> 4

Output:
20
5

File table:

------------------------
ID: 1
Execution stack:
await(cnt)
print(100); countDown( cnt ); print(100)

Symbol table:
cnt -> 1
v1 -> (1, int)
v2 -> (2, int)
v3 -> (3, int)

Heap table:
1 -> 20
2 -> 30
3 -> 40

Output:
20
5
30

File table:

------------------------
ID: 6
Execution stack:
countDown( cnt )

Symbol table:
cnt -> 1
v1 -> (1, int)
v2 -> (2, int)
v3 -> (3, int)

Heap table:
1 -> 20
2 -> 30
3 -> 40

Output:
20
5
30

File table:

------------------------
ID: 7
Execution stack:
print(readHeap(v3)); countDown( cnt )

Symbol table:
cnt -> 1
v1 -> (1, int)
v2 -> (2, int)
v3 -> (3, int)

Heap table:
1 -> 20
2 -> 30
3 -> 40

Output:
20
5
30

File table:

------------------------
ID: 1
Execution stack:
await(cnt)
print(100); countDown( cnt ); print(100)

Symbol table:
cnt -> 1
v1 -> (1, int)
v2 -> (2, int)
v3 -> (3, int)

Heap table:
1 -> 20
2 -> 30
3 -> 40

Output:
20
5
30

File table:

------------------------
ID: 6
Execution stack:
countDown( cnt )

Symbol table:
cnt -> 1
v1 -> (1, int)
v2 -> (2, int)
v3 -> (3, int)

Heap table:
1 -> 20
2 -> 30
3 -> 40

Output:
20
5
30

File table:

------------------------
ID: 7
Execution stack:
print(readHeap(v3)); countDown( cnt )

Symbol table:
cnt -> 1
v1 -> (1, int)
v2 -> (2, int)
v3 -> (3, int)

Heap table:
1 -> 20
2 -> 30
3 -> 40

Output:
20
5
30

File table:

------------------------
ID: 1
Execution stack:
await(cnt)
print(100); countDown( cnt ); print(100)

Symbol table:
cnt -> 1
v1 -> (1, int)
v2 -> (2, int)
v3 -> (3, int)

Heap table:
1 -> 20
2 -> 30
3 -> 40

Output:
20
5
30
6

File table:

------------------------
ID: 6
Execution stack:

Symbol table:
cnt -> 1
v1 -> (1, int)
v2 -> (2, int)
v3 -> (3, int)

Heap table:
1 -> 20
2 -> 30
3 -> 40

Output:
20
5
30
6

File table:

------------------------
ID: 7
Execution stack:
print(readHeap(v3))
countDown( cnt )

Symbol table:
cnt -> 1
v1 -> (1, int)
v2 -> (2, int)
v3 -> (3, int)

Heap table:
1 -> 20
2 -> 30
3 -> 40

Output:
20
5
30
6

File table:

------------------------
ID: 1
Execution stack:
await(cnt)
print(100); countDown( cnt ); print(100)

Symbol table:
cnt -> 1
v1 -> (1, int)
v2 -> (2, int)
v3 -> (3, int)

Heap table:
1 -> 20
2 -> 30
3 -> 40

Output:
20
5
30
6

File table:

------------------------
ID: 7
Execution stack:
print(readHeap(v3))
countDown( cnt )

Symbol table:
cnt -> 1
v1 -> (1, int)
v2 -> (2, int)
v3 -> (3, int)

Heap table:
1 -> 20
2 -> 30
3 -> 40

Output:
20
5
30
6

File table:

------------------------
ID: 1
Execution stack:
await(cnt)
print(100); countDown( cnt ); print(100)

Symbol table:
cnt -> 1
v1 -> (1, int)
v2 -> (2, int)
v3 -> (3, int)

Heap table:
1 -> 20
2 -> 30
3 -> 40

Output:
20
5
30
6
40

File table:

------------------------
ID: 7
Execution stack:
countDown( cnt )

Symbol table:
cnt -> 1
v1 -> (1, int)
v2 -> (2, int)
v3 -> (3, int)

Heap table:
1 -> 20
2 -> 30
3 -> 40

Output:
20
5
30
6
40

File table:

------------------------
ID: 1
Execution stack:
await(cnt)
print(100); countDown( cnt ); print(100)

Symbol table:
cnt -> 1
v1 -> (1, int)
v2 -> (2, int)
v3 -> (3, int)

Heap table:
1 -> 20
2 -> 30
3 -> 40

Output:
20
5
30
6
40

File table:

------------------------
ID: 7
Execution stack:
countDown( cnt )

Symbol table:
cnt -> 1
v1 -> (1, int)
v2 -> (2, int)
v3 -> (3, int)

Heap table:
1 -> 20
2 -> 30
3 -> 40

Output:
20
5
30
6
40

File table:

------------------------
ID: 1
Execution stack:
await(cnt)
print(100); countDown( cnt ); print(100)

Symbol table:
cnt -> 1
v1 -> (1, int)
v2 -> (2, int)
v3 -> (3, int)

Heap table:
1 -> 20
2 -> 30
3 -> 40

Output:
20
5
30
6
40
7

File table:

------------------------
ID: 7
Execution stack:

Symbol table:
cnt -> 1
v1 -> (1, int)
v2 -> (2, int)
v3 -> (3, int)

Heap table:
1 -> 20
2 -> 30
3 -> 40

Output:
20
5
30
6
40
7

File table:

------------------------
ID: 1
Execution stack:
await(cnt)
print(100); countDown( cnt ); print(100)

Symbol table:
cnt -> 1
v1 -> (1, int)
v2 -> (2, int)
v3 -> (3, int)

Heap table:
1 -> 20
2 -> 30
3 -> 40

Output:
20
5
30
6
40
7

File table:

------------------------
ID: 1
Execution stack:
print(100); countDown( cnt ); print(100)

Symbol table:
cnt -> 1
v1 -> (1, int)
v2 -> (2, int)
v3 -> (3, int)

Heap table:
1 -> 20
2 -> 30
3 -> 40

Output:
20
5
30
6
40
7

File table:

------------------------
ID: 1
Execution stack:
print(100); countDown( cnt ); print(100)

Symbol table:
cnt -> 1
v1 -> (1, int)
v2 -> (2, int)
v3 -> (3, int)

Heap table:
1 -> 20
2 -> 30
3 -> 40

Output:
20
5
30
6
40
7

File table:

------------------------
ID: 1
Execution stack:
print(100)
countDown( cnt ); print(100)

Symbol table:
cnt -> 1
v1 -> (1, int)
v2 -> (2, int)
v3 -> (3, int)

Heap table:
1 -> 20
2 -> 30
3 -> 40

Output:
20
5
30
6
40
7

File table:

------------------------
ID: 1
Execution stack:
print(100)
countDown( cnt ); print(100)

Symbol table:
cnt -> 1
v1 -> (1, int)
v2 -> (2, int)
v3 -> (3, int)

Heap table:
1 -> 20
2 -> 30
3 -> 40

Output:
20
5
30
6
40
7

File table:

------------------------
ID: 1
Execution stack:
countDown( cnt ); print(100)

Symbol table:
cnt -> 1
v1 -> (1, int)
v2 -> (2, int)
v3 -> (3, int)

Heap table:
1 -> 20
2 -> 30
3 -> 40

Output:
20
5
30
6
40
7
100

File table:

------------------------
ID: 1
Execution stack:
countDown( cnt ); print(100)

Symbol table:
cnt -> 1
v1 -> (1, int)
v2 -> (2, int)
v3 -> (3, int)

Heap table:
1 -> 20
2 -> 30
3 -> 40

Output:
20
5
30
6
40
7
100

File table:

------------------------
ID: 1
Execution stack:
countDown( cnt )
print(100)

Symbol table:
cnt -> 1
v1 -> (1, int)
v2 -> (2, int)
v3 -> (3, int)

Heap table:
1 -> 20
2 -> 30
3 -> 40

Output:
20
5
30
6
40
7
100

File table:

------------------------
ID: 1
Execution stack:
countDown( cnt )
print(100)

Symbol table:
cnt -> 1
v1 -> (1, int)
v2 -> (2, int)
v3 -> (3, int)

Heap table:
1 -> 20
2 -> 30
3 -> 40

Output:
20
5
30
6
40
7
100

File table:

------------------------
ID: 1
Execution stack:
print(100)

Symbol table:
cnt -> 1
v1 -> (1, int)
v2 -> (2, int)
v3 -> (3, int)

Heap table:
1 -> 20
2 -> 30
3 -> 40

Output:
20
5
30
6
40
7
100
1

File table:

------------------------
ID: 1
Execution stack:
print(100)

Symbol table:
cnt -> 1
v1 -> (1, int)
v2 -> (2, int)
v3 -> (3, int)

Heap table:
1 -> 20
2 -> 30
3 -> 40

Output:
20
5
30
6
40
7
100
1

File table:

------------------------
ID: 1
Execution stack:

Symbol table:
cnt -> 1
v1 -> (1, int)
v2 -> (2, int)
v3 -> (3, int)

Heap table:
1 -> 20
2 -> 30
3 -> 40

Output:
20
5
30
6
40
7
100
1
100

File table:

------------------------
ID: 1
Execution stack:
int cnt; Ref(int) v1; Ref(int) v2; Ref(int) v3; new(v1, 2); new(v2, 3); new(v3, 4); newLatch(cnt, readHeap(v2)); fork(writeHeap(v1, readHeap(v1) * 10); print(readHeap(v1)); countDown( cnt )); fork(writeHeap(v2, readHeap(v2) * 10); print(readHeap(v2)); countDown( cnt )); fork(writeHeap(v3, readHeap(v3) * 10); print(readHeap(v3)); countDown( cnt )); await(cnt); print(100); countDown( cnt ); print(100)

Symbol table:

Heap table:

Output:

File table:

------------------------
ID: 1
Execution stack:
int cnt
Ref(int) v1; Ref(int) v2; Ref(int) v3; new(v1, 2); new(v2, 3); new(v3, 4); newLatch(cnt, readHeap(v2)); fork(writeHeap(v1, readHeap(v1) * 10); print(readHeap(v1)); countDown( cnt )); fork(writeHeap(v2, readHeap(v2) * 10); print(readHeap(v2)); countDown( cnt )); fork(writeHeap(v3, readHeap(v3) * 10); print(readHeap(v3)); countDown( cnt )); await(cnt); print(100); countDown( cnt ); print(100)

Symbol table:

Heap table:

Output:

File table:

------------------------
ID: 1
Execution stack:
int cnt
Ref(int) v1; Ref(int) v2; Ref(int) v3; new(v1, 2); new(v2, 3); new(v3, 4); newLatch(cnt, readHeap(v2)); fork(writeHeap(v1, readHeap(v1) * 10); print(readHeap(v1)); countDown( cnt )); fork(writeHeap(v2, readHeap(v2) * 10); print(readHeap(v2)); countDown( cnt )); fork(writeHeap(v3, readHeap(v3) * 10); print(readHeap(v3)); countDown( cnt )); await(cnt); print(100); countDown( cnt ); print(100)

Symbol table:

Heap table:

Output:

File table:

------------------------
ID: 1
Execution stack:
Ref(int) v1; Ref(int) v2; Ref(int) v3; new(v1, 2); new(v2, 3); new(v3, 4); newLatch(cnt, readHeap(v2)); fork(writeHeap(v1, readHeap(v1) * 10); print(readHeap(v1)); countDown( cnt )); fork(writeHeap(v2, readHeap(v2) * 10); print(readHeap(v2)); countDown( cnt )); fork(writeHeap(v3, readHeap(v3) * 10); print(readHeap(v3)); countDown( cnt )); await(cnt); print(100); countDown( cnt ); print(100)

Symbol table:
cnt -> 0

Heap table:

Output:

File table:

------------------------
ID: 1
Execution stack:
Ref(int) v1; Ref(int) v2; Ref(int) v3; new(v1, 2); new(v2, 3); new(v3, 4); newLatch(cnt, readHeap(v2)); fork(writeHeap(v1, readHeap(v1) * 10); print(readHeap(v1)); countDown( cnt )); fork(writeHeap(v2, readHeap(v2) * 10); print(readHeap(v2)); countDown( cnt )); fork(writeHeap(v3, readHeap(v3) * 10); print(readHeap(v3)); countDown( cnt )); await(cnt); print(100); countDown( cnt ); print(100)

Symbol table:
cnt -> 0

Heap table:

Output:

File table:

------------------------
ID: 1
Execution stack:
Ref(int) v1
Ref(int) v2; Ref(int) v3; new(v1, 2); new(v2, 3); new(v3, 4); newLatch(cnt, readHeap(v2)); fork(writeHeap(v1, readHeap(v1) * 10); print(readHeap(v1)); countDown( cnt )); fork(writeHeap(v2, readHeap(v2) * 10); print(readHeap(v2)); countDown( cnt )); fork(writeHeap(v3, readHeap(v3) * 10); print(readHeap(v3)); countDown( cnt )); await(cnt); print(100); countDown( cnt ); print(100)

Symbol table:
cnt -> 0

Heap table:

Output:

File table:

------------------------
ID: 1
Execution stack:
Ref(int) v1
Ref(int) v2; Ref(int) v3; new(v1, 2); new(v2, 3); new(v3, 4); newLatch(cnt, readHeap(v2)); fork(writeHeap(v1, readHeap(v1) * 10); print(readHeap(v1)); countDown( cnt )); fork(writeHeap(v2, readHeap(v2) * 10); print(readHeap(v2)); countDown( cnt )); fork(writeHeap(v3, readHeap(v3) * 10); print(readHeap(v3)); countDown( cnt )); await(cnt); print(100); countDown( cnt ); print(100)

Symbol table:
cnt -> 0

Heap table:

Output:

File table:

------------------------
ID: 1
Execution stack:
Ref(int) v2; Ref(int) v3; new(v1, 2); new(v2, 3); new(v3, 4); newLatch(cnt, readHeap(v2)); fork(writeHeap(v1, readHeap(v1) * 10); print(readHeap(v1)); countDown( cnt )); fork(writeHeap(v2, readHeap(v2) * 10); print(readHeap(v2)); countDown( cnt )); fork(writeHeap(v3, readHeap(v3) * 10); print(readHeap(v3)); countDown( cnt )); await(cnt); print(100); countDown( cnt ); print(100)

Symbol table:
cnt -> 0
v1 -> (1, int)

Heap table:

Output:

File table:

------------------------
ID: 1
Execution stack:
Ref(int) v2; Ref(int) v3; new(v1, 2); new(v2, 3); new(v3, 4); newLatch(cnt, readHeap(v2)); fork(writeHeap(v1, readHeap(v1) * 10); print(readHeap(v1)); countDown( cnt )); fork(writeHeap(v2, readHeap(v2) * 10); print(readHeap(v2)); countDown( cnt )); fork(writeHeap(v3, readHeap(v3) * 10); print(readHeap(v3)); countDown( cnt )); await(cnt); print(100); countDown( cnt ); print(100)

Symbol table:
cnt -> 0
v1 -> (1, int)

Heap table:

Output:

File table:

------------------------
ID: 1
Execution stack:
Ref(int) v2
Ref(int) v3; new(v1, 2); new(v2, 3); new(v3, 4); newLatch(cnt, readHeap(v2)); fork(writeHeap(v1, readHeap(v1) * 10); print(readHeap(v1)); countDown( cnt )); fork(writeHeap(v2, readHeap(v2) * 10); print(readHeap(v2)); countDown( cnt )); fork(writeHeap(v3, readHeap(v3) * 10); print(readHeap(v3)); countDown( cnt )); await(cnt); print(100); countDown( cnt ); print(100)

Symbol table:
cnt -> 0
v1 -> (1, int)

Heap table:

Output:

File table:

------------------------
ID: 1
Execution stack:
Ref(int) v2
Ref(int) v3; new(v1, 2); new(v2, 3); new(v3, 4); newLatch(cnt, readHeap(v2)); fork(writeHeap(v1, readHeap(v1) * 10); print(readHeap(v1)); countDown( cnt )); fork(writeHeap(v2, readHeap(v2) * 10); print(readHeap(v2)); countDown( cnt )); fork(writeHeap(v3, readHeap(v3) * 10); print(readHeap(v3)); countDown( cnt )); await(cnt); print(100); countDown( cnt ); print(100)

Symbol table:
cnt -> 0
v1 -> (1, int)

Heap table:

Output:

File table:

------------------------
ID: 1
Execution stack:
Ref(int) v3; new(v1, 2); new(v2, 3); new(v3, 4); newLatch(cnt, readHeap(v2)); fork(writeHeap(v1, readHeap(v1) * 10); print(readHeap(v1)); countDown( cnt )); fork(writeHeap(v2, readHeap(v2) * 10); print(readHeap(v2)); countDown( cnt )); fork(writeHeap(v3, readHeap(v3) * 10); print(readHeap(v3)); countDown( cnt )); await(cnt); print(100); countDown( cnt ); print(100)

Symbol table:
cnt -> 0
v1 -> (1, int)
v2 -> (1, int)

Heap table:

Output:

File table:

------------------------
ID: 1
Execution stack:
Ref(int) v3; new(v1, 2); new(v2, 3); new(v3, 4); newLatch(cnt, readHeap(v2)); fork(writeHeap(v1, readHeap(v1) * 10); print(readHeap(v1)); countDown( cnt )); fork(writeHeap(v2, readHeap(v2) * 10); print(readHeap(v2)); countDown( cnt )); fork(writeHeap(v3, readHeap(v3) * 10); print(readHeap(v3)); countDown( cnt )); await(cnt); print(100); countDown( cnt ); print(100)

Symbol table:
cnt -> 0
v1 -> (1, int)
v2 -> (1, int)

Heap table:

Output:

File table:

------------------------
ID: 1
Execution stack:
Ref(int) v3
new(v1, 2); new(v2, 3); new(v3, 4); newLatch(cnt, readHeap(v2)); fork(writeHeap(v1, readHeap(v1) * 10); print(readHeap(v1)); countDown( cnt )); fork(writeHeap(v2, readHeap(v2) * 10); print(readHeap(v2)); countDown( cnt )); fork(writeHeap(v3, readHeap(v3) * 10); print(readHeap(v3)); countDown( cnt )); await(cnt); print(100); countDown( cnt ); print(100)

Symbol table:
cnt -> 0
v1 -> (1, int)
v2 -> (1, int)

Heap table:

Output:

File table:

------------------------
ID: 1
Execution stack:
Ref(int) v3
new(v1, 2); new(v2, 3); new(v3, 4); newLatch(cnt, readHeap(v2)); fork(writeHeap(v1, readHeap(v1) * 10); print(readHeap(v1)); countDown( cnt )); fork(writeHeap(v2, readHeap(v2) * 10); print(readHeap(v2)); countDown( cnt )); fork(writeHeap(v3, readHeap(v3) * 10); print(readHeap(v3)); countDown( cnt )); await(cnt); print(100); countDown( cnt ); print(100)

Symbol table:
cnt -> 0
v1 -> (1, int)
v2 -> (1, int)

Heap table:

Output:

File table:

------------------------
ID: 1
Execution stack:
new(v1, 2); new(v2, 3); new(v3, 4); newLatch(cnt, readHeap(v2)); fork(writeHeap(v1, readHeap(v1) * 10); print(readHeap(v1)); countDown( cnt )); fork(writeHeap(v2, readHeap(v2) * 10); print(readHeap(v2)); countDown( cnt )); fork(writeHeap(v3, readHeap(v3) * 10); print(readHeap(v3)); countDown( cnt )); await(cnt); print(100); countDown( cnt ); print(100)

Symbol table:
cnt -> 0
v1 -> (1, int)
v2 -> (1, int)
v3 -> (1, int)

Heap table:

Output:

File table:

------------------------
ID: 1
Execution stack:
new(v1, 2); new(v2, 3); new(v3, 4); newLatch(cnt, readHeap(v2)); fork(writeHeap(v1, readHeap(v1) * 10); print(readHeap(v1)); countDown( cnt )); fork(writeHeap(v2, readHeap(v2) * 10); print(readHeap(v2)); countDown( cnt )); fork(writeHeap(v3, readHeap(v3) * 10); print(readHeap(v3)); countDown( cnt )); await(cnt); print(100); countDown( cnt ); print(100)

Symbol table:
cnt -> 0
v1 -> (1, int)
v2 -> (1, int)
v3 -> (1, int)

Heap table:

Output:

File table:

------------------------
ID: 1
Execution stack:
new(v1, 2)
new(v2, 3); new(v3, 4); newLatch(cnt, readHeap(v2)); fork(writeHeap(v1, readHeap(v1) * 10); print(readHeap(v1)); countDown( cnt )); fork(writeHeap(v2, readHeap(v2) * 10); print(readHeap(v2)); countDown( cnt )); fork(writeHeap(v3, readHeap(v3) * 10); print(readHeap(v3)); countDown( cnt )); await(cnt); print(100); countDown( cnt ); print(100)

Symbol table:
cnt -> 0
v1 -> (1, int)
v2 -> (1, int)
v3 -> (1, int)

Heap table:

Output:

File table:

------------------------
ID: 1
Execution stack:
new(v1, 2)
new(v2, 3); new(v3, 4); newLatch(cnt, readHeap(v2)); fork(writeHeap(v1, readHeap(v1) * 10); print(readHeap(v1)); countDown( cnt )); fork(writeHeap(v2, readHeap(v2) * 10); print(readHeap(v2)); countDown( cnt )); fork(writeHeap(v3, readHeap(v3) * 10); print(readHeap(v3)); countDown( cnt )); await(cnt); print(100); countDown( cnt ); print(100)

Symbol table:
cnt -> 0
v1 -> (1, int)
v2 -> (1, int)
v3 -> (1, int)

Heap table:

Output:

File table:

------------------------
ID: 1
Execution stack:
new(v2, 3); new(v3, 4); newLatch(cnt, readHeap(v2)); fork(writeHeap(v1, readHeap(v1) * 10); print(readHeap(v1)); countDown( cnt )); fork(writeHeap(v2, readHeap(v2) * 10); print(readHeap(v2)); countDown( cnt )); fork(writeHeap(v3, readHeap(v3) * 10); print(readHeap(v3)); countDown( cnt )); await(cnt); print(100); countDown( cnt ); print(100)

Symbol table:
cnt -> 0
v1 -> (1, int)
v2 -> (1, int)
v3 -> (1, int)

Heap table:
1 -> 2

Output:

File table:

------------------------
ID: 1
Execution stack:
new(v2, 3); new(v3, 4); newLatch(cnt, readHeap(v2)); fork(writeHeap(v1, readHeap(v1) * 10); print(readHeap(v1)); countDown( cnt )); fork(writeHeap(v2, readHeap(v2) * 10); print(readHeap(v2)); countDown( cnt )); fork(writeHeap(v3, readHeap(v3) * 10); print(readHeap(v3)); countDown( cnt )); await(cnt); print(100); countDown( cnt ); print(100)

Symbol table:
cnt -> 0
v1 -> (1, int)
v2 -> (1, int)
v3 -> (1, int)

Heap table:
1 -> 2

Output:

File table:

------------------------
ID: 1
Execution stack:
new(v2, 3)
new(v3, 4); newLatch(cnt, readHeap(v2)); fork(writeHeap(v1, readHeap(v1) * 10); print(readHeap(v1)); countDown( cnt )); fork(writeHeap(v2, readHeap(v2) * 10); print(readHeap(v2)); countDown( cnt )); fork(writeHeap(v3, readHeap(v3) * 10); print(readHeap(v3)); countDown( cnt )); await(cnt); print(100); countDown( cnt ); print(100)

Symbol table:
cnt -> 0
v1 -> (1, int)
v2 -> (1, int)
v3 -> (1, int)

Heap table:
1 -> 2

Output:

File table:

------------------------
ID: 1
Execution stack:
new(v2, 3)
new(v3, 4); newLatch(cnt, readHeap(v2)); fork(writeHeap(v1, readHeap(v1) * 10); print(readHeap(v1)); countDown( cnt )); fork(writeHeap(v2, readHeap(v2) * 10); print(readHeap(v2)); countDown( cnt )); fork(writeHeap(v3, readHeap(v3) * 10); print(readHeap(v3)); countDown( cnt )); await(cnt); print(100); countDown( cnt ); print(100)

Symbol table:
cnt -> 0
v1 -> (1, int)
v2 -> (1, int)
v3 -> (1, int)

Heap table:
1 -> 2

Output:

File table:

------------------------
ID: 1
Execution stack:
new(v3, 4); newLatch(cnt, readHeap(v2)); fork(writeHeap(v1, readHeap(v1) * 10); print(readHeap(v1)); countDown( cnt )); fork(writeHeap(v2, readHeap(v2) * 10); print(readHeap(v2)); countDown( cnt )); fork(writeHeap(v3, readHeap(v3) * 10); print(readHeap(v3)); countDown( cnt )); await(cnt); print(100); countDown( cnt ); print(100)

Symbol table:
cnt -> 0
v1 -> (1, int)
v2 -> (2, int)
v3 -> (1, int)

Heap table:
1 -> 2
2 -> 3

Output:

File table:

------------------------
ID: 1
Execution stack:
new(v3, 4); newLatch(cnt, readHeap(v2)); fork(writeHeap(v1, readHeap(v1) * 10); print(readHeap(v1)); countDown( cnt )); fork(writeHeap(v2, readHeap(v2) * 10); print(readHeap(v2)); countDown( cnt )); fork(writeHeap(v3, readHeap(v3) * 10); print(readHeap(v3)); countDown( cnt )); await(cnt); print(100); countDown( cnt ); print(100)

Symbol table:
cnt -> 0
v1 -> (1, int)
v2 -> (2, int)
v3 -> (1, int)

Heap table:
1 -> 2
2 -> 3

Output:

File table:

------------------------
ID: 1
Execution stack:
new(v3, 4)
newLatch(cnt, readHeap(v2)); fork(writeHeap(v1, readHeap(v1) * 10); print(readHeap(v1)); countDown( cnt )); fork(writeHeap(v2, readHeap(v2) * 10); print(readHeap(v2)); countDown( cnt )); fork(writeHeap(v3, readHeap(v3) * 10); print(readHeap(v3)); countDown( cnt )); await(cnt); print(100); countDown( cnt ); print(100)

Symbol table:
cnt -> 0
v1 -> (1, int)
v2 -> (2, int)
v3 -> (1, int)

Heap table:
1 -> 2
2 -> 3

Output:

File table:

------------------------
ID: 1
Execution stack:
new(v3, 4)
newLatch(cnt, readHeap(v2)); fork(writeHeap(v1, readHeap(v1) * 10); print(readHeap(v1)); countDown( cnt )); fork(writeHeap(v2, readHeap(v2) * 10); print(readHeap(v2)); countDown( cnt )); fork(writeHeap(v3, readHeap(v3) * 10); print(readHeap(v3)); countDown( cnt )); await(cnt); print(100); countDown( cnt ); print(100)

Symbol table:
cnt -> 0
v1 -> (1, int)
v2 -> (2, int)
v3 -> (1, int)

Heap table:
1 -> 2
2 -> 3

Output:

File table:

------------------------
ID: 1
Execution stack:
newLatch(cnt, readHeap(v2)); fork(writeHeap(v1, readHeap(v1) * 10); print(readHeap(v1)); countDown( cnt )); fork(writeHeap(v2, readHeap(v2) * 10); print(readHeap(v2)); countDown( cnt )); fork(writeHeap(v3, readHeap(v3) * 10); print(readHeap(v3)); countDown( cnt )); await(cnt); print(100); countDown( cnt ); print(100)

Symbol table:
cnt -> 0
v1 -> (1, int)
v2 -> (2, int)
v3 -> (3, int)

Heap table:
1 -> 2
2 -> 3
3 -> 4

Output:

File table:

------------------------
ID: 1
Execution stack:
newLatch(cnt, readHeap(v2)); fork(writeHeap(v1, readHeap(v1) * 10); print(readHeap(v1)); countDown( cnt )); fork(writeHeap(v2, readHeap(v2) * 10); print(readHeap(v2)); countDown( cnt )); fork(writeHeap(v3, readHeap(v3) * 10); print(readHeap(v3)); countDown( cnt )); await(cnt); print(100); countDown( cnt ); print(100)

Symbol table:
cnt -> 0
v1 -> (1, int)
v2 -> (2, int)
v3 -> (3, int)

Heap table:
1 -> 2
2 -> 3
3 -> 4

Output:

File table:

------------------------
ID: 1
Execution stack:
newLatch(cnt, readHeap(v2))
fork(writeHeap(v1, readHeap(v1) * 10); print(readHeap(v1)); countDown( cnt )); fork(writeHeap(v2, readHeap(v2) * 10); print(readHeap(v2)); countDown( cnt )); fork(writeHeap(v3, readHeap(v3) * 10); print(readHeap(v3)); countDown( cnt )); await(cnt); print(100); countDown( cnt ); print(100)

Symbol table:
cnt -> 0
v1 -> (1, int)
v2 -> (2, int)
v3 -> (3, int)

Heap table:
1 -> 2
2 -> 3
3 -> 4

Output:

File table:

------------------------
ID: 1
Execution stack:
newLatch(cnt, readHeap(v2))
fork(writeHeap(v1, readHeap(v1) * 10); print(readHeap(v1)); countDown( cnt )); fork(writeHeap(v2, readHeap(v2) * 10); print(readHeap(v2)); countDown( cnt )); fork(writeHeap(v3, readHeap(v3) * 10); print(readHeap(v3)); countDown( cnt )); await(cnt); print(100); countDown( cnt ); print(100)

Symbol table:
cnt -> 0
v1 -> (1, int)
v2 -> (2, int)
v3 -> (3, int)

Heap table:
1 -> 2
2 -> 3
3 -> 4

Output:

File table:

------------------------
ID: 1
Execution stack:
fork(writeHeap(v1, readHeap(v1) * 10); print(readHeap(v1)); countDown( cnt )); fork(writeHeap(v2, readHeap(v2) * 10); print(readHeap(v2)); countDown( cnt )); fork(writeHeap(v3, readHeap(v3) * 10); print(readHeap(v3)); countDown( cnt )); await(cnt); print(100); countDown( cnt ); print(100)

Symbol table:
cnt -> 0
v1 -> (1, int)
v2 -> (2, int)
v3 -> (3, int)

Heap table:
1 -> 2
2 -> 3
3 -> 4

Output:

File table:

------------------------
ID: 1
Execution stack:
fork(writeHeap(v1, readHeap(v1) * 10); print(readHeap(v1)); countDown( cnt )); fork(writeHeap(v2, readHeap(v2) * 10); print(readHeap(v2)); countDown( cnt )); fork(writeHeap(v3, readHeap(v3) * 10); print(readHeap(v3)); countDown( cnt )); await(cnt); print(100); countDown( cnt ); print(100)

Symbol table:
cnt -> 0
v1 -> (1, int)
v2 -> (2, int)
v3 -> (3, int)

Heap table:
1 -> 2
2 -> 3
3 -> 4

Output:

File table:

------------------------
ID: 1
Execution stack:
fork(writeHeap(v1, readHeap(v1) * 10); print(readHeap(v1)); countDown( cnt ))
fork(writeHeap(v2, readHeap(v2) * 10); print(readHeap(v2)); countDown( cnt )); fork(writeHeap(v3, readHeap(v3) * 10); print(readHeap(v3)); countDown( cnt )); await(cnt); print(100); countDown( cnt ); print(100)

Symbol table:
cnt -> 0
v1 -> (1, int)
v2 -> (2, int)
v3 -> (3, int)

Heap table:
1 -> 2
2 -> 3
3 -> 4

Output:

File table:

------------------------
ID: 1
Execution stack:
fork(writeHeap(v1, readHeap(v1) * 10); print(readHeap(v1)); countDown( cnt ))
fork(writeHeap(v2, readHeap(v2) * 10); print(readHeap(v2)); countDown( cnt )); fork(writeHeap(v3, readHeap(v3) * 10); print(readHeap(v3)); countDown( cnt )); await(cnt); print(100); countDown( cnt ); print(100)

Symbol table:
cnt -> 0
v1 -> (1, int)
v2 -> (2, int)
v3 -> (3, int)

Heap table:
1 -> 2
2 -> 3
3 -> 4

Output:

File table:

------------------------
ID: 1
Execution stack:
fork(writeHeap(v2, readHeap(v2) * 10); print(readHeap(v2)); countDown( cnt )); fork(writeHeap(v3, readHeap(v3) * 10); print(readHeap(v3)); countDown( cnt )); await(cnt); print(100); countDown( cnt ); print(100)

Symbol table:
cnt -> 0
v1 -> (1, int)
v2 -> (2, int)
v3 -> (3, int)

Heap table:
1 -> 2
2 -> 3
3 -> 4

Output:

File table:

------------------------
ID: 2
Execution stack:
writeHeap(v1, readHeap(v1) * 10); print(readHeap(v1)); countDown( cnt )

Symbol table:
cnt -> 0
v1 -> (1, int)
v2 -> (2, int)
v3 -> (3, int)

Heap table:
1 -> 2
2 -> 3
3 -> 4

Output:

File table:

------------------------
ID: 1
Execution stack:
fork(writeHeap(v2, readHeap(v2) * 10); print(readHeap(v2)); countDown( cnt )); fork(writeHeap(v3, readHeap(v3) * 10); print(readHeap(v3)); countDown( cnt )); await(cnt); print(100); countDown( cnt ); print(100)

Symbol table:
cnt -> 0
v1 -> (1, int)
v2 -> (2, int)
v3 -> (3, int)

Heap table:
1 -> 2
2 -> 3
3 -> 4

Output:

File table:

------------------------
ID: 2
Execution stack:
writeHeap(v1, readHeap(v1) * 10); print(readHeap(v1)); countDown( cnt )

Symbol table:
cnt -> 0
v1 -> (1, int)
v2 -> (2, int)
v3 -> (3, int)

Heap table:
1 -> 2
2 -> 3
3 -> 4

Output:

File table:

------------------------
ID: 1
Execution stack:
fork(writeHeap(v2, readHeap(v2) * 10); print(readHeap(v2)); countDown( cnt ))
fork(writeHeap(v3, readHeap(v3) * 10); print(readHeap(v3)); countDown( cnt )); await(cnt); print(100); countDown( cnt ); print(100)

Symbol table:
cnt -> 0
v1 -> (1, int)
v2 -> (2, int)
v3 -> (3, int)

Heap table:
1 -> 2
2 -> 3
3 -> 4

Output:

File table:

------------------------
ID: 2
Execution stack:
writeHeap(v1, readHeap(v1) * 10)
print(readHeap(v1)); countDown( cnt )

Symbol table:
cnt -> 0
v1 -> (1, int)
v2 -> (2, int)
v3 -> (3, int)

Heap table:
1 -> 2
2 -> 3
3 -> 4

Output:

File table:

------------------------
ID: 1
Execution stack:
fork(writeHeap(v2, readHeap(v2) * 10); print(readHeap(v2)); countDown( cnt ))
fork(writeHeap(v3, readHeap(v3) * 10); print(readHeap(v3)); countDown( cnt )); await(cnt); print(100); countDown( cnt ); print(100)

Symbol table:
cnt -> 0
v1 -> (1, int)
v2 -> (2, int)
v3 -> (3, int)

Heap table:
1 -> 2
2 -> 3
3 -> 4

Output:

File table:

------------------------
ID: 2
Execution stack:
writeHeap(v1, readHeap(v1) * 10)
print(readHeap(v1)); countDown( cnt )

Symbol table:
cnt -> 0
v1 -> (1, int)
v2 -> (2, int)
v3 -> (3, int)

Heap table:
1 -> 2
2 -> 3
3 -> 4

Output:

File table:

------------------------
ID: 1
Execution stack:
fork(writeHeap(v3, readHeap(v3) * 10); print(readHeap(v3)); countDown( cnt )); await(cnt); print(100); countDown( cnt ); print(100)

Symbol table:
cnt -> 0
v1 -> (1, int)
v2 -> (2, int)
v3 -> (3, int)

Heap table:
1 -> 20
2 -> 3
3 -> 4

Output:

File table:

------------------------
ID: 2
Execution stack:
print(readHeap(v1)); countDown( cnt )

Symbol table:
cnt -> 0
v1 -> (1, int)
v2 -> (2, int)
v3 -> (3, int)

Heap table:
1 -> 20
2 -> 3
3 -> 4

Output:

File table:

------------------------
ID: 3
Execution stack:
writeHeap(v2, readHeap(v2) * 10); print(readHeap(v2)); countDown( cnt )

Symbol table:
cnt -> 0
v1 -> (1, int)
v2 -> (2, int)
v3 -> (3, int)

Heap table:
1 -> 20
2 -> 3
3 -> 4

Output:

File table:

------------------------
ID: 1
Execution stack:
fork(writeHeap(v3, readHeap(v3) * 10); print(readHeap(v3)); countDown( cnt )); await(cnt); print(100); countDown( cnt ); print(100)

Symbol table:
cnt -> 0
v1 -> (1, int)
v2 -> (2, int)
v3 -> (3, int)

Heap table:
1 -> 20
2 -> 3
3 -> 4

Output:

File table:

------------------------
ID: 2
Execution stack:
print(readHeap(v1)); countDown( cnt )

Symbol table:
cnt -> 0
v1 -> (1, int)
v2 -> (2, int)
v3 -> (3, int)

Heap table:
1 -> 20
2 -> 3
3 -> 4

Output:

File table:

------------------------
ID: 3
Execution stack:
writeHeap(v2, readHeap(v2) * 10); print(readHeap(v2)); countDown( cnt )

Symbol table:
cnt -> 0
v1 -> (1, int)
v2 -> (2, int)
v3 -> (3, int)

Heap table:
1 -> 20
2 -> 3
3 -> 4

Output:

File table:

------------------------
ID: 1
Execution stack:
fork(writeHeap(v3, readHeap(v3) * 10); print(readHeap(v3)); countDown( cnt ))
await(cnt); print(100); countDown( cnt ); print(100)

Symbol table:
cnt -> 0
v1 -> (1, int)
v2 -> (2, int)
v3 -> (3, int)

Heap table:
1 -> 20
2 -> 3
3 -> 4

Output:

File table:

------------------------
ID: 2
Execution stack:
print(readHeap(v1))
countDown( cnt )

Symbol table:
cnt -> 0
v1 -> (1, int)
v2 -> (2, int)
v3 -> (3, int)

Heap table:
1 -> 20
2 -> 3
3 -> 4

Output:

File table:

------------------------
ID: 3
Execution stack:
writeHeap(v2, readHeap(v2) * 10)
print(readHeap(v2)); countDown( cnt )

Symbol table:
cnt -> 0
v1 -> (1, int)
v2 -> (2, int)
v3 -> (3, int)

Heap table:
1 -> 20
2 -> 3
3 -> 4

Output:

File table:

------------------------
ID: 1
Execution stack:
fork(writeHeap(v3, readHeap(v3) * 10); print(readHeap(v3)); countDown( cnt ))
await(cnt); print(100); countDown( cnt ); print(100)

Symbol table:
cnt -> 0
v1 -> (1, int)
v2 -> (2, int)
v3 -> (3, int)

Heap table:
1 -> 20
2 -> 3
3 -> 4

Output:

File table:

------------------------
ID: 2
Execution stack:
print(readHeap(v1))
countDown( cnt )

Symbol table:
cnt -> 0
v1 -> (1, int)
v2 -> (2, int)
v3 -> (3, int)

Heap table:
1 -> 20
2 -> 3
3 -> 4

Output:

File table:

------------------------
ID: 3
Execution stack:
writeHeap(v2, readHeap(v2) * 10)
print(readHeap(v2)); countDown( cnt )

Symbol table:
cnt -> 0
v1 -> (1, int)
v2 -> (2, int)
v3 -> (3, int)

Heap table:
1 -> 20
2 -> 3
3 -> 4

Output:

File table:

------------------------
ID: 1
Execution stack:
await(cnt); print(100); countDown( cnt ); print(100)

Symbol table:
cnt -> 0
v1 -> (1, int)
v2 -> (2, int)
v3 -> (3, int)

Heap table:
1 -> 20
2 -> 30
3 -> 4

Output:
20

File table:

------------------------
ID: 2
Execution stack:
countDown( cnt )

Symbol table:
cnt -> 0
v1 -> (1, int)
v2 -> (2, int)
v3 -> (3, int)

Heap table:
1 -> 20
2 -> 30
3 -> 4

Output:
20

File table:

------------------------
ID: 3
Execution stack:
print(readHeap(v2)); countDown( cnt )

Symbol table:
cnt -> 0
v1 -> (1, int)
v2 -> (2, int)
v3 -> (3, int)

Heap table:
1 -> 20
2 -> 30
3 -> 4

Output:
20

File table:

------------------------
ID: 4
Execution stack:
writeHeap(v3, readHeap(v3) * 10); print(readHeap(v3)); countDown( cnt )

Symbol table:
cnt -> 0
v1 -> (1, int)
v2 -> (2, int)
v3 -> (3, int)

Heap table:
1 -> 20
2 -> 30
3 -> 4

Output:
20

File table:

------------------------
ID: 1
Execution stack:
await(cnt); print(100); countDown( cnt ); print(100)

Symbol table:
cnt -> 0
v1 -> (1, int)
v2 -> (2, int)
v3 -> (3, int)

Heap table:
1 -> 20
2 -> 30
3 -> 4

Output:
20

File table:

------------------------
ID: 2
Execution stack:
countDown( cnt )

Symbol table:
cnt -> 0
v1 -> (1, int)
v2 -> (2, int)
v3 -> (3, int)

Heap table:
1 -> 20
2 -> 30
3 -> 4

Output:
20

File table:

------------------------
ID: 3
Execution stack:
print(readHeap(v2)); countDown( cnt )

Symbol table:
cnt -> 0
v1 -> (1, int)
v2 -> (2, int)
v3 -> (3, int)

Heap table:
1 -> 20
2 -> 30
3 -> 4

Output:
20

File table:

------------------------
ID: 4
Execution stack:
writeHeap(v3, readHeap(v3) * 10); print(readHeap(v3)); countDown( cnt )

Symbol table:
cnt -> 0
v1 -> (1, int)
v2 -> (2, int)
v3 -> (3, int)

Heap table:
1 -> 20
2 -> 30
3 -> 4

Output:
20

File table:

------------------------
ID: 1
Execution stack:
await(cnt)
print(100); countDown( cnt ); print(100)

Symbol table:
cnt -> 0
v1 -> (1, int)
v2 -> (2, int)
v3 -> (3, int)

Heap table:
1 -> 20
2 -> 30
3 -> 4

Output:
20
2

File table:

------------------------
ID: 2
Execution stack:

Symbol table:
cnt -> 0
v1 -> (1, int)
v2 -> (2, int)
v3 -> (3, int)

Heap table:
1 -> 20
2 -> 30
3 -> 4

Output:
20
2

File table:

------------------------
ID: 3
Execution stack:
print(readHeap(v2))
countDown( cnt )

Symbol table:
cnt -> 0
v1 -> (1, int)
v2 -> (2, int)
v3 -> (3, int)

Heap table:
1 -> 20
2 -> 30
3 -> 4

Output:
20
2

File table:

------------------------
ID: 4
Execution stack:
writeHeap(v3, readHeap(v3) * 10)
print(readHeap(v3)); countDown( cnt )

Symbol table:
cnt -> 0
v1 -> (1, int)
v2 -> (2, int)
v3 -> (3, int)

Heap table:
1 -> 20
2 -> 30
3 -> 4

Output:
20
2

File table:

------------------------
ID: 1
Execution stack:
await(cnt)
print(100); countDown( cnt ); print(100)

Symbol table:
cnt -> 0
v1 -> (1, int)
v2 -> (2, int)
v3 -> (3, int)

Heap table:
1 -> 20
2 -> 30
3 -> 4

Output:
20
2

File table:

------------------------
ID: 3
Execution stack:
print(readHeap(v2))
countDown( cnt )

Symbol table:
cnt -> 0
v1 -> (1, int)
v2 -> (2, int)
v3 -> (3, int)

Heap table:
1 -> 20
2 -> 30
3 -> 4

Output:
20
2

File table:

------------------------
ID: 4
Execution stack:
writeHeap(v3, readHeap(v3) * 10)
print(readHeap(v3)); countDown( cnt )

Symbol table:
cnt -> 0
v1 -> (1, int)
v2 -> (2, int)
v3 -> (3, int)

Heap table:
1 -> 20
2 -> 30
3 -> 4

Output:
20
2

File table:

------------------------
ID: 1
Execution stack:
await(cnt)
print(100); countDown( cnt ); print(100)

Symbol table:
cnt -> 0
v1 -> (1, int)
v2 -> (2, int)
v3 -> (3, int)

Heap table:
1 -> 20
2 -> 30
3 -> 40

Output:
20
2
30

File table:

------------------------
ID: 3
Execution stack:
countDown( cnt )

Symbol table:
cnt -> 0
v1 -> (1, int)
v2 -> (2, int)
v3 -> (3, int)

Heap table:
1 -> 20
2 -> 30
3 -> 40

Output:
20
2
30

File table:

------------------------
ID: 4
Execution stack:
print(readHeap(v3)); countDown( cnt )

Symbol table:
cnt -> 0
v1 -> (1, int)
v2 -> (2, int)
v3 -> (3, int)

Heap table:
1 -> 20
2 -> 30
3 -> 40

Output:
20
2
30

File table:

------------------------
ID: 1
Execution stack:
await(cnt)
print(100); countDown( cnt ); print(100)

Symbol table:
cnt -> 0
v1 -> (1, int)
v2 -> (2, int)
v3 -> (3, int)

Heap table:
1 -> 20
2 -> 30
3 -> 40

Output:
20
2
30

File table:

------------------------
ID: 3
Execution stack:
countDown( cnt )

Symbol table:
cnt -> 0
v1 -> (1, int)
v2 -> (2, int)
v3 -> (3, int)

Heap table:
1 -> 20
2 -> 30
3 -> 40

Output:
20
2
30

File table:

------------------------
ID: 4
Execution stack:
print(readHeap(v3)); countDown( cnt )

Symbol table:
cnt -> 0
v1 -> (1, int)
v2 -> (2, int)
v3 -> (3, int)

Heap table:
1 -> 20
2 -> 30
3 -> 40

Output:
20
2
30

File table:

------------------------
ID: 1
Execution stack:
await(cnt)
print(100); countDown( cnt ); print(100)

Symbol table:
cnt -> 0
v1 -> (1, int)
v2 -> (2, int)
v3 -> (3, int)

Heap table:
1 -> 20
2 -> 30
3 -> 40

Output:
20
2
30
3

File table:

------------------------
ID: 3
Execution stack:

Symbol table:
cnt -> 0
v1 -> (1, int)
v2 -> (2, int)
v3 -> (3, int)

Heap table:
1 -> 20
2 -> 30
3 -> 40

Output:
20
2
30
3

File table:

------------------------
ID: 4
Execution stack:
print(readHeap(v3))
countDown( cnt )

Symbol table:
cnt -> 0
v1 -> (1, int)
v2 -> (2, int)
v3 -> (3, int)

Heap table:
1 -> 20
2 -> 30
3 -> 40

Output:
20
2
30
3

File table:

------------------------
ID: 1
Execution stack:
await(cnt)
print(100); countDown( cnt ); print(100)

Symbol table:
cnt -> 0
v1 -> (1, int)
v2 -> (2, int)
v3 -> (3, int)

Heap table:
1 -> 20
2 -> 30
3 -> 40

Output:
20
2
30
3

File table:

------------------------
ID: 4
Execution stack:
print(readHeap(v3))
countDown( cnt )

Symbol table:
cnt -> 0
v1 -> (1, int)
v2 -> (2, int)
v3 -> (3, int)

Heap table:
1 -> 20
2 -> 30
3 -> 40

Output:
20
2
30
3

File table:

------------------------
ID: 1
Execution stack:
await(cnt)
print(100); countDown( cnt ); print(100)

Symbol table:
cnt -> 0
v1 -> (1, int)
v2 -> (2, int)
v3 -> (3, int)

Heap table:
1 -> 20
2 -> 30
3 -> 40

Output:
20
2
30
3
40

File table:

------------------------
ID: 4
Execution stack:
countDown( cnt )

Symbol table:
cnt -> 0
v1 -> (1, int)
v2 -> (2, int)
v3 -> (3, int)

Heap table:
1 -> 20
2 -> 30
3 -> 40

Output:
20
2
30
3
40

File table:

------------------------
ID: 1
Execution stack:
await(cnt)
print(100); countDown( cnt ); print(100)

Symbol table:
cnt -> 0
v1 -> (1, int)
v2 -> (2, int)
v3 -> (3, int)

Heap table:
1 -> 20
2 -> 30
3 -> 40

Output:
20
2
30
3
40

File table:

------------------------
ID: 4
Execution stack:
countDown( cnt )

Symbol table:
cnt -> 0
v1 -> (1, int)
v2 -> (2, int)
v3 -> (3, int)

Heap table:
1 -> 20
2 -> 30
3 -> 40

Output:
20
2
30
3
40

File table:

------------------------
ID: 1
Execution stack:
await(cnt)
print(100); countDown( cnt ); print(100)

Symbol table:
cnt -> 0
v1 -> (1, int)
v2 -> (2, int)
v3 -> (3, int)

Heap table:
1 -> 20
2 -> 30
3 -> 40

Output:
20
2
30
3
40
4

File table:

------------------------
ID: 4
Execution stack:

Symbol table:
cnt -> 0
v1 -> (1, int)
v2 -> (2, int)
v3 -> (3, int)

Heap table:
1 -> 20
2 -> 30
3 -> 40

Output:
20
2
30
3
40
4

File table:

------------------------
ID: 1
Execution stack:
await(cnt)
print(100); countDown( cnt ); print(100)

Symbol table:
cnt -> 0
v1 -> (1, int)
v2 -> (2, int)
v3 -> (3, int)

Heap table:
1 -> 20
2 -> 30
3 -> 40

Output:
20
2
30
3
40
4

File table:

------------------------
ID: 1
Execution stack:
print(100); countDown( cnt ); print(100)

Symbol table:
cnt -> 0
v1 -> (1, int)
v2 -> (2, int)
v3 -> (3, int)

Heap table:
1 -> 20
2 -> 30
3 -> 40

Output:
20
2
30
3
40
4

File table:

------------------------
ID: 1
Execution stack:
print(100); countDown( cnt ); print(100)

Symbol table:
cnt -> 0
v1 -> (1, int)
v2 -> (2, int)
v3 -> (3, int)

Heap table:
1 -> 20
2 -> 30
3 -> 40

Output:
20
2
30
3
40
4

File table:

------------------------
ID: 1
Execution stack:
print(100)
countDown( cnt ); print(100)

Symbol table:
cnt -> 0
v1 -> (1, int)
v2 -> (2, int)
v3 -> (3, int)

Heap table:
1 -> 20
2 -> 30
3 -> 40

Output:
20
2
30
3
40
4

File table:

------------------------
ID: 1
Execution stack:
print(100)
countDown( cnt ); print(100)

Symbol table:
cnt -> 0
v1 -> (1, int)
v2 -> (2, int)
v3 -> (3, int)

Heap table:
1 -> 20
2 -> 30
3 -> 40

Output:
20
2
30
3
40
4

File table:

------------------------
ID: 1
Execution stack:
countDown( cnt ); print(100)

Symbol table:
cnt -> 0
v1 -> (1, int)
v2 -> (2, int)
v3 -> (3, int)

Heap table:
1 -> 20
2 -> 30
3 -> 40

Output:
20
2
30
3
40
4
100

File table:

------------------------
ID: 1
Execution stack:
countDown( cnt ); print(100)

Symbol table:
cnt -> 0
v1 -> (1, int)
v2 -> (2, int)
v3 -> (3, int)

Heap table:
1 -> 20
2 -> 30
3 -> 40

Output:
20
2
30
3
40
4
100

File table:

------------------------
ID: 1
Execution stack:
countDown( cnt )
print(100)

Symbol table:
cnt -> 0
v1 -> (1, int)
v2 -> (2, int)
v3 -> (3, int)

Heap table:
1 -> 20
2 -> 30
3 -> 40

Output:
20
2
30
3
40
4
100

File table:

------------------------
ID: 1
Execution stack:
countDown( cnt )
print(100)

Symbol table:
cnt -> 0
v1 -> (1, int)
v2 -> (2, int)
v3 -> (3, int)

Heap table:
1 -> 20
2 -> 30
3 -> 40

Output:
20
2
30
3
40
4
100

File table:

------------------------
ID: 1
Execution stack:
print(100)

Symbol table:
cnt -> 0
v1 -> (1, int)
v2 -> (2, int)
v3 -> (3, int)

Heap table:
1 -> 20
2 -> 30
3 -> 40

Output:
20
2
30
3
40
4
100
1

File table:

------------------------
ID: 1
Execution stack:
print(100)

Symbol table:
cnt -> 0
v1 -> (1, int)
v2 -> (2, int)
v3 -> (3, int)

Heap table:
1 -> 20
2 -> 30
3 -> 40

Output:
20
2
30
3
40
4
100
1

File table:

------------------------
ID: 1
Execution stack:

Symbol table:
cnt -> 0
v1 -> (1, int)
v2 -> (2, int)
v3 -> (3, int)

Heap table:
1 -> 20
2 -> 30
3 -> 40

Output:
20
2
30
3
40
4
100
1
100

File table:

------------------------
ID: 1
Execution stack:
int cnt; Ref(int) v1; Ref(int) v2; Ref(int) v3; new(v1, 2); new(v2, 3); new(v3, 4); newLatch(cnt, readHeap(v2)); fork(writeHeap(v1, readHeap(v1) * 10); print(readHeap(v1)); countDown( cnt )); fork(writeHeap(v2, readHeap(v2) * 10); print(readHeap(v2)); countDown( cnt )); fork(writeHeap(v3, readHeap(v3) * 10); print(readHeap(v3)); countDown( cnt )); await(cnt); print(100); countDown( cnt ); print(100)

Symbol table:

Heap table:

Output:

File table:

------------------------
ID: 1
Execution stack:
int cnt
Ref(int) v1; Ref(int) v2; Ref(int) v3; new(v1, 2); new(v2, 3); new(v3, 4); newLatch(cnt, readHeap(v2)); fork(writeHeap(v1, readHeap(v1) * 10); print(readHeap(v1)); countDown( cnt )); fork(writeHeap(v2, readHeap(v2) * 10); print(readHeap(v2)); countDown( cnt )); fork(writeHeap(v3, readHeap(v3) * 10); print(readHeap(v3)); countDown( cnt )); await(cnt); print(100); countDown( cnt ); print(100)

Symbol table:

Heap table:

Output:

File table:

------------------------
ID: 1
Execution stack:
int cnt
Ref(int) v1; Ref(int) v2; Ref(int) v3; new(v1, 2); new(v2, 3); new(v3, 4); newLatch(cnt, readHeap(v2)); fork(writeHeap(v1, readHeap(v1) * 10); print(readHeap(v1)); countDown( cnt )); fork(writeHeap(v2, readHeap(v2) * 10); print(readHeap(v2)); countDown( cnt )); fork(writeHeap(v3, readHeap(v3) * 10); print(readHeap(v3)); countDown( cnt )); await(cnt); print(100); countDown( cnt ); print(100)

Symbol table:

Heap table:

Output:

File table:

------------------------
ID: 1
Execution stack:
Ref(int) v1; Ref(int) v2; Ref(int) v3; new(v1, 2); new(v2, 3); new(v3, 4); newLatch(cnt, readHeap(v2)); fork(writeHeap(v1, readHeap(v1) * 10); print(readHeap(v1)); countDown( cnt )); fork(writeHeap(v2, readHeap(v2) * 10); print(readHeap(v2)); countDown( cnt )); fork(writeHeap(v3, readHeap(v3) * 10); print(readHeap(v3)); countDown( cnt )); await(cnt); print(100); countDown( cnt ); print(100)

Symbol table:
cnt -> 0

Heap table:

Output:

File table:

------------------------
ID: 1
Execution stack:
Ref(int) v1; Ref(int) v2; Ref(int) v3; new(v1, 2); new(v2, 3); new(v3, 4); newLatch(cnt, readHeap(v2)); fork(writeHeap(v1, readHeap(v1) * 10); print(readHeap(v1)); countDown( cnt )); fork(writeHeap(v2, readHeap(v2) * 10); print(readHeap(v2)); countDown( cnt )); fork(writeHeap(v3, readHeap(v3) * 10); print(readHeap(v3)); countDown( cnt )); await(cnt); print(100); countDown( cnt ); print(100)

Symbol table:
cnt -> 0

Heap table:

Output:

File table:

------------------------
ID: 1
Execution stack:
Ref(int) v1
Ref(int) v2; Ref(int) v3; new(v1, 2); new(v2, 3); new(v3, 4); newLatch(cnt, readHeap(v2)); fork(writeHeap(v1, readHeap(v1) * 10); print(readHeap(v1)); countDown( cnt )); fork(writeHeap(v2, readHeap(v2) * 10); print(readHeap(v2)); countDown( cnt )); fork(writeHeap(v3, readHeap(v3) * 10); print(readHeap(v3)); countDown( cnt )); await(cnt); print(100); countDown( cnt ); print(100)

Symbol table:
cnt -> 0

Heap table:

Output:

File table:

------------------------
ID: 1
Execution stack:
Ref(int) v1
Ref(int) v2; Ref(int) v3; new(v1, 2); new(v2, 3); new(v3, 4); newLatch(cnt, readHeap(v2)); fork(writeHeap(v1, readHeap(v1) * 10); print(readHeap(v1)); countDown( cnt )); fork(writeHeap(v2, readHeap(v2) * 10); print(readHeap(v2)); countDown( cnt )); fork(writeHeap(v3, readHeap(v3) * 10); print(readHeap(v3)); countDown( cnt )); await(cnt); print(100); countDown( cnt ); print(100)

Symbol table:
cnt -> 0

Heap table:

Output:

File table:

------------------------
ID: 1
Execution stack:
Ref(int) v2; Ref(int) v3; new(v1, 2); new(v2, 3); new(v3, 4); newLatch(cnt, readHeap(v2)); fork(writeHeap(v1, readHeap(v1) * 10); print(readHeap(v1)); countDown( cnt )); fork(writeHeap(v2, readHeap(v2) * 10); print(readHeap(v2)); countDown( cnt )); fork(writeHeap(v3, readHeap(v3) * 10); print(readHeap(v3)); countDown( cnt )); await(cnt); print(100); countDown( cnt ); print(100)

Symbol table:
cnt -> 0
v1 -> (1, int)

Heap table:

Output:

File table:

------------------------
ID: 1
Execution stack:
Ref(int) v2; Ref(int) v3; new(v1, 2); new(v2, 3); new(v3, 4); newLatch(cnt, readHeap(v2)); fork(writeHeap(v1, readHeap(v1) * 10); print(readHeap(v1)); countDown( cnt )); fork(writeHeap(v2, readHeap(v2) * 10); print(readHeap(v2)); countDown( cnt )); fork(writeHeap(v3, readHeap(v3) * 10); print(readHeap(v3)); countDown( cnt )); await(cnt); print(100); countDown( cnt ); print(100)

Symbol table:
cnt -> 0
v1 -> (1, int)

Heap table:

Output:

File table:

------------------------
ID: 1
Execution stack:
Ref(int) v2
Ref(int) v3; new(v1, 2); new(v2, 3); new(v3, 4); newLatch(cnt, readHeap(v2)); fork(writeHeap(v1, readHeap(v1) * 10); print(readHeap(v1)); countDown( cnt )); fork(writeHeap(v2, readHeap(v2) * 10); print(readHeap(v2)); countDown( cnt )); fork(writeHeap(v3, readHeap(v3) * 10); print(readHeap(v3)); countDown( cnt )); await(cnt); print(100); countDown( cnt ); print(100)

Symbol table:
cnt -> 0
v1 -> (1, int)

Heap table:

Output:

File table:

------------------------
ID: 1
Execution stack:
Ref(int) v2
Ref(int) v3; new(v1, 2); new(v2, 3); new(v3, 4); newLatch(cnt, readHeap(v2)); fork(writeHeap(v1, readHeap(v1) * 10); print(readHeap(v1)); countDown( cnt )); fork(writeHeap(v2, readHeap(v2) * 10); print(readHeap(v2)); countDown( cnt )); fork(writeHeap(v3, readHeap(v3) * 10); print(readHeap(v3)); countDown( cnt )); await(cnt); print(100); countDown( cnt ); print(100)

Symbol table:
cnt -> 0
v1 -> (1, int)

Heap table:

Output:

File table:

------------------------
ID: 1
Execution stack:
Ref(int) v3; new(v1, 2); new(v2, 3); new(v3, 4); newLatch(cnt, readHeap(v2)); fork(writeHeap(v1, readHeap(v1) * 10); print(readHeap(v1)); countDown( cnt )); fork(writeHeap(v2, readHeap(v2) * 10); print(readHeap(v2)); countDown( cnt )); fork(writeHeap(v3, readHeap(v3) * 10); print(readHeap(v3)); countDown( cnt )); await(cnt); print(100); countDown( cnt ); print(100)

Symbol table:
cnt -> 0
v1 -> (1, int)
v2 -> (1, int)

Heap table:

Output:

File table:

------------------------
ID: 1
Execution stack:
Ref(int) v3; new(v1, 2); new(v2, 3); new(v3, 4); newLatch(cnt, readHeap(v2)); fork(writeHeap(v1, readHeap(v1) * 10); print(readHeap(v1)); countDown( cnt )); fork(writeHeap(v2, readHeap(v2) * 10); print(readHeap(v2)); countDown( cnt )); fork(writeHeap(v3, readHeap(v3) * 10); print(readHeap(v3)); countDown( cnt )); await(cnt); print(100); countDown( cnt ); print(100)

Symbol table:
cnt -> 0
v1 -> (1, int)
v2 -> (1, int)

Heap table:

Output:

File table:

------------------------
ID: 1
Execution stack:
Ref(int) v3
new(v1, 2); new(v2, 3); new(v3, 4); newLatch(cnt, readHeap(v2)); fork(writeHeap(v1, readHeap(v1) * 10); print(readHeap(v1)); countDown( cnt )); fork(writeHeap(v2, readHeap(v2) * 10); print(readHeap(v2)); countDown( cnt )); fork(writeHeap(v3, readHeap(v3) * 10); print(readHeap(v3)); countDown( cnt )); await(cnt); print(100); countDown( cnt ); print(100)

Symbol table:
cnt -> 0
v1 -> (1, int)
v2 -> (1, int)

Heap table:

Output:

File table:

------------------------
ID: 1
Execution stack:
Ref(int) v3
new(v1, 2); new(v2, 3); new(v3, 4); newLatch(cnt, readHeap(v2)); fork(writeHeap(v1, readHeap(v1) * 10); print(readHeap(v1)); countDown( cnt )); fork(writeHeap(v2, readHeap(v2) * 10); print(readHeap(v2)); countDown( cnt )); fork(writeHeap(v3, readHeap(v3) * 10); print(readHeap(v3)); countDown( cnt )); await(cnt); print(100); countDown( cnt ); print(100)

Symbol table:
cnt -> 0
v1 -> (1, int)
v2 -> (1, int)

Heap table:

Output:

File table:

------------------------
ID: 1
Execution stack:
new(v1, 2); new(v2, 3); new(v3, 4); newLatch(cnt, readHeap(v2)); fork(writeHeap(v1, readHeap(v1) * 10); print(readHeap(v1)); countDown( cnt )); fork(writeHeap(v2, readHeap(v2) * 10); print(readHeap(v2)); countDown( cnt )); fork(writeHeap(v3, readHeap(v3) * 10); print(readHeap(v3)); countDown( cnt )); await(cnt); print(100); countDown( cnt ); print(100)

Symbol table:
cnt -> 0
v1 -> (1, int)
v2 -> (1, int)
v3 -> (1, int)

Heap table:

Output:

File table:

------------------------
ID: 1
Execution stack:
new(v1, 2); new(v2, 3); new(v3, 4); newLatch(cnt, readHeap(v2)); fork(writeHeap(v1, readHeap(v1) * 10); print(readHeap(v1)); countDown( cnt )); fork(writeHeap(v2, readHeap(v2) * 10); print(readHeap(v2)); countDown( cnt )); fork(writeHeap(v3, readHeap(v3) * 10); print(readHeap(v3)); countDown( cnt )); await(cnt); print(100); countDown( cnt ); print(100)

Symbol table:
cnt -> 0
v1 -> (1, int)
v2 -> (1, int)
v3 -> (1, int)

Heap table:

Output:

File table:

------------------------
ID: 1
Execution stack:
new(v1, 2)
new(v2, 3); new(v3, 4); newLatch(cnt, readHeap(v2)); fork(writeHeap(v1, readHeap(v1) * 10); print(readHeap(v1)); countDown( cnt )); fork(writeHeap(v2, readHeap(v2) * 10); print(readHeap(v2)); countDown( cnt )); fork(writeHeap(v3, readHeap(v3) * 10); print(readHeap(v3)); countDown( cnt )); await(cnt); print(100); countDown( cnt ); print(100)

Symbol table:
cnt -> 0
v1 -> (1, int)
v2 -> (1, int)
v3 -> (1, int)

Heap table:

Output:

File table:

------------------------
ID: 1
Execution stack:
new(v1, 2)
new(v2, 3); new(v3, 4); newLatch(cnt, readHeap(v2)); fork(writeHeap(v1, readHeap(v1) * 10); print(readHeap(v1)); countDown( cnt )); fork(writeHeap(v2, readHeap(v2) * 10); print(readHeap(v2)); countDown( cnt )); fork(writeHeap(v3, readHeap(v3) * 10); print(readHeap(v3)); countDown( cnt )); await(cnt); print(100); countDown( cnt ); print(100)

Symbol table:
cnt -> 0
v1 -> (1, int)
v2 -> (1, int)
v3 -> (1, int)

Heap table:

Output:

File table:

------------------------
ID: 1
Execution stack:
new(v2, 3); new(v3, 4); newLatch(cnt, readHeap(v2)); fork(writeHeap(v1, readHeap(v1) * 10); print(readHeap(v1)); countDown( cnt )); fork(writeHeap(v2, readHeap(v2) * 10); print(readHeap(v2)); countDown( cnt )); fork(writeHeap(v3, readHeap(v3) * 10); print(readHeap(v3)); countDown( cnt )); await(cnt); print(100); countDown( cnt ); print(100)

Symbol table:
cnt -> 0
v1 -> (1, int)
v2 -> (1, int)
v3 -> (1, int)

Heap table:
1 -> 2

Output:

File table:

------------------------
ID: 1
Execution stack:
new(v2, 3); new(v3, 4); newLatch(cnt, readHeap(v2)); fork(writeHeap(v1, readHeap(v1) * 10); print(readHeap(v1)); countDown( cnt )); fork(writeHeap(v2, readHeap(v2) * 10); print(readHeap(v2)); countDown( cnt )); fork(writeHeap(v3, readHeap(v3) * 10); print(readHeap(v3)); countDown( cnt )); await(cnt); print(100); countDown( cnt ); print(100)

Symbol table:
cnt -> 0
v1 -> (1, int)
v2 -> (1, int)
v3 -> (1, int)

Heap table:
1 -> 2

Output:

File table:

------------------------
ID: 1
Execution stack:
new(v2, 3)
new(v3, 4); newLatch(cnt, readHeap(v2)); fork(writeHeap(v1, readHeap(v1) * 10); print(readHeap(v1)); countDown( cnt )); fork(writeHeap(v2, readHeap(v2) * 10); print(readHeap(v2)); countDown( cnt )); fork(writeHeap(v3, readHeap(v3) * 10); print(readHeap(v3)); countDown( cnt )); await(cnt); print(100); countDown( cnt ); print(100)

Symbol table:
cnt -> 0
v1 -> (1, int)
v2 -> (1, int)
v3 -> (1, int)

Heap table:
1 -> 2

Output:

File table:

------------------------
ID: 1
Execution stack:
new(v2, 3)
new(v3, 4); newLatch(cnt, readHeap(v2)); fork(writeHeap(v1, readHeap(v1) * 10); print(readHeap(v1)); countDown( cnt )); fork(writeHeap(v2, readHeap(v2) * 10); print(readHeap(v2)); countDown( cnt )); fork(writeHeap(v3, readHeap(v3) * 10); print(readHeap(v3)); countDown( cnt )); await(cnt); print(100); countDown( cnt ); print(100)

Symbol table:
cnt -> 0
v1 -> (1, int)
v2 -> (1, int)
v3 -> (1, int)

Heap table:
1 -> 2

Output:

File table:

------------------------
ID: 1
Execution stack:
new(v3, 4); newLatch(cnt, readHeap(v2)); fork(writeHeap(v1, readHeap(v1) * 10); print(readHeap(v1)); countDown( cnt )); fork(writeHeap(v2, readHeap(v2) * 10); print(readHeap(v2)); countDown( cnt )); fork(writeHeap(v3, readHeap(v3) * 10); print(readHeap(v3)); countDown( cnt )); await(cnt); print(100); countDown( cnt ); print(100)

Symbol table:
cnt -> 0
v1 -> (1, int)
v2 -> (2, int)
v3 -> (1, int)

Heap table:
1 -> 2
2 -> 3

Output:

File table:

------------------------
ID: 1
Execution stack:
new(v3, 4); newLatch(cnt, readHeap(v2)); fork(writeHeap(v1, readHeap(v1) * 10); print(readHeap(v1)); countDown( cnt )); fork(writeHeap(v2, readHeap(v2) * 10); print(readHeap(v2)); countDown( cnt )); fork(writeHeap(v3, readHeap(v3) * 10); print(readHeap(v3)); countDown( cnt )); await(cnt); print(100); countDown( cnt ); print(100)

Symbol table:
cnt -> 0
v1 -> (1, int)
v2 -> (2, int)
v3 -> (1, int)

Heap table:
1 -> 2
2 -> 3

Output:

File table:

------------------------
ID: 1
Execution stack:
new(v3, 4)
newLatch(cnt, readHeap(v2)); fork(writeHeap(v1, readHeap(v1) * 10); print(readHeap(v1)); countDown( cnt )); fork(writeHeap(v2, readHeap(v2) * 10); print(readHeap(v2)); countDown( cnt )); fork(writeHeap(v3, readHeap(v3) * 10); print(readHeap(v3)); countDown( cnt )); await(cnt); print(100); countDown( cnt ); print(100)

Symbol table:
cnt -> 0
v1 -> (1, int)
v2 -> (2, int)
v3 -> (1, int)

Heap table:
1 -> 2
2 -> 3

Output:

File table:

------------------------
ID: 1
Execution stack:
new(v3, 4)
newLatch(cnt, readHeap(v2)); fork(writeHeap(v1, readHeap(v1) * 10); print(readHeap(v1)); countDown( cnt )); fork(writeHeap(v2, readHeap(v2) * 10); print(readHeap(v2)); countDown( cnt )); fork(writeHeap(v3, readHeap(v3) * 10); print(readHeap(v3)); countDown( cnt )); await(cnt); print(100); countDown( cnt ); print(100)

Symbol table:
cnt -> 0
v1 -> (1, int)
v2 -> (2, int)
v3 -> (1, int)

Heap table:
1 -> 2
2 -> 3

Output:

File table:

------------------------
ID: 1
Execution stack:
newLatch(cnt, readHeap(v2)); fork(writeHeap(v1, readHeap(v1) * 10); print(readHeap(v1)); countDown( cnt )); fork(writeHeap(v2, readHeap(v2) * 10); print(readHeap(v2)); countDown( cnt )); fork(writeHeap(v3, readHeap(v3) * 10); print(readHeap(v3)); countDown( cnt )); await(cnt); print(100); countDown( cnt ); print(100)

Symbol table:
cnt -> 0
v1 -> (1, int)
v2 -> (2, int)
v3 -> (3, int)

Heap table:
1 -> 2
2 -> 3
3 -> 4

Output:

File table:

------------------------
ID: 1
Execution stack:
newLatch(cnt, readHeap(v2)); fork(writeHeap(v1, readHeap(v1) * 10); print(readHeap(v1)); countDown( cnt )); fork(writeHeap(v2, readHeap(v2) * 10); print(readHeap(v2)); countDown( cnt )); fork(writeHeap(v3, readHeap(v3) * 10); print(readHeap(v3)); countDown( cnt )); await(cnt); print(100); countDown( cnt ); print(100)

Symbol table:
cnt -> 0
v1 -> (1, int)
v2 -> (2, int)
v3 -> (3, int)

Heap table:
1 -> 2
2 -> 3
3 -> 4

Output:

File table:

------------------------
ID: 1
Execution stack:
newLatch(cnt, readHeap(v2))
fork(writeHeap(v1, readHeap(v1) * 10); print(readHeap(v1)); countDown( cnt )); fork(writeHeap(v2, readHeap(v2) * 10); print(readHeap(v2)); countDown( cnt )); fork(writeHeap(v3, readHeap(v3) * 10); print(readHeap(v3)); countDown( cnt )); await(cnt); print(100); countDown( cnt ); print(100)

Symbol table:
cnt -> 0
v1 -> (1, int)
v2 -> (2, int)
v3 -> (3, int)

Heap table:
1 -> 2
2 -> 3
3 -> 4

Output:

File table:

------------------------
ID: 1
Execution stack:
newLatch(cnt, readHeap(v2))
fork(writeHeap(v1, readHeap(v1) * 10); print(readHeap(v1)); countDown( cnt )); fork(writeHeap(v2, readHeap(v2) * 10); print(readHeap(v2)); countDown( cnt )); fork(writeHeap(v3, readHeap(v3) * 10); print(readHeap(v3)); countDown( cnt )); await(cnt); print(100); countDown( cnt ); print(100)

Symbol table:
cnt -> 0
v1 -> (1, int)
v2 -> (2, int)
v3 -> (3, int)

Heap table:
1 -> 2
2 -> 3
3 -> 4

Output:

File table:

------------------------
ID: 1
Execution stack:
fork(writeHeap(v1, readHeap(v1) * 10); print(readHeap(v1)); countDown( cnt )); fork(writeHeap(v2, readHeap(v2) * 10); print(readHeap(v2)); countDown( cnt )); fork(writeHeap(v3, readHeap(v3) * 10); print(readHeap(v3)); countDown( cnt )); await(cnt); print(100); countDown( cnt ); print(100)

Symbol table:
cnt -> 1
v1 -> (1, int)
v2 -> (2, int)
v3 -> (3, int)

Heap table:
1 -> 2
2 -> 3
3 -> 4

Output:

File table:

------------------------
ID: 1
Execution stack:
fork(writeHeap(v1, readHeap(v1) * 10); print(readHeap(v1)); countDown( cnt )); fork(writeHeap(v2, readHeap(v2) * 10); print(readHeap(v2)); countDown( cnt )); fork(writeHeap(v3, readHeap(v3) * 10); print(readHeap(v3)); countDown( cnt )); await(cnt); print(100); countDown( cnt ); print(100)

Symbol table:
cnt -> 1
v1 -> (1, int)
v2 -> (2, int)
v3 -> (3, int)

Heap table:
1 -> 2
2 -> 3
3 -> 4

Output:

File table:

------------------------
ID: 1
Execution stack:
fork(writeHeap(v1, readHeap(v1) * 10); print(readHeap(v1)); countDown( cnt ))
fork(writeHeap(v2, readHeap(v2) * 10); print(readHeap(v2)); countDown( cnt )); fork(writeHeap(v3, readHeap(v3) * 10); print(readHeap(v3)); countDown( cnt )); await(cnt); print(100); countDown( cnt ); print(100)

Symbol table:
cnt -> 1
v1 -> (1, int)
v2 -> (2, int)
v3 -> (3, int)

Heap table:
1 -> 2
2 -> 3
3 -> 4

Output:

File table:

------------------------
ID: 1
Execution stack:
fork(writeHeap(v1, readHeap(v1) * 10); print(readHeap(v1)); countDown( cnt ))
fork(writeHeap(v2, readHeap(v2) * 10); print(readHeap(v2)); countDown( cnt )); fork(writeHeap(v3, readHeap(v3) * 10); print(readHeap(v3)); countDown( cnt )); await(cnt); print(100); countDown( cnt ); print(100)

Symbol table:
cnt -> 1
v1 -> (1, int)
v2 -> (2, int)
v3 -> (3, int)

Heap table:
1 -> 2
2 -> 3
3 -> 4

Output:

File table:

------------------------
ID: 1
Execution stack:
fork(writeHeap(v2, readHeap(v2) * 10); print(readHeap(v2)); countDown( cnt )); fork(writeHeap(v3, readHeap(v3) * 10); print(readHeap(v3)); countDown( cnt )); await(cnt); print(100); countDown( cnt ); print(100)

Symbol table:
cnt -> 1
v1 -> (1, int)
v2 -> (2, int)
v3 -> (3, int)

Heap table:
1 -> 2
2 -> 3
3 -> 4

Output:

File table:

------------------------
ID: 5
Execution stack:
writeHeap(v1, readHeap(v1) * 10); print(readHeap(v1)); countDown( cnt )

Symbol table:
cnt -> 1
v1 -> (1, int)
v2 -> (2, int)
v3 -> (3, int)

Heap table:
1 -> 2
2 -> 3
3 -> 4

Output:

File table:

------------------------
ID: 1
Execution stack:
fork(writeHeap(v2, readHeap(v2) * 10); print(readHeap(v2)); countDown( cnt )); fork(writeHeap(v3, readHeap(v3) * 10); print(readHeap(v3)); countDown( cnt )); await(cnt); print(100); countDown( cnt ); print(100)

Symbol table:
cnt -> 1
v1 -> (1, int)
v2 -> (2, int)
v3 -> (3, int)

Heap table:
1 -> 2
2 -> 3
3 -> 4

Output:

File table:

------------------------
ID: 5
Execution stack:
writeHeap(v1, readHeap(v1) * 10); print(readHeap(v1)); countDown( cnt )

Symbol table:
cnt -> 1
v1 -> (1, int)
v2 -> (2, int)
v3 -> (3, int)

Heap table:
1 -> 2
2 -> 3
3 -> 4

Output:

File table:

------------------------
ID: 1
Execution stack:
fork(writeHeap(v2, readHeap(v2) * 10); print(readHeap(v2)); countDown( cnt ))
fork(writeHeap(v3, readHeap(v3) * 10); print(readHeap(v3)); countDown( cnt )); await(cnt); print(100); countDown( cnt ); print(100)

Symbol table:
cnt -> 1
v1 -> (1, int)
v2 -> (2, int)
v3 -> (3, int)

Heap table:
1 -> 2
2 -> 3
3 -> 4

Output:

File table:

------------------------
ID: 5
Execution stack:
writeHeap(v1, readHeap(v1) * 10)
print(readHeap(v1)); countDown( cnt )

Symbol table:
cnt -> 1
v1 -> (1, int)
v2 -> (2, int)
v3 -> (3, int)

Heap table:
1 -> 2
2 -> 3
3 -> 4

Output:

File table:

------------------------
ID: 1
Execution stack:
fork(writeHeap(v2, readHeap(v2) * 10); print(readHeap(v2)); countDown( cnt ))
fork(writeHeap(v3, readHeap(v3) * 10); print(readHeap(v3)); countDown( cnt )); await(cnt); print(100); countDown( cnt ); print(100)

Symbol table:
cnt -> 1
v1 -> (1, int)
v2 -> (2, int)
v3 -> (3, int)

Heap table:
1 -> 2
2 -> 3
3 -> 4

Output:

File table:

------------------------
ID: 5
Execution stack:
writeHeap(v1, readHeap(v1) * 10)
print(readHeap(v1)); countDown( cnt )

Symbol table:
cnt -> 1
v1 -> (1, int)
v2 -> (2, int)
v3 -> (3, int)

Heap table:
1 -> 2
2 -> 3
3 -> 4

Output:

File table:

------------------------
ID: 1
Execution stack:
fork(writeHeap(v3, readHeap(v3) * 10); print(readHeap(v3)); countDown( cnt )); await(cnt); print(100); countDown( cnt ); print(100)

Symbol table:
cnt -> 1
v1 -> (1, int)
v2 -> (2, int)
v3 -> (3, int)

Heap table:
1 -> 20
2 -> 3
3 -> 4

Output:

File table:

------------------------
ID: 5
Execution stack:
print(readHeap(v1)); countDown( cnt )

Symbol table:
cnt -> 1
v1 -> (1, int)
v2 -> (2, int)
v3 -> (3, int)

Heap table:
1 -> 20
2 -> 3
3 -> 4

Output:

File table:

------------------------
ID: 6
Execution stack:
writeHeap(v2, readHeap(v2) * 10); print(readHeap(v2)); countDown( cnt )

Symbol table:
cnt -> 1
v1 -> (1, int)
v2 -> (2, int)
v3 -> (3, int)

Heap table:
1 -> 20
2 -> 3
3 -> 4

Output:

File table:

------------------------
ID: 1
Execution stack:
fork(writeHeap(v3, readHeap(v3) * 10); print(readHeap(v3)); countDown( cnt )); await(cnt); print(100); countDown( cnt ); print(100)

Symbol table:
cnt -> 1
v1 -> (1, int)
v2 -> (2, int)
v3 -> (3, int)

Heap table:
1 -> 20
2 -> 3
3 -> 4

Output:

File table:

------------------------
ID: 5
Execution stack:
print(readHeap(v1)); countDown( cnt )

Symbol table:
cnt -> 1
v1 -> (1, int)
v2 -> (2, int)
v3 -> (3, int)

Heap table:
1 -> 20
2 -> 3
3 -> 4

Output:

File table:

------------------------
ID: 6
Execution stack:
writeHeap(v2, readHeap(v2) * 10); print(readHeap(v2)); countDown( cnt )

Symbol table:
cnt -> 1
v1 -> (1, int)
v2 -> (2, int)
v3 -> (3, int)

Heap table:
1 -> 20
2 -> 3
3 -> 4

Output:

File table:

------------------------
ID: 1
Execution stack:
fork(writeHeap(v3, readHeap(v3) * 10); print(readHeap(v3)); countDown( cnt ))
await(cnt); print(100); countDown( cnt ); print(100)

Symbol table:
cnt -> 1
v1 -> (1, int)
v2 -> (2, int)
v3 -> (3, int)

Heap table:
1 -> 20
2 -> 3
3 -> 4

Output:

File table:

------------------------
ID: 5
Execution stack:
print(readHeap(v1))
countDown( cnt )

Symbol table:
cnt -> 1
v1 -> (1, int)
v2 -> (2, int)
v3 -> (3, int)

Heap table:
1 -> 20
2 -> 3
3 -> 4

Output:

File table:

------------------------
ID: 6
Execution stack:
writeHeap(v2, readHeap(v2) * 10)
print(readHeap(v2)); countDown( cnt )

Symbol table:
cnt -> 1
v1 -> (1, int)
v2 -> (2, int)
v3 -> (3, int)

Heap table:
1 -> 20
2 -> 3
3 -> 4

Output:

File table:

------------------------
ID: 1
Execution stack:
fork(writeHeap(v3, readHeap(v3) * 10); print(readHeap(v3)); countDown( cnt ))
await(cnt); print(100); countDown( cnt ); print(100)

Symbol table:
cnt -> 1
v1 -> (1, int)
v2 -> (2, int)
v3 -> (3, int)

Heap table:
1 -> 20
2 -> 3
3 -> 4

Output:

File table:

------------------------
ID: 5
Execution stack:
print(readHeap(v1))
countDown( cnt )

Symbol table:
cnt -> 1
v1 -> (1, int)
v2 -> (2, int)
v3 -> (3, int)

Heap table:
1 -> 20
2 -> 3
3 -> 4

Output:

File table:

------------------------
ID: 6
Execution stack:
writeHeap(v2, readHeap(v2) * 10)
print(readHeap(v2)); countDown( cnt )

Symbol table:
cnt -> 1
v1 -> (1, int)
v2 -> (2, int)
v3 -> (3, int)

Heap table:
1 -> 20
2 -> 3
3 -> 4

Output:

File table:

------------------------
ID: 1
Execution stack:
await(cnt); print(100); countDown( cnt ); print(100)

Symbol table:
cnt -> 1
v1 -> (1, int)
v2 -> (2, int)
v3 -> (3, int)

Heap table:
1 -> 20
2 -> 30
3 -> 4

Output:
20

File table:

------------------------
ID: 5
Execution stack:
countDown( cnt )

Symbol table:
cnt -> 1
v1 -> (1, int)
v2 -> (2, int)
v3 -> (3, int)

Heap table:
1 -> 20
2 -> 30
3 -> 4

Output:
20

File table:

------------------------
ID: 6
Execution stack:
print(readHeap(v2)); countDown( cnt )

Symbol table:
cnt -> 1
v1 -> (1, int)
v2 -> (2, int)
v3 -> (3, int)

Heap table:
1 -> 20
2 -> 30
3 -> 4

Output:
20

File table:

------------------------
ID: 7
Execution stack:
writeHeap(v3, readHeap(v3) * 10); print(readHeap(v3)); countDown( cnt )

Symbol table:
cnt -> 1
v1 -> (1, int)
v2 -> (2, int)
v3 -> (3, int)

Heap table:
1 -> 20
2 -> 30
3 -> 4

Output:
20

File table:

------------------------
ID: 1
Execution stack:
await(cnt); print(100); countDown( cnt ); print(100)

Symbol table:
cnt -> 1
v1 -> (1, int)
v2 -> (2, int)
v3 -> (3, int)

Heap table:
1 -> 20
2 -> 30
3 -> 4

Output:
20

File table:

------------------------
ID: 5
Execution stack:
countDown( cnt )

Symbol table:
cnt -> 1
v1 -> (1, int)
v2 -> (2, int)
v3 -> (3, int)

Heap table:
1 -> 20
2 -> 30
3 -> 4

Output:
20

File table:

------------------------
ID: 6
Execution stack:
print(readHeap(v2)); countDown( cnt )

Symbol table:
cnt -> 1
v1 -> (1, int)
v2 -> (2, int)
v3 -> (3, int)

Heap table:
1 -> 20
2 -> 30
3 -> 4

Output:
20

File table:

------------------------
ID: 7
Execution stack:
writeHeap(v3, readHeap(v3) * 10); print(readHeap(v3)); countDown( cnt )

Symbol table:
cnt -> 1
v1 -> (1, int)
v2 -> (2, int)
v3 -> (3, int)

Heap table:
1 -> 20
2 -> 30
3 -> 4

Output:
20

File table:

------------------------
ID: 1
Execution stack:
await(cnt)
print(100); countDown( cnt ); print(100)

Symbol table:
cnt -> 1
v1 -> (1, int)
v2 -> (2, int)
v3 -> (3, int)

Heap table:
1 -> 20
2 -> 30
3 -> 4

Output:
20
5

File table:

------------------------
ID: 5
Execution stack:

Symbol table:
cnt -> 1
v1 -> (1, int)
v2 -> (2, int)
v3 -> (3, int)

Heap table:
1 -> 20
2 -> 30
3 -> 4

Output:
20
5

File table:

------------------------
ID: 6
Execution stack:
print(readHeap(v2))
countDown( cnt )

Symbol table:
cnt -> 1
v1 -> (1, int)
v2 -> (2, int)
v3 -> (3, int)

Heap table:
1 -> 20
2 -> 30
3 -> 4

Output:
20
5

File table:

------------------------
ID: 7
Execution stack:
writeHeap(v3, readHeap(v3) * 10)
print(readHeap(v3)); countDown( cnt )

Symbol table:
cnt -> 1
v1 -> (1, int)
v2 -> (2, int)
v3 -> (3, int)

Heap table:
1 -> 20
2 -> 30
3 -> 4

Output:
20
5

File table:

------------------------
ID: 1
Execution stack:
await(cnt)
print(100); countDown( cnt ); print(100)

Symbol table:
cnt -> 1
v1 -> (1, int)
v2 -> (2, int)
v3 -> (3, int)

Heap table:
1 -> 20
2 -> 30
3 -> 4

Output:
20
5

File table:

------------------------
ID: 6
Execution stack:
print(readHeap(v2))
countDown( cnt )

Symbol table:
cnt -> 1
v1 -> (1, int)
v2 -> (2, int)
v3 -> (3, int)

Heap table:
1 -> 20
2 -> 30
3 -> 4

Output:
20
5

File table:

------------------------
ID: 7
Execution stack:
writeHeap(v3, readHeap(v3) * 10)
print(readHeap(v3)); countDown( cnt )

Symbol table:
cnt -> 1
v1 -> (1, int)
v2 -> (2, int)
v3 -> (3, int)

Heap table:
1 -> 20
2 -> 30
3 -> 4

Output:
20
5

File table:

------------------------
ID: 1
Execution stack:
await(cnt)
print(100); countDown( cnt ); print(100)

Symbol table:
cnt -> 1
v1 -> (1, int)
v2 -> (2, int)
v3 -> (3, int)

Heap table:
1 -> 20
2 -> 30
3 -> 40

Output:
20
5
30

File table:

------------------------
ID: 6
Execution stack:
countDown( cnt )

Symbol table:
cnt -> 1
v1 -> (1, int)
v2 -> (2, int)
v3 -> (3, int)

Heap table:
1 -> 20
2 -> 30
3 -> 40

Output:
20
5
30

File table:

------------------------
ID: 7
Execution stack:
print(readHeap(v3)); countDown( cnt )

Symbol table:
cnt -> 1
v1 -> (1, int)
v2 -> (2, int)
v3 -> (3, int)

Heap table:
1 -> 20
2 -> 30
3 -> 40

Output:
20
5
30

File table:

------------------------
ID: 1
Execution stack:
await(cnt)
print(100); countDown( cnt ); print(100)

Symbol table:
cnt -> 1
v1 -> (1, int)
v2 -> (2, int)
v3 -> (3, int)

Heap table:
1 -> 20
2 -> 30
3 -> 40

Output:
20
5
30

File table:

------------------------
ID: 6
Execution stack:
countDown( cnt )

Symbol table:
cnt -> 1
v1 -> (1, int)
v2 -> (2, int)
v3 -> (3, int)

Heap table:
1 -> 20
2 -> 30
3 -> 40

Output:
20
5
30

File table:

------------------------
ID: 7
Execution stack:
print(readHeap(v3)); countDown( cnt )

Symbol table:
cnt -> 1
v1 -> (1, int)
v2 -> (2, int)
v3 -> (3, int)

Heap table:
1 -> 20
2 -> 30
3 -> 40

Output:
20
5
30

File table:

------------------------
ID: 1
Execution stack:
await(cnt)
print(100); countDown( cnt ); print(100)

Symbol table:
cnt -> 1
v1 -> (1, int)
v2 -> (2, int)
v3 -> (3, int)

Heap table:
1 -> 20
2 -> 30
3 -> 40

Output:
20
5
30
6

File table:

------------------------
ID: 6
Execution stack:

Symbol table:
cnt -> 1
v1 -> (1, int)
v2 -> (2, int)
v3 -> (3, int)

Heap table:
1 -> 20
2 -> 30
3 -> 40

Output:
20
5
30
6

File table:

------------------------
ID: 7
Execution stack:
print(readHeap(v3))
countDown( cnt )

Symbol table:
cnt -> 1
v1 -> (1, int)
v2 -> (2, int)
v3 -> (3, int)

Heap table:
1 -> 20
2 -> 30
3 -> 40

Output:
20
5
30
6

File table:

------------------------
ID: 1
Execution stack:
await(cnt)
print(100); countDown( cnt ); print(100)

Symbol table:
cnt -> 1
v1 -> (1, int)
v2 -> (2, int)
v3 -> (3, int)

Heap table:
1 -> 20
2 -> 30
3 -> 40

Output:
20
5
30
6

File table:

------------------------
ID: 7
Execution stack:
print(readHeap(v3))
countDown( cnt )

Symbol table:
cnt -> 1
v1 -> (1, int)
v2 -> (2, int)
v3 -> (3, int)

Heap table:
1 -> 20
2 -> 30
3 -> 40

Output:
20
5
30
6

File table:

------------------------
ID: 1
Execution stack:
await(cnt)
print(100); countDown( cnt ); print(100)

Symbol table:
cnt -> 1
v1 -> (1, int)
v2 -> (2, int)
v3 -> (3, int)

Heap table:
1 -> 20
2 -> 30
3 -> 40

Output:
20
5
30
6
40

File table:

------------------------
ID: 7
Execution stack:
countDown( cnt )

Symbol table:
cnt -> 1
v1 -> (1, int)
v2 -> (2, int)
v3 -> (3, int)

Heap table:
1 -> 20
2 -> 30
3 -> 40

Output:
20
5
30
6
40

File table:

------------------------
ID: 1
Execution stack:
await(cnt)
print(100); countDown( cnt ); print(100)

Symbol table:
cnt -> 1
v1 -> (1, int)
v2 -> (2, int)
v3 -> (3, int)

Heap table:
1 -> 20
2 -> 30
3 -> 40

Output:
20
5
30
6
40

File table:

------------------------
ID: 7
Execution stack:
countDown( cnt )

Symbol table:
cnt -> 1
v1 -> (1, int)
v2 -> (2, int)
v3 -> (3, int)

Heap table:
1 -> 20
2 -> 30
3 -> 40

Output:
20
5
30
6
40

File table:

------------------------
ID: 1
Execution stack:
await(cnt)
print(100); countDown( cnt ); print(100)

Symbol table:
cnt -> 1
v1 -> (1, int)
v2 -> (2, int)
v3 -> (3, int)

Heap table:
1 -> 20
2 -> 30
3 -> 40

Output:
20
5
30
6
40
7

File table:

------------------------
ID: 7
Execution stack:

Symbol table:
cnt -> 1
v1 -> (1, int)
v2 -> (2, int)
v3 -> (3, int)

Heap table:
1 -> 20
2 -> 30
3 -> 40

Output:
20
5
30
6
40
7

File table:

------------------------
ID: 1
Execution stack:
await(cnt)
print(100); countDown( cnt ); print(100)

Symbol table:
cnt -> 1
v1 -> (1, int)
v2 -> (2, int)
v3 -> (3, int)

Heap table:
1 -> 20
2 -> 30
3 -> 40

Output:
20
5
30
6
40
7

File table:

------------------------
ID: 1
Execution stack:
print(100); countDown( cnt ); print(100)

Symbol table:
cnt -> 1
v1 -> (1, int)
v2 -> (2, int)
v3 -> (3, int)

Heap table:
1 -> 20
2 -> 30
3 -> 40

Output:
20
5
30
6
40
7

File table:

------------------------
ID: 1
Execution stack:
print(100); countDown( cnt ); print(100)

Symbol table:
cnt -> 1
v1 -> (1, int)
v2 -> (2, int)
v3 -> (3, int)

Heap table:
1 -> 20
2 -> 30
3 -> 40

Output:
20
5
30
6
40
7

File table:

------------------------
ID: 1
Execution stack:
print(100)
countDown( cnt ); print(100)

Symbol table:
cnt -> 1
v1 -> (1, int)
v2 -> (2, int)
v3 -> (3, int)

Heap table:
1 -> 20
2 -> 30
3 -> 40

Output:
20
5
30
6
40
7

File table:

------------------------
ID: 1
Execution stack:
print(100)
countDown( cnt ); print(100)

Symbol table:
cnt -> 1
v1 -> (1, int)
v2 -> (2, int)
v3 -> (3, int)

Heap table:
1 -> 20
2 -> 30
3 -> 40

Output:
20
5
30
6
40
7

File table:

------------------------
ID: 1
Execution stack:
countDown( cnt ); print(100)

Symbol table:
cnt -> 1
v1 -> (1, int)
v2 -> (2, int)
v3 -> (3, int)

Heap table:
1 -> 20
2 -> 30
3 -> 40

Output:
20
5
30
6
40
7
100

File table:

------------------------
ID: 1
Execution stack:
countDown( cnt ); print(100)

Symbol table:
cnt -> 1
v1 -> (1, int)
v2 -> (2, int)
v3 -> (3, int)

Heap table:
1 -> 20
2 -> 30
3 -> 40

Output:
20
5
30
6
40
7
100

File table:

------------------------
ID: 1
Execution stack:
countDown( cnt )
print(100)

Symbol table:
cnt -> 1
v1 -> (1, int)
v2 -> (2, int)
v3 -> (3, int)

Heap table:
1 -> 20
2 -> 30
3 -> 40

Output:
20
5
30
6
40
7
100

File table:

------------------------
ID: 1
Execution stack:
countDown( cnt )
print(100)

Symbol table:
cnt -> 1
v1 -> (1, int)
v2 -> (2, int)
v3 -> (3, int)

Heap table:
1 -> 20
2 -> 30
3 -> 40

Output:
20
5
30
6
40
7
100

File table:

------------------------
ID: 1
Execution stack:
print(100)

Symbol table:
cnt -> 1
v1 -> (1, int)
v2 -> (2, int)
v3 -> (3, int)

Heap table:
1 -> 20
2 -> 30
3 -> 40

Output:
20
5
30
6
40
7
100
1

File table:

------------------------
ID: 1
Execution stack:
print(100)

Symbol table:
cnt -> 1
v1 -> (1, int)
v2 -> (2, int)
v3 -> (3, int)

Heap table:
1 -> 20
2 -> 30
3 -> 40

Output:
20
5
30
6
40
7
100
1

File table:

------------------------
ID: 1
Execution stack:

Symbol table:
cnt -> 1
v1 -> (1, int)
v2 -> (2, int)
v3 -> (3, int)

Heap table:
1 -> 20
2 -> 30
3 -> 40

Output:
20
5
30
6
40
7
100
1
100

File table:

------------------------
ID: 1
Execution stack:
int cnt; Ref(int) v1; Ref(int) v2; Ref(int) v3; new(v1, 2); new(v2, 3); new(v3, 4); newLatch(cnt, readHeap(v2)); fork(writeHeap(v1, readHeap(v1) * 10); print(readHeap(v1)); countDown( cnt )); fork(writeHeap(v2, readHeap(v2) * 10); print(readHeap(v2)); countDown( cnt )); fork(writeHeap(v3, readHeap(v3) * 10); print(readHeap(v3)); countDown( cnt )); await(cnt); print(100); countDown( cnt ); print(100)

Symbol table:

Heap table:

Output:

File table:

------------------------
ID: 1
Execution stack:
int cnt
Ref(int) v1; Ref(int) v2; Ref(int) v3; new(v1, 2); new(v2, 3); new(v3, 4); newLatch(cnt, readHeap(v2)); fork(writeHeap(v1, readHeap(v1) * 10); print(readHeap(v1)); countDown( cnt )); fork(writeHeap(v2, readHeap(v2) * 10); print(readHeap(v2)); countDown( cnt )); fork(writeHeap(v3, readHeap(v3) * 10); print(readHeap(v3)); countDown( cnt )); await(cnt); print(100); countDown( cnt ); print(100)

Symbol table:

Heap table:

Output:

File table:

------------------------
ID: 1
Execution stack:
int cnt
Ref(int) v1; Ref(int) v2; Ref(int) v3; new(v1, 2); new(v2, 3); new(v3, 4); newLatch(cnt, readHeap(v2)); fork(writeHeap(v1, readHeap(v1) * 10); print(readHeap(v1)); countDown( cnt )); fork(writeHeap(v2, readHeap(v2) * 10); print(readHeap(v2)); countDown( cnt )); fork(writeHeap(v3, readHeap(v3) * 10); print(readHeap(v3)); countDown( cnt )); await(cnt); print(100); countDown( cnt ); print(100)

Symbol table:

Heap table:

Output:

File table:

------------------------
ID: 1
Execution stack:
Ref(int) v1; Ref(int) v2; Ref(int) v3; new(v1, 2); new(v2, 3); new(v3, 4); newLatch(cnt, readHeap(v2)); fork(writeHeap(v1, readHeap(v1) * 10); print(readHeap(v1)); countDown( cnt )); fork(writeHeap(v2, readHeap(v2) * 10); print(readHeap(v2)); countDown( cnt )); fork(writeHeap(v3, readHeap(v3) * 10); print(readHeap(v3)); countDown( cnt )); await(cnt); print(100); countDown( cnt ); print(100)

Symbol table:
cnt -> 0

Heap table:

Output:

File table:

------------------------
ID: 1
Execution stack:
Ref(int) v1; Ref(int) v2; Ref(int) v3; new(v1, 2); new(v2, 3); new(v3, 4); newLatch(cnt, readHeap(v2)); fork(writeHeap(v1, readHeap(v1) * 10); print(readHeap(v1)); countDown( cnt )); fork(writeHeap(v2, readHeap(v2) * 10); print(readHeap(v2)); countDown( cnt )); fork(writeHeap(v3, readHeap(v3) * 10); print(readHeap(v3)); countDown( cnt )); await(cnt); print(100); countDown( cnt ); print(100)

Symbol table:
cnt -> 0

Heap table:

Output:

File table:

------------------------
ID: 1
Execution stack:
Ref(int) v1
Ref(int) v2; Ref(int) v3; new(v1, 2); new(v2, 3); new(v3, 4); newLatch(cnt, readHeap(v2)); fork(writeHeap(v1, readHeap(v1) * 10); print(readHeap(v1)); countDown( cnt )); fork(writeHeap(v2, readHeap(v2) * 10); print(readHeap(v2)); countDown( cnt )); fork(writeHeap(v3, readHeap(v3) * 10); print(readHeap(v3)); countDown( cnt )); await(cnt); print(100); countDown( cnt ); print(100)

Symbol table:
cnt -> 0

Heap table:

Output:

File table:

------------------------
ID: 1
Execution stack:
Ref(int) v1
Ref(int) v2; Ref(int) v3; new(v1, 2); new(v2, 3); new(v3, 4); newLatch(cnt, readHeap(v2)); fork(writeHeap(v1, readHeap(v1) * 10); print(readHeap(v1)); countDown( cnt )); fork(writeHeap(v2, readHeap(v2) * 10); print(readHeap(v2)); countDown( cnt )); fork(writeHeap(v3, readHeap(v3) * 10); print(readHeap(v3)); countDown( cnt )); await(cnt); print(100); countDown( cnt ); print(100)

Symbol table:
cnt -> 0

Heap table:

Output:

File table:

------------------------
ID: 1
Execution stack:
Ref(int) v2; Ref(int) v3; new(v1, 2); new(v2, 3); new(v3, 4); newLatch(cnt, readHeap(v2)); fork(writeHeap(v1, readHeap(v1) * 10); print(readHeap(v1)); countDown( cnt )); fork(writeHeap(v2, readHeap(v2) * 10); print(readHeap(v2)); countDown( cnt )); fork(writeHeap(v3, readHeap(v3) * 10); print(readHeap(v3)); countDown( cnt )); await(cnt); print(100); countDown( cnt ); print(100)

Symbol table:
cnt -> 0
v1 -> (1, int)

Heap table:

Output:

File table:

------------------------
ID: 1
Execution stack:
Ref(int) v2; Ref(int) v3; new(v1, 2); new(v2, 3); new(v3, 4); newLatch(cnt, readHeap(v2)); fork(writeHeap(v1, readHeap(v1) * 10); print(readHeap(v1)); countDown( cnt )); fork(writeHeap(v2, readHeap(v2) * 10); print(readHeap(v2)); countDown( cnt )); fork(writeHeap(v3, readHeap(v3) * 10); print(readHeap(v3)); countDown( cnt )); await(cnt); print(100); countDown( cnt ); print(100)

Symbol table:
cnt -> 0
v1 -> (1, int)

Heap table:

Output:

File table:

------------------------
ID: 1
Execution stack:
Ref(int) v2
Ref(int) v3; new(v1, 2); new(v2, 3); new(v3, 4); newLatch(cnt, readHeap(v2)); fork(writeHeap(v1, readHeap(v1) * 10); print(readHeap(v1)); countDown( cnt )); fork(writeHeap(v2, readHeap(v2) * 10); print(readHeap(v2)); countDown( cnt )); fork(writeHeap(v3, readHeap(v3) * 10); print(readHeap(v3)); countDown( cnt )); await(cnt); print(100); countDown( cnt ); print(100)

Symbol table:
cnt -> 0
v1 -> (1, int)

Heap table:

Output:

File table:

------------------------
ID: 1
Execution stack:
Ref(int) v2
Ref(int) v3; new(v1, 2); new(v2, 3); new(v3, 4); newLatch(cnt, readHeap(v2)); fork(writeHeap(v1, readHeap(v1) * 10); print(readHeap(v1)); countDown( cnt )); fork(writeHeap(v2, readHeap(v2) * 10); print(readHeap(v2)); countDown( cnt )); fork(writeHeap(v3, readHeap(v3) * 10); print(readHeap(v3)); countDown( cnt )); await(cnt); print(100); countDown( cnt ); print(100)

Symbol table:
cnt -> 0
v1 -> (1, int)

Heap table:

Output:

File table:

------------------------
ID: 1
Execution stack:
Ref(int) v3; new(v1, 2); new(v2, 3); new(v3, 4); newLatch(cnt, readHeap(v2)); fork(writeHeap(v1, readHeap(v1) * 10); print(readHeap(v1)); countDown( cnt )); fork(writeHeap(v2, readHeap(v2) * 10); print(readHeap(v2)); countDown( cnt )); fork(writeHeap(v3, readHeap(v3) * 10); print(readHeap(v3)); countDown( cnt )); await(cnt); print(100); countDown( cnt ); print(100)

Symbol table:
cnt -> 0
v1 -> (1, int)
v2 -> (1, int)

Heap table:

Output:

File table:

------------------------
ID: 1
Execution stack:
Ref(int) v3; new(v1, 2); new(v2, 3); new(v3, 4); newLatch(cnt, readHeap(v2)); fork(writeHeap(v1, readHeap(v1) * 10); print(readHeap(v1)); countDown( cnt )); fork(writeHeap(v2, readHeap(v2) * 10); print(readHeap(v2)); countDown( cnt )); fork(writeHeap(v3, readHeap(v3) * 10); print(readHeap(v3)); countDown( cnt )); await(cnt); print(100); countDown( cnt ); print(100)

Symbol table:
cnt -> 0
v1 -> (1, int)
v2 -> (1, int)

Heap table:

Output:

File table:

------------------------
ID: 1
Execution stack:
Ref(int) v3
new(v1, 2); new(v2, 3); new(v3, 4); newLatch(cnt, readHeap(v2)); fork(writeHeap(v1, readHeap(v1) * 10); print(readHeap(v1)); countDown( cnt )); fork(writeHeap(v2, readHeap(v2) * 10); print(readHeap(v2)); countDown( cnt )); fork(writeHeap(v3, readHeap(v3) * 10); print(readHeap(v3)); countDown( cnt )); await(cnt); print(100); countDown( cnt ); print(100)

Symbol table:
cnt -> 0
v1 -> (1, int)
v2 -> (1, int)

Heap table:

Output:

File table:

------------------------
ID: 1
Execution stack:
Ref(int) v3
new(v1, 2); new(v2, 3); new(v3, 4); newLatch(cnt, readHeap(v2)); fork(writeHeap(v1, readHeap(v1) * 10); print(readHeap(v1)); countDown( cnt )); fork(writeHeap(v2, readHeap(v2) * 10); print(readHeap(v2)); countDown( cnt )); fork(writeHeap(v3, readHeap(v3) * 10); print(readHeap(v3)); countDown( cnt )); await(cnt); print(100); countDown( cnt ); print(100)

Symbol table:
cnt -> 0
v1 -> (1, int)
v2 -> (1, int)

Heap table:

Output:

File table:

------------------------
ID: 1
Execution stack:
new(v1, 2); new(v2, 3); new(v3, 4); newLatch(cnt, readHeap(v2)); fork(writeHeap(v1, readHeap(v1) * 10); print(readHeap(v1)); countDown( cnt )); fork(writeHeap(v2, readHeap(v2) * 10); print(readHeap(v2)); countDown( cnt )); fork(writeHeap(v3, readHeap(v3) * 10); print(readHeap(v3)); countDown( cnt )); await(cnt); print(100); countDown( cnt ); print(100)

Symbol table:
cnt -> 0
v1 -> (1, int)
v2 -> (1, int)
v3 -> (1, int)

Heap table:

Output:

File table:

------------------------
ID: 1
Execution stack:
new(v1, 2); new(v2, 3); new(v3, 4); newLatch(cnt, readHeap(v2)); fork(writeHeap(v1, readHeap(v1) * 10); print(readHeap(v1)); countDown( cnt )); fork(writeHeap(v2, readHeap(v2) * 10); print(readHeap(v2)); countDown( cnt )); fork(writeHeap(v3, readHeap(v3) * 10); print(readHeap(v3)); countDown( cnt )); await(cnt); print(100); countDown( cnt ); print(100)

Symbol table:
cnt -> 0
v1 -> (1, int)
v2 -> (1, int)
v3 -> (1, int)

Heap table:

Output:

File table:

------------------------
ID: 1
Execution stack:
new(v1, 2)
new(v2, 3); new(v3, 4); newLatch(cnt, readHeap(v2)); fork(writeHeap(v1, readHeap(v1) * 10); print(readHeap(v1)); countDown( cnt )); fork(writeHeap(v2, readHeap(v2) * 10); print(readHeap(v2)); countDown( cnt )); fork(writeHeap(v3, readHeap(v3) * 10); print(readHeap(v3)); countDown( cnt )); await(cnt); print(100); countDown( cnt ); print(100)

Symbol table:
cnt -> 0
v1 -> (1, int)
v2 -> (1, int)
v3 -> (1, int)

Heap table:

Output:

File table:

------------------------
ID: 1
Execution stack:
new(v1, 2)
new(v2, 3); new(v3, 4); newLatch(cnt, readHeap(v2)); fork(writeHeap(v1, readHeap(v1) * 10); print(readHeap(v1)); countDown( cnt )); fork(writeHeap(v2, readHeap(v2) * 10); print(readHeap(v2)); countDown( cnt )); fork(writeHeap(v3, readHeap(v3) * 10); print(readHeap(v3)); countDown( cnt )); await(cnt); print(100); countDown( cnt ); print(100)

Symbol table:
cnt -> 0
v1 -> (1, int)
v2 -> (1, int)
v3 -> (1, int)

Heap table:

Output:

File table:

------------------------
ID: 1
Execution stack:
new(v2, 3); new(v3, 4); newLatch(cnt, readHeap(v2)); fork(writeHeap(v1, readHeap(v1) * 10); print(readHeap(v1)); countDown( cnt )); fork(writeHeap(v2, readHeap(v2) * 10); print(readHeap(v2)); countDown( cnt )); fork(writeHeap(v3, readHeap(v3) * 10); print(readHeap(v3)); countDown( cnt )); await(cnt); print(100); countDown( cnt ); print(100)

Symbol table:
cnt -> 0
v1 -> (1, int)
v2 -> (1, int)
v3 -> (1, int)

Heap table:
1 -> 2

Output:

File table:

------------------------
ID: 1
Execution stack:
new(v2, 3); new(v3, 4); newLatch(cnt, readHeap(v2)); fork(writeHeap(v1, readHeap(v1) * 10); print(readHeap(v1)); countDown( cnt )); fork(writeHeap(v2, readHeap(v2) * 10); print(readHeap(v2)); countDown( cnt )); fork(writeHeap(v3, readHeap(v3) * 10); print(readHeap(v3)); countDown( cnt )); await(cnt); print(100); countDown( cnt ); print(100)

Symbol table:
cnt -> 0
v1 -> (1, int)
v2 -> (1, int)
v3 -> (1, int)

Heap table:
1 -> 2

Output:

File table:

------------------------
ID: 1
Execution stack:
new(v2, 3)
new(v3, 4); newLatch(cnt, readHeap(v2)); fork(writeHeap(v1, readHeap(v1) * 10); print(readHeap(v1)); countDown( cnt )); fork(writeHeap(v2, readHeap(v2) * 10); print(readHeap(v2)); countDown( cnt )); fork(writeHeap(v3, readHeap(v3) * 10); print(readHeap(v3)); countDown( cnt )); await(cnt); print(100); countDown( cnt ); print(100)

Symbol table:
cnt -> 0
v1 -> (1, int)
v2 -> (1, int)
v3 -> (1, int)

Heap table:
1 -> 2

Output:

File table:

------------------------
ID: 1
Execution stack:
new(v2, 3)
new(v3, 4); newLatch(cnt, readHeap(v2)); fork(writeHeap(v1, readHeap(v1) * 10); print(readHeap(v1)); countDown( cnt )); fork(writeHeap(v2, readHeap(v2) * 10); print(readHeap(v2)); countDown( cnt )); fork(writeHeap(v3, readHeap(v3) * 10); print(readHeap(v3)); countDown( cnt )); await(cnt); print(100); countDown( cnt ); print(100)

Symbol table:
cnt -> 0
v1 -> (1, int)
v2 -> (1, int)
v3 -> (1, int)

Heap table:
1 -> 2

Output:

File table:

------------------------
ID: 1
Execution stack:
new(v3, 4); newLatch(cnt, readHeap(v2)); fork(writeHeap(v1, readHeap(v1) * 10); print(readHeap(v1)); countDown( cnt )); fork(writeHeap(v2, readHeap(v2) * 10); print(readHeap(v2)); countDown( cnt )); fork(writeHeap(v3, readHeap(v3) * 10); print(readHeap(v3)); countDown( cnt )); await(cnt); print(100); countDown( cnt ); print(100)

Symbol table:
cnt -> 0
v1 -> (1, int)
v2 -> (2, int)
v3 -> (1, int)

Heap table:
1 -> 2
2 -> 3

Output:

File table:

------------------------
ID: 1
Execution stack:
new(v3, 4); newLatch(cnt, readHeap(v2)); fork(writeHeap(v1, readHeap(v1) * 10); print(readHeap(v1)); countDown( cnt )); fork(writeHeap(v2, readHeap(v2) * 10); print(readHeap(v2)); countDown( cnt )); fork(writeHeap(v3, readHeap(v3) * 10); print(readHeap(v3)); countDown( cnt )); await(cnt); print(100); countDown( cnt ); print(100)

Symbol table:
cnt -> 0
v1 -> (1, int)
v2 -> (2, int)
v3 -> (1, int)

Heap table:
1 -> 2
2 -> 3

Output:

File table:

------------------------
ID: 1
Execution stack:
new(v3, 4)
newLatch(cnt, readHeap(v2)); fork(writeHeap(v1, readHeap(v1) * 10); print(readHeap(v1)); countDown( cnt )); fork(writeHeap(v2, readHeap(v2) * 10); print(readHeap(v2)); countDown( cnt )); fork(writeHeap(v3, readHeap(v3) * 10); print(readHeap(v3)); countDown( cnt )); await(cnt); print(100); countDown( cnt ); print(100)

Symbol table:
cnt -> 0
v1 -> (1, int)
v2 -> (2, int)
v3 -> (1, int)

Heap table:
1 -> 2
2 -> 3

Output:

File table:

------------------------
ID: 1
Execution stack:
new(v3, 4)
newLatch(cnt, readHeap(v2)); fork(writeHeap(v1, readHeap(v1) * 10); print(readHeap(v1)); countDown( cnt )); fork(writeHeap(v2, readHeap(v2) * 10); print(readHeap(v2)); countDown( cnt )); fork(writeHeap(v3, readHeap(v3) * 10); print(readHeap(v3)); countDown( cnt )); await(cnt); print(100); countDown( cnt ); print(100)

Symbol table:
cnt -> 0
v1 -> (1, int)
v2 -> (2, int)
v3 -> (1, int)

Heap table:
1 -> 2
2 -> 3

Output:

File table:

------------------------
ID: 1
Execution stack:
newLatch(cnt, readHeap(v2)); fork(writeHeap(v1, readHeap(v1) * 10); print(readHeap(v1)); countDown( cnt )); fork(writeHeap(v2, readHeap(v2) * 10); print(readHeap(v2)); countDown( cnt )); fork(writeHeap(v3, readHeap(v3) * 10); print(readHeap(v3)); countDown( cnt )); await(cnt); print(100); countDown( cnt ); print(100)

Symbol table:
cnt -> 0
v1 -> (1, int)
v2 -> (2, int)
v3 -> (3, int)

Heap table:
1 -> 2
2 -> 3
3 -> 4

Output:

File table:

------------------------
ID: 1
Execution stack:
newLatch(cnt, readHeap(v2)); fork(writeHeap(v1, readHeap(v1) * 10); print(readHeap(v1)); countDown( cnt )); fork(writeHeap(v2, readHeap(v2) * 10); print(readHeap(v2)); countDown( cnt )); fork(writeHeap(v3, readHeap(v3) * 10); print(readHeap(v3)); countDown( cnt )); await(cnt); print(100); countDown( cnt ); print(100)

Symbol table:
cnt -> 0
v1 -> (1, int)
v2 -> (2, int)
v3 -> (3, int)

Heap table:
1 -> 2
2 -> 3
3 -> 4

Output:

File table:

------------------------
ID: 1
Execution stack:
newLatch(cnt, readHeap(v2))
fork(writeHeap(v1, readHeap(v1) * 10); print(readHeap(v1)); countDown( cnt )); fork(writeHeap(v2, readHeap(v2) * 10); print(readHeap(v2)); countDown( cnt )); fork(writeHeap(v3, readHeap(v3) * 10); print(readHeap(v3)); countDown( cnt )); await(cnt); print(100); countDown( cnt ); print(100)

Symbol table:
cnt -> 0
v1 -> (1, int)
v2 -> (2, int)
v3 -> (3, int)

Heap table:
1 -> 2
2 -> 3
3 -> 4

Output:

File table:

------------------------
ID: 1
Execution stack:
newLatch(cnt, readHeap(v2))
fork(writeHeap(v1, readHeap(v1) * 10); print(readHeap(v1)); countDown( cnt )); fork(writeHeap(v2, readHeap(v2) * 10); print(readHeap(v2)); countDown( cnt )); fork(writeHeap(v3, readHeap(v3) * 10); print(readHeap(v3)); countDown( cnt )); await(cnt); print(100); countDown( cnt ); print(100)

Symbol table:
cnt -> 0
v1 -> (1, int)
v2 -> (2, int)
v3 -> (3, int)

Heap table:
1 -> 2
2 -> 3
3 -> 4

Output:

File table:

------------------------
ID: 1
Execution stack:
fork(writeHeap(v1, readHeap(v1) * 10); print(readHeap(v1)); countDown( cnt )); fork(writeHeap(v2, readHeap(v2) * 10); print(readHeap(v2)); countDown( cnt )); fork(writeHeap(v3, readHeap(v3) * 10); print(readHeap(v3)); countDown( cnt )); await(cnt); print(100); countDown( cnt ); print(100)

Symbol table:
cnt -> 1
v1 -> (1, int)
v2 -> (2, int)
v3 -> (3, int)

Heap table:
1 -> 2
2 -> 3
3 -> 4

Output:

File table:

------------------------
ID: 1
Execution stack:
fork(writeHeap(v1, readHeap(v1) * 10); print(readHeap(v1)); countDown( cnt )); fork(writeHeap(v2, readHeap(v2) * 10); print(readHeap(v2)); countDown( cnt )); fork(writeHeap(v3, readHeap(v3) * 10); print(readHeap(v3)); countDown( cnt )); await(cnt); print(100); countDown( cnt ); print(100)

Symbol table:
cnt -> 1
v1 -> (1, int)
v2 -> (2, int)
v3 -> (3, int)

Heap table:
1 -> 2
2 -> 3
3 -> 4

Output:

File table:

------------------------
ID: 1
Execution stack:
fork(writeHeap(v1, readHeap(v1) * 10); print(readHeap(v1)); countDown( cnt ))
fork(writeHeap(v2, readHeap(v2) * 10); print(readHeap(v2)); countDown( cnt )); fork(writeHeap(v3, readHeap(v3) * 10); print(readHeap(v3)); countDown( cnt )); await(cnt); print(100); countDown( cnt ); print(100)

Symbol table:
cnt -> 1
v1 -> (1, int)
v2 -> (2, int)
v3 -> (3, int)

Heap table:
1 -> 2
2 -> 3
3 -> 4

Output:

File table:

------------------------
ID: 1
Execution stack:
fork(writeHeap(v1, readHeap(v1) * 10); print(readHeap(v1)); countDown( cnt ))
fork(writeHeap(v2, readHeap(v2) * 10); print(readHeap(v2)); countDown( cnt )); fork(writeHeap(v3, readHeap(v3) * 10); print(readHeap(v3)); countDown( cnt )); await(cnt); print(100); countDown( cnt ); print(100)

Symbol table:
cnt -> 1
v1 -> (1, int)
v2 -> (2, int)
v3 -> (3, int)

Heap table:
1 -> 2
2 -> 3
3 -> 4

Output:

File table:

------------------------
ID: 1
Execution stack:
fork(writeHeap(v2, readHeap(v2) * 10); print(readHeap(v2)); countDown( cnt )); fork(writeHeap(v3, readHeap(v3) * 10); print(readHeap(v3)); countDown( cnt )); await(cnt); print(100); countDown( cnt ); print(100)

Symbol table:
cnt -> 1
v1 -> (1, int)
v2 -> (2, int)
v3 -> (3, int)

Heap table:
1 -> 2
2 -> 3
3 -> 4

Output:

File table:

------------------------
ID: 2
Execution stack:
writeHeap(v1, readHeap(v1) * 10); print(readHeap(v1)); countDown( cnt )

Symbol table:
cnt -> 1
v1 -> (1, int)
v2 -> (2, int)
v3 -> (3, int)

Heap table:
1 -> 2
2 -> 3
3 -> 4

Output:

File table:

------------------------
ID: 1
Execution stack:
fork(writeHeap(v2, readHeap(v2) * 10); print(readHeap(v2)); countDown( cnt )); fork(writeHeap(v3, readHeap(v3) * 10); print(readHeap(v3)); countDown( cnt )); await(cnt); print(100); countDown( cnt ); print(100)

Symbol table:
cnt -> 1
v1 -> (1, int)
v2 -> (2, int)
v3 -> (3, int)

Heap table:
1 -> 2
2 -> 3
3 -> 4

Output:

File table:

------------------------
ID: 2
Execution stack:
writeHeap(v1, readHeap(v1) * 10); print(readHeap(v1)); countDown( cnt )

Symbol table:
cnt -> 1
v1 -> (1, int)
v2 -> (2, int)
v3 -> (3, int)

Heap table:
1 -> 2
2 -> 3
3 -> 4

Output:

File table:

------------------------
ID: 1
Execution stack:
fork(writeHeap(v2, readHeap(v2) * 10); print(readHeap(v2)); countDown( cnt ))
fork(writeHeap(v3, readHeap(v3) * 10); print(readHeap(v3)); countDown( cnt )); await(cnt); print(100); countDown( cnt ); print(100)

Symbol table:
cnt -> 1
v1 -> (1, int)
v2 -> (2, int)
v3 -> (3, int)

Heap table:
1 -> 2
2 -> 3
3 -> 4

Output:

File table:

------------------------
ID: 2
Execution stack:
writeHeap(v1, readHeap(v1) * 10)
print(readHeap(v1)); countDown( cnt )

Symbol table:
cnt -> 1
v1 -> (1, int)
v2 -> (2, int)
v3 -> (3, int)

Heap table:
1 -> 2
2 -> 3
3 -> 4

Output:

File table:

------------------------
ID: 1
Execution stack:
fork(writeHeap(v2, readHeap(v2) * 10); print(readHeap(v2)); countDown( cnt ))
fork(writeHeap(v3, readHeap(v3) * 10); print(readHeap(v3)); countDown( cnt )); await(cnt); print(100); countDown( cnt ); print(100)

Symbol table:
cnt -> 1
v1 -> (1, int)
v2 -> (2, int)
v3 -> (3, int)

Heap table:
1 -> 2
2 -> 3
3 -> 4

Output:

File table:

------------------------
ID: 2
Execution stack:
writeHeap(v1, readHeap(v1) * 10)
print(readHeap(v1)); countDown( cnt )

Symbol table:
cnt -> 1
v1 -> (1, int)
v2 -> (2, int)
v3 -> (3, int)

Heap table:
1 -> 2
2 -> 3
3 -> 4

Output:

File table:

------------------------
ID: 1
Execution stack:
fork(writeHeap(v3, readHeap(v3) * 10); print(readHeap(v3)); countDown( cnt )); await(cnt); print(100); countDown( cnt ); print(100)

Symbol table:
cnt -> 1
v1 -> (1, int)
v2 -> (2, int)
v3 -> (3, int)

Heap table:
1 -> 20
2 -> 3
3 -> 4

Output:

File table:

------------------------
ID: 2
Execution stack:
print(readHeap(v1)); countDown( cnt )

Symbol table:
cnt -> 1
v1 -> (1, int)
v2 -> (2, int)
v3 -> (3, int)

Heap table:
1 -> 20
2 -> 3
3 -> 4

Output:

File table:

------------------------
ID: 3
Execution stack:
writeHeap(v2, readHeap(v2) * 10); print(readHeap(v2)); countDown( cnt )

Symbol table:
cnt -> 1
v1 -> (1, int)
v2 -> (2, int)
v3 -> (3, int)

Heap table:
1 -> 20
2 -> 3
3 -> 4

Output:

File table:

------------------------
ID: 1
Execution stack:
fork(writeHeap(v3, readHeap(v3) * 10); print(readHeap(v3)); countDown( cnt )); await(cnt); print(100); countDown( cnt ); print(100)

Symbol table:
cnt -> 1
v1 -> (1, int)
v2 -> (2, int)
v3 -> (3, int)

Heap table:
1 -> 20
2 -> 3
3 -> 4

Output:

File table:

------------------------
ID: 2
Execution stack:
print(readHeap(v1)); countDown( cnt )

Symbol table:
cnt -> 1
v1 -> (1, int)
v2 -> (2, int)
v3 -> (3, int)

Heap table:
1 -> 20
2 -> 3
3 -> 4

Output:

File table:

------------------------
ID: 3
Execution stack:
writeHeap(v2, readHeap(v2) * 10); print(readHeap(v2)); countDown( cnt )

Symbol table:
cnt -> 1
v1 -> (1, int)
v2 -> (2, int)
v3 -> (3, int)

Heap table:
1 -> 20
2 -> 3
3 -> 4

Output:

File table:

------------------------
ID: 1
Execution stack:
fork(writeHeap(v3, readHeap(v3) * 10); print(readHeap(v3)); countDown( cnt ))
await(cnt); print(100); countDown( cnt ); print(100)

Symbol table:
cnt -> 1
v1 -> (1, int)
v2 -> (2, int)
v3 -> (3, int)

Heap table:
1 -> 20
2 -> 3
3 -> 4

Output:

File table:

------------------------
ID: 2
Execution stack:
print(readHeap(v1))
countDown( cnt )

Symbol table:
cnt -> 1
v1 -> (1, int)
v2 -> (2, int)
v3 -> (3, int)

Heap table:
1 -> 20
2 -> 3
3 -> 4

Output:

File table:

------------------------
ID: 3
Execution stack:
writeHeap(v2, readHeap(v2) * 10)
print(readHeap(v2)); countDown( cnt )

Symbol table:
cnt -> 1
v1 -> (1, int)
v2 -> (2, int)
v3 -> (3, int)

Heap table:
1 -> 20
2 -> 3
3 -> 4

Output:

File table:

------------------------
ID: 1
Execution stack:
fork(writeHeap(v3, readHeap(v3) * 10); print(readHeap(v3)); countDown( cnt ))
await(cnt); print(100); countDown( cnt ); print(100)

Symbol table:
cnt -> 1
v1 -> (1, int)
v2 -> (2, int)
v3 -> (3, int)

Heap table:
1 -> 20
2 -> 3
3 -> 4

Output:

File table:

------------------------
ID: 2
Execution stack:
print(readHeap(v1))
countDown( cnt )

Symbol table:
cnt -> 1
v1 -> (1, int)
v2 -> (2, int)
v3 -> (3, int)

Heap table:
1 -> 20
2 -> 3
3 -> 4

Output:

File table:

------------------------
ID: 3
Execution stack:
writeHeap(v2, readHeap(v2) * 10)
print(readHeap(v2)); countDown( cnt )

Symbol table:
cnt -> 1
v1 -> (1, int)
v2 -> (2, int)
v3 -> (3, int)

Heap table:
1 -> 20
2 -> 3
3 -> 4

Output:

File table:

------------------------
ID: 1
Execution stack:
await(cnt); print(100); countDown( cnt ); print(100)

Symbol table:
cnt -> 1
v1 -> (1, int)
v2 -> (2, int)
v3 -> (3, int)

Heap table:
1 -> 20
2 -> 30
3 -> 4

Output:
20

File table:

------------------------
ID: 2
Execution stack:
countDown( cnt )

Symbol table:
cnt -> 1
v1 -> (1, int)
v2 -> (2, int)
v3 -> (3, int)

Heap table:
1 -> 20
2 -> 30
3 -> 4

Output:
20

File table:

------------------------
ID: 3
Execution stack:
print(readHeap(v2)); countDown( cnt )

Symbol table:
cnt -> 1
v1 -> (1, int)
v2 -> (2, int)
v3 -> (3, int)

Heap table:
1 -> 20
2 -> 30
3 -> 4

Output:
20

File table:

------------------------
ID: 4
Execution stack:
writeHeap(v3, readHeap(v3) * 10); print(readHeap(v3)); countDown( cnt )

Symbol table:
cnt -> 1
v1 -> (1, int)
v2 -> (2, int)
v3 -> (3, int)

Heap table:
1 -> 20
2 -> 30
3 -> 4

Output:
20

File table:

------------------------
ID: 1
Execution stack:
await(cnt); print(100); countDown( cnt ); print(100)

Symbol table:
cnt -> 1
v1 -> (1, int)
v2 -> (2, int)
v3 -> (3, int)

Heap table:
1 -> 20
2 -> 30
3 -> 4

Output:
20

File table:

------------------------
ID: 2
Execution stack:
countDown( cnt )

Symbol table:
cnt -> 1
v1 -> (1, int)
v2 -> (2, int)
v3 -> (3, int)

Heap table:
1 -> 20
2 -> 30
3 -> 4

Output:
20

File table:

------------------------
ID: 3
Execution stack:
print(readHeap(v2)); countDown( cnt )

Symbol table:
cnt -> 1
v1 -> (1, int)
v2 -> (2, int)
v3 -> (3, int)

Heap table:
1 -> 20
2 -> 30
3 -> 4

Output:
20

File table:

------------------------
ID: 4
Execution stack:
writeHeap(v3, readHeap(v3) * 10); print(readHeap(v3)); countDown( cnt )

Symbol table:
cnt -> 1
v1 -> (1, int)
v2 -> (2, int)
v3 -> (3, int)

Heap table:
1 -> 20
2 -> 30
3 -> 4

Output:
20

File table:

------------------------
ID: 1
Execution stack:
await(cnt)
print(100); countDown( cnt ); print(100)

Symbol table:
cnt -> 1
v1 -> (1, int)
v2 -> (2, int)
v3 -> (3, int)

Heap table:
1 -> 20
2 -> 30
3 -> 4

Output:
20
2

File table:

------------------------
ID: 2
Execution stack:

Symbol table:
cnt -> 1
v1 -> (1, int)
v2 -> (2, int)
v3 -> (3, int)

Heap table:
1 -> 20
2 -> 30
3 -> 4

Output:
20
2

File table:

------------------------
ID: 3
Execution stack:
print(readHeap(v2))
countDown( cnt )

Symbol table:
cnt -> 1
v1 -> (1, int)
v2 -> (2, int)
v3 -> (3, int)

Heap table:
1 -> 20
2 -> 30
3 -> 4

Output:
20
2

File table:

------------------------
ID: 4
Execution stack:
writeHeap(v3, readHeap(v3) * 10)
print(readHeap(v3)); countDown( cnt )

Symbol table:
cnt -> 1
v1 -> (1, int)
v2 -> (2, int)
v3 -> (3, int)

Heap table:
1 -> 20
2 -> 30
3 -> 4

Output:
20
2

File table:

------------------------
ID: 1
Execution stack:
await(cnt)
print(100); countDown( cnt ); print(100)

Symbol table:
cnt -> 1
v1 -> (1, int)
v2 -> (2, int)
v3 -> (3, int)

Heap table:
1 -> 20
2 -> 30
3 -> 4

Output:
20
2

File table:

------------------------
ID: 3
Execution stack:
print(readHeap(v2))
countDown( cnt )

Symbol table:
cnt -> 1
v1 -> (1, int)
v2 -> (2, int)
v3 -> (3, int)

Heap table:
1 -> 20
2 -> 30
3 -> 4

Output:
20
2

File table:

------------------------
ID: 4
Execution stack:
writeHeap(v3, readHeap(v3) * 10)
print(readHeap(v3)); countDown( cnt )

Symbol table:
cnt -> 1
v1 -> (1, int)
v2 -> (2, int)
v3 -> (3, int)

Heap table:
1 -> 20
2 -> 30
3 -> 4

Output:
20
2

File table:

------------------------
ID: 1
Execution stack:
await(cnt)
print(100); countDown( cnt ); print(100)

Symbol table:
cnt -> 1
v1 -> (1, int)
v2 -> (2, int)
v3 -> (3, int)

Heap table:
1 -> 20
2 -> 30
3 -> 40

Output:
20
2
30

File table:

------------------------
ID: 3
Execution stack:
countDown( cnt )

Symbol table:
cnt -> 1
v1 -> (1, int)
v2 -> (2, int)
v3 -> (3, int)

Heap table:
1 -> 20
2 -> 30
3 -> 40

Output:
20
2
30

File table:

------------------------
ID: 4
Execution stack:
print(readHeap(v3)); countDown( cnt )

Symbol table:
cnt -> 1
v1 -> (1, int)
v2 -> (2, int)
v3 -> (3, int)

Heap table:
1 -> 20
2 -> 30
3 -> 40

Output:
20
2
30

File table:

------------------------
ID: 1
Execution stack:
await(cnt)
print(100); countDown( cnt ); print(100)

Symbol table:
cnt -> 1
v1 -> (1, int)
v2 -> (2, int)
v3 -> (3, int)

Heap table:
1 -> 20
2 -> 30
3 -> 40

Output:
20
2
30

File table:

------------------------
ID: 3
Execution stack:
countDown( cnt )

Symbol table:
cnt -> 1
v1 -> (1, int)
v2 -> (2, int)
v3 -> (3, int)

Heap table:
1 -> 20
2 -> 30
3 -> 40

Output:
20
2
30

File table:

------------------------
ID: 4
Execution stack:
print(readHeap(v3)); countDown( cnt )

Symbol table:
cnt -> 1
v1 -> (1, int)
v2 -> (2, int)
v3 -> (3, int)

Heap table:
1 -> 20
2 -> 30
3 -> 40

Output:
20
2
30

File table:

------------------------
ID: 1
Execution stack:
await(cnt)
print(100); countDown( cnt ); print(100)

Symbol table:
cnt -> 1
v1 -> (1, int)
v2 -> (2, int)
v3 -> (3, int)

Heap table:
1 -> 20
2 -> 30
3 -> 40

Output:
20
2
30
3

File table:

------------------------
ID: 3
Execution stack:

Symbol table:
cnt -> 1
v1 -> (1, int)
v2 -> (2, int)
v3 -> (3, int)

Heap table:
1 -> 20
2 -> 30
3 -> 40

Output:
20
2
30
3

File table:

------------------------
ID: 4
Execution stack:
print(readHeap(v3))
countDown( cnt )

Symbol table:
cnt -> 1
v1 -> (1, int)
v2 -> (2, int)
v3 -> (3, int)

Heap table:
1 -> 20
2 -> 30
3 -> 40

Output:
20
2
30
3

File table:

------------------------
ID: 1
Execution stack:
await(cnt)
print(100); countDown( cnt ); print(100)

Symbol table:
cnt -> 1
v1 -> (1, int)
v2 -> (2, int)
v3 -> (3, int)

Heap table:
1 -> 20
2 -> 30
3 -> 40

Output:
20
2
30
3

File table:

------------------------
ID: 4
Execution stack:
print(readHeap(v3))
countDown( cnt )

Symbol table:
cnt -> 1
v1 -> (1, int)
v2 -> (2, int)
v3 -> (3, int)

Heap table:
1 -> 20
2 -> 30
3 -> 40

Output:
20
2
30
3

File table:

------------------------
ID: 1
Execution stack:
await(cnt)
print(100); countDown( cnt ); print(100)

Symbol table:
cnt -> 1
v1 -> (1, int)
v2 -> (2, int)
v3 -> (3, int)

Heap table:
1 -> 20
2 -> 30
3 -> 40

Output:
20
2
30
3
40

File table:

------------------------
ID: 4
Execution stack:
countDown( cnt )

Symbol table:
cnt -> 1
v1 -> (1, int)
v2 -> (2, int)
v3 -> (3, int)

Heap table:
1 -> 20
2 -> 30
3 -> 40

Output:
20
2
30
3
40

File table:

------------------------
ID: 1
Execution stack:
await(cnt)
print(100); countDown( cnt ); print(100)

Symbol table:
cnt -> 1
v1 -> (1, int)
v2 -> (2, int)
v3 -> (3, int)

Heap table:
1 -> 20
2 -> 30
3 -> 40

Output:
20
2
30
3
40

File table:

------------------------
ID: 4
Execution stack:
countDown( cnt )

Symbol table:
cnt -> 1
v1 -> (1, int)
v2 -> (2, int)
v3 -> (3, int)

Heap table:
1 -> 20
2 -> 30
3 -> 40

Output:
20
2
30
3
40

File table:

------------------------
ID: 1
Execution stack:
await(cnt)
print(100); countDown( cnt ); print(100)

Symbol table:
cnt -> 1
v1 -> (1, int)
v2 -> (2, int)
v3 -> (3, int)

Heap table:
1 -> 20
2 -> 30
3 -> 40

Output:
20
2
30
3
40
4

File table:

------------------------
ID: 4
Execution stack:

Symbol table:
cnt -> 1
v1 -> (1, int)
v2 -> (2, int)
v3 -> (3, int)

Heap table:
1 -> 20
2 -> 30
3 -> 40

Output:
20
2
30
3
40
4

File table:

------------------------
ID: 1
Execution stack:
await(cnt)
print(100); countDown( cnt ); print(100)

Symbol table:
cnt -> 1
v1 -> (1, int)
v2 -> (2, int)
v3 -> (3, int)

Heap table:
1 -> 20
2 -> 30
3 -> 40

Output:
20
2
30
3
40
4

File table:

------------------------
ID: 1
Execution stack:
await(cnt)
print(100); countDown( cnt ); print(100)

Symbol table:
cnt -> 1
v1 -> (1, int)
v2 -> (2, int)
v3 -> (3, int)

Heap table:
1 -> 20
2 -> 30
3 -> 40

Output:
20
2
30
3
40
4

File table:

------------------------
ID: 1
Execution stack:
await(cnt)
print(100); countDown( cnt ); print(100)

Symbol table:
cnt -> 1
v1 -> (1, int)
v2 -> (2, int)
v3 -> (3, int)

Heap table:
1 -> 20
2 -> 30
3 -> 40

Output:
20
2
30
3
40
4

File table:

------------------------
ID: 1
Execution stack:
await(cnt)
print(100); countDown( cnt ); print(100)

Symbol table:
cnt -> 1
v1 -> (1, int)
v2 -> (2, int)
v3 -> (3, int)

Heap table:
1 -> 20
2 -> 30
3 -> 40

Output:
20
2
30
3
40
4

File table:

------------------------
ID: 1
Execution stack:
await(cnt)
print(100); countDown( cnt ); print(100)

Symbol table:
cnt -> 1
v1 -> (1, int)
v2 -> (2, int)
v3 -> (3, int)

Heap table:
1 -> 20
2 -> 30
3 -> 40

Output:
20
2
30
3
40
4

File table:

------------------------
ID: 1
Execution stack:
await(cnt)
print(100); countDown( cnt ); print(100)

Symbol table:
cnt -> 1
v1 -> (1, int)
v2 -> (2, int)
v3 -> (3, int)

Heap table:
1 -> 20
2 -> 30
3 -> 40

Output:
20
2
30
3
40
4

File table:

------------------------
ID: 1
Execution stack:
await(cnt)
print(100); countDown( cnt ); print(100)

Symbol table:
cnt -> 1
v1 -> (1, int)
v2 -> (2, int)
v3 -> (3, int)

Heap table:
1 -> 20
2 -> 30
3 -> 40

Output:
20
2
30
3
40
4

File table:

------------------------
ID: 1
Execution stack:
await(cnt)
print(100); countDown( cnt ); print(100)

Symbol table:
cnt -> 1
v1 -> (1, int)
v2 -> (2, int)
v3 -> (3, int)

Heap table:
1 -> 20
2 -> 30
3 -> 40

Output:
20
2
30
3
40
4

File table:

------------------------
ID: 1
Execution stack:
await(cnt)
print(100); countDown( cnt ); print(100)

Symbol table:
cnt -> 1
v1 -> (1, int)
v2 -> (2, int)
v3 -> (3, int)

Heap table:
1 -> 20
2 -> 30
3 -> 40

Output:
20
2
30
3
40
4

File table:

------------------------
ID: 1
Execution stack:
await(cnt)
print(100); countDown( cnt ); print(100)

Symbol table:
cnt -> 1
v1 -> (1, int)
v2 -> (2, int)
v3 -> (3, int)

Heap table:
1 -> 20
2 -> 30
3 -> 40

Output:
20
2
30
3
40
4

File table:

------------------------
ID: 1
Execution stack:
await(cnt)
print(100); countDown( cnt ); print(100)

Symbol table:
cnt -> 1
v1 -> (1, int)
v2 -> (2, int)
v3 -> (3, int)

Heap table:
1 -> 20
2 -> 30
3 -> 40

Output:
20
2
30
3
40
4

File table:

------------------------
ID: 1
Execution stack:
await(cnt)
print(100); countDown( cnt ); print(100)

Symbol table:
cnt -> 1
v1 -> (1, int)
v2 -> (2, int)
v3 -> (3, int)

Heap table:
1 -> 20
2 -> 30
3 -> 40

Output:
20
2
30
3
40
4

File table:

------------------------
ID: 1
Execution stack:
await(cnt)
print(100); countDown( cnt ); print(100)

Symbol table:
cnt -> 1
v1 -> (1, int)
v2 -> (2, int)
v3 -> (3, int)

Heap table:
1 -> 20
2 -> 30
3 -> 40

Output:
20
2
30
3
40
4

File table:

------------------------
ID: 1
Execution stack:
await(cnt)
print(100); countDown( cnt ); print(100)

Symbol table:
cnt -> 1
v1 -> (1, int)
v2 -> (2, int)
v3 -> (3, int)

Heap table:
1 -> 20
2 -> 30
3 -> 40

Output:
20
2
30
3
40
4

File table:

------------------------
ID: 1
Execution stack:
await(cnt)
print(100); countDown( cnt ); print(100)

Symbol table:
cnt -> 1
v1 -> (1, int)
v2 -> (2, int)
v3 -> (3, int)

Heap table:
1 -> 20
2 -> 30
3 -> 40

Output:
20
2
30
3
40
4

File table:

------------------------
ID: 1
Execution stack:
await(cnt)
print(100); countDown( cnt ); print(100)

Symbol table:
cnt -> 1
v1 -> (1, int)
v2 -> (2, int)
v3 -> (3, int)

Heap table:
1 -> 20
2 -> 30
3 -> 40

Output:
20
2
30
3
40
4

File table:

------------------------
ID: 1
Execution stack:
await(cnt)
print(100); countDown( cnt ); print(100)

Symbol table:
cnt -> 1
v1 -> (1, int)
v2 -> (2, int)
v3 -> (3, int)

Heap table:
1 -> 20
2 -> 30
3 -> 40

Output:
20
2
30
3
40
4

File table:

------------------------
ID: 1
Execution stack:
await(cnt)
print(100); countDown( cnt ); print(100)

Symbol table:
cnt -> 1
v1 -> (1, int)
v2 -> (2, int)
v3 -> (3, int)

Heap table:
1 -> 20
2 -> 30
3 -> 40

Output:
20
2
30
3
40
4

File table:

------------------------
ID: 1
Execution stack:
await(cnt)
print(100); countDown( cnt ); print(100)

Symbol table:
cnt -> 1
v1 -> (1, int)
v2 -> (2, int)
v3 -> (3, int)

Heap table:
1 -> 20
2 -> 30
3 -> 40

Output:
20
2
30
3
40
4

File table:

------------------------
ID: 1
Execution stack:
await(cnt)
print(100); countDown( cnt ); print(100)

Symbol table:
cnt -> 1
v1 -> (1, int)
v2 -> (2, int)
v3 -> (3, int)

Heap table:
1 -> 20
2 -> 30
3 -> 40

Output:
20
2
30
3
40
4

File table:

------------------------
ID: 1
Execution stack:
await(cnt)
print(100); countDown( cnt ); print(100)

Symbol table:
cnt -> 1
v1 -> (1, int)
v2 -> (2, int)
v3 -> (3, int)

Heap table:
1 -> 20
2 -> 30
3 -> 40

Output:
20
2
30
3
40
4

File table:

------------------------
ID: 1
Execution stack:
await(cnt)
print(100); countDown( cnt ); print(100)

Symbol table:
cnt -> 1
v1 -> (1, int)
v2 -> (2, int)
v3 -> (3, int)

Heap table:
1 -> 20
2 -> 30
3 -> 40

Output:
20
2
30
3
40
4

File table:

------------------------
ID: 1
Execution stack:
await(cnt)
print(100); countDown( cnt ); print(100)

Symbol table:
cnt -> 1
v1 -> (1, int)
v2 -> (2, int)
v3 -> (3, int)

Heap table:
1 -> 20
2 -> 30
3 -> 40

Output:
20
2
30
3
40
4

File table:

------------------------
ID: 1
Execution stack:
await(cnt)
print(100); countDown( cnt ); print(100)

Symbol table:
cnt -> 1
v1 -> (1, int)
v2 -> (2, int)
v3 -> (3, int)

Heap table:
1 -> 20
2 -> 30
3 -> 40

Output:
20
2
30
3
40
4

File table:

------------------------
ID: 1
Execution stack:
await(cnt)
print(100); countDown( cnt ); print(100)

Symbol table:
cnt -> 1
v1 -> (1, int)
v2 -> (2, int)
v3 -> (3, int)

Heap table:
1 -> 20
2 -> 30
3 -> 40

Output:
20
2
30
3
40
4

File table:

------------------------
ID: 1
Execution stack:
await(cnt)
print(100); countDown( cnt ); print(100)

Symbol table:
cnt -> 1
v1 -> (1, int)
v2 -> (2, int)
v3 -> (3, int)

Heap table:
1 -> 20
2 -> 30
3 -> 40

Output:
20
2
30
3
40
4

File table:

------------------------
ID: 1
Execution stack:
await(cnt)
print(100); countDown( cnt ); print(100)

Symbol table:
cnt -> 1
v1 -> (1, int)
v2 -> (2, int)
v3 -> (3, int)

Heap table:
1 -> 20
2 -> 30
3 -> 40

Output:
20
2
30
3
40
4

File table:

------------------------
ID: 1
Execution stack:
await(cnt)
print(100); countDown( cnt ); print(100)

Symbol table:
cnt -> 1
v1 -> (1, int)
v2 -> (2, int)
v3 -> (3, int)

Heap table:
1 -> 20
2 -> 30
3 -> 40

Output:
20
2
30
3
40
4

File table:

------------------------
ID: 1
Execution stack:
await(cnt)
print(100); countDown( cnt ); print(100)

Symbol table:
cnt -> 1
v1 -> (1, int)
v2 -> (2, int)
v3 -> (3, int)

Heap table:
1 -> 20
2 -> 30
3 -> 40

Output:
20
2
30
3
40
4

File table:

------------------------
ID: 1
Execution stack:
await(cnt)
print(100); countDown( cnt ); print(100)

Symbol table:
cnt -> 1
v1 -> (1, int)
v2 -> (2, int)
v3 -> (3, int)

Heap table:
1 -> 20
2 -> 30
3 -> 40

Output:
20
2
30
3
40
4

File table:

------------------------
ID: 1
Execution stack:
await(cnt)
print(100); countDown( cnt ); print(100)

Symbol table:
cnt -> 1
v1 -> (1, int)
v2 -> (2, int)
v3 -> (3, int)

Heap table:
1 -> 20
2 -> 30
3 -> 40

Output:
20
2
30
3
40
4

File table:

------------------------
ID: 1
Execution stack:
await(cnt)
print(100); countDown( cnt ); print(100)

Symbol table:
cnt -> 1
v1 -> (1, int)
v2 -> (2, int)
v3 -> (3, int)

Heap table:
1 -> 20
2 -> 30
3 -> 40

Output:
20
2
30
3
40
4

File table:

------------------------
ID: 1
Execution stack:
await(cnt)
print(100); countDown( cnt ); print(100)

Symbol table:
cnt -> 1
v1 -> (1, int)
v2 -> (2, int)
v3 -> (3, int)

Heap table:
1 -> 20
2 -> 30
3 -> 40

Output:
20
2
30
3
40
4

File table:

------------------------
ID: 1
Execution stack:
await(cnt)
print(100); countDown( cnt ); print(100)

Symbol table:
cnt -> 1
v1 -> (1, int)
v2 -> (2, int)
v3 -> (3, int)

Heap table:
1 -> 20
2 -> 30
3 -> 40

Output:
20
2
30
3
40
4

File table:

------------------------
ID: 1
Execution stack:
await(cnt)
print(100); countDown( cnt ); print(100)

Symbol table:
cnt -> 1
v1 -> (1, int)
v2 -> (2, int)
v3 -> (3, int)

Heap table:
1 -> 20
2 -> 30
3 -> 40

Output:
20
2
30
3
40
4

File table:

------------------------
ID: 1
Execution stack:
await(cnt)
print(100); countDown( cnt ); print(100)

Symbol table:
cnt -> 1
v1 -> (1, int)
v2 -> (2, int)
v3 -> (3, int)

Heap table:
1 -> 20
2 -> 30
3 -> 40

Output:
20
2
30
3
40
4

File table:

------------------------
ID: 1
Execution stack:
await(cnt)
print(100); countDown( cnt ); print(100)

Symbol table:
cnt -> 1
v1 -> (1, int)
v2 -> (2, int)
v3 -> (3, int)

Heap table:
1 -> 20
2 -> 30
3 -> 40

Output:
20
2
30
3
40
4

File table:

------------------------
ID: 1
Execution stack:
await(cnt)
print(100); countDown( cnt ); print(100)

Symbol table:
cnt -> 1
v1 -> (1, int)
v2 -> (2, int)
v3 -> (3, int)

Heap table:
1 -> 20
2 -> 30
3 -> 40

Output:
20
2
30
3
40
4

File table:

------------------------
ID: 1
Execution stack:
await(cnt)
print(100); countDown( cnt ); print(100)

Symbol table:
cnt -> 1
v1 -> (1, int)
v2 -> (2, int)
v3 -> (3, int)

Heap table:
1 -> 20
2 -> 30
3 -> 40

Output:
20
2
30
3
40
4

File table:

------------------------
ID: 1
Execution stack:
await(cnt)
print(100); countDown( cnt ); print(100)

Symbol table:
cnt -> 1
v1 -> (1, int)
v2 -> (2, int)
v3 -> (3, int)

Heap table:
1 -> 20
2 -> 30
3 -> 40

Output:
20
2
30
3
40
4

File table:

------------------------
ID: 1
Execution stack:
await(cnt)
print(100); countDown( cnt ); print(100)

Symbol table:
cnt -> 1
v1 -> (1, int)
v2 -> (2, int)
v3 -> (3, int)

Heap table:
1 -> 20
2 -> 30
3 -> 40

Output:
20
2
30
3
40
4

File table:

------------------------
ID: 1
Execution stack:
await(cnt)
print(100); countDown( cnt ); print(100)

Symbol table:
cnt -> 1
v1 -> (1, int)
v2 -> (2, int)
v3 -> (3, int)

Heap table:
1 -> 20
2 -> 30
3 -> 40

Output:
20
2
30
3
40
4

File table:

------------------------
ID: 1
Execution stack:
await(cnt)
print(100); countDown( cnt ); print(100)

Symbol table:
cnt -> 1
v1 -> (1, int)
v2 -> (2, int)
v3 -> (3, int)

Heap table:
1 -> 20
2 -> 30
3 -> 40

Output:
20
2
30
3
40
4

File table:

------------------------
ID: 1
Execution stack:
await(cnt)
print(100); countDown( cnt ); print(100)

Symbol table:
cnt -> 1
v1 -> (1, int)
v2 -> (2, int)
v3 -> (3, int)

Heap table:
1 -> 20
2 -> 30
3 -> 40

Output:
20
2
30
3
40
4

File table:

------------------------
ID: 1
Execution stack:
await(cnt)
print(100); countDown( cnt ); print(100)

Symbol table:
cnt -> 1
v1 -> (1, int)
v2 -> (2, int)
v3 -> (3, int)

Heap table:
1 -> 20
2 -> 30
3 -> 40

Output:
20
2
30
3
40
4

File table:

------------------------
ID: 1
Execution stack:
await(cnt)
print(100); countDown( cnt ); print(100)

Symbol table:
cnt -> 1
v1 -> (1, int)
v2 -> (2, int)
v3 -> (3, int)

Heap table:
1 -> 20
2 -> 30
3 -> 40

Output:
20
2
30
3
40
4

File table:

------------------------
ID: 1
Execution stack:
await(cnt)
print(100); countDown( cnt ); print(100)

Symbol table:
cnt -> 1
v1 -> (1, int)
v2 -> (2, int)
v3 -> (3, int)

Heap table:
1 -> 20
2 -> 30
3 -> 40

Output:
20
2
30
3
40
4

File table:

------------------------
ID: 1
Execution stack:
await(cnt)
print(100); countDown( cnt ); print(100)

Symbol table:
cnt -> 1
v1 -> (1, int)
v2 -> (2, int)
v3 -> (3, int)

Heap table:
1 -> 20
2 -> 30
3 -> 40

Output:
20
2
30
3
40
4

File table:

------------------------
ID: 1
Execution stack:
await(cnt)
print(100); countDown( cnt ); print(100)

Symbol table:
cnt -> 1
v1 -> (1, int)
v2 -> (2, int)
v3 -> (3, int)

Heap table:
1 -> 20
2 -> 30
3 -> 40

Output:
20
2
30
3
40
4

File table:

------------------------
ID: 1
Execution stack:
await(cnt)
print(100); countDown( cnt ); print(100)

Symbol table:
cnt -> 1
v1 -> (1, int)
v2 -> (2, int)
v3 -> (3, int)

Heap table:
1 -> 20
2 -> 30
3 -> 40

Output:
20
2
30
3
40
4

File table:

------------------------
ID: 1
Execution stack:
await(cnt)
print(100); countDown( cnt ); print(100)

Symbol table:
cnt -> 1
v1 -> (1, int)
v2 -> (2, int)
v3 -> (3, int)

Heap table:
1 -> 20
2 -> 30
3 -> 40

Output:
20
2
30
3
40
4

File table:

------------------------
ID: 1
Execution stack:
await(cnt)
print(100); countDown( cnt ); print(100)

Symbol table:
cnt -> 1
v1 -> (1, int)
v2 -> (2, int)
v3 -> (3, int)

Heap table:
1 -> 20
2 -> 30
3 -> 40

Output:
20
2
30
3
40
4

File table:

------------------------
ID: 1
Execution stack:
int cnt; Ref(int) v1; Ref(int) v2; Ref(int) v3; new(v1, 2); new(v2, 3); new(v3, 4); newLatch(cnt, readHeap(v2)); fork(writeHeap(v1, readHeap(v1) * 10); print(readHeap(v1)); countDown( cnt )); fork(writeHeap(v2, readHeap(v2) * 10); print(readHeap(v2)); countDown( cnt )); fork(writeHeap(v3, readHeap(v3) * 10); print(readHeap(v3)); countDown( cnt )); await(cnt); print(100); countDown( cnt ); print(100)

Symbol table:

Heap table:

Output:

File table:

------------------------
ID: 1
Execution stack:
int cnt
Ref(int) v1; Ref(int) v2; Ref(int) v3; new(v1, 2); new(v2, 3); new(v3, 4); newLatch(cnt, readHeap(v2)); fork(writeHeap(v1, readHeap(v1) * 10); print(readHeap(v1)); countDown( cnt )); fork(writeHeap(v2, readHeap(v2) * 10); print(readHeap(v2)); countDown( cnt )); fork(writeHeap(v3, readHeap(v3) * 10); print(readHeap(v3)); countDown( cnt )); await(cnt); print(100); countDown( cnt ); print(100)

Symbol table:

Heap table:

Output:

File table:

------------------------
ID: 1
Execution stack:
int cnt
Ref(int) v1; Ref(int) v2; Ref(int) v3; new(v1, 2); new(v2, 3); new(v3, 4); newLatch(cnt, readHeap(v2)); fork(writeHeap(v1, readHeap(v1) * 10); print(readHeap(v1)); countDown( cnt )); fork(writeHeap(v2, readHeap(v2) * 10); print(readHeap(v2)); countDown( cnt )); fork(writeHeap(v3, readHeap(v3) * 10); print(readHeap(v3)); countDown( cnt )); await(cnt); print(100); countDown( cnt ); print(100)

Symbol table:

Heap table:

Output:

File table:

------------------------
ID: 1
Execution stack:
Ref(int) v1; Ref(int) v2; Ref(int) v3; new(v1, 2); new(v2, 3); new(v3, 4); newLatch(cnt, readHeap(v2)); fork(writeHeap(v1, readHeap(v1) * 10); print(readHeap(v1)); countDown( cnt )); fork(writeHeap(v2, readHeap(v2) * 10); print(readHeap(v2)); countDown( cnt )); fork(writeHeap(v3, readHeap(v3) * 10); print(readHeap(v3)); countDown( cnt )); await(cnt); print(100); countDown( cnt ); print(100)

Symbol table:
cnt -> 0

Heap table:

Output:

File table:

------------------------
ID: 1
Execution stack:
Ref(int) v1; Ref(int) v2; Ref(int) v3; new(v1, 2); new(v2, 3); new(v3, 4); newLatch(cnt, readHeap(v2)); fork(writeHeap(v1, readHeap(v1) * 10); print(readHeap(v1)); countDown( cnt )); fork(writeHeap(v2, readHeap(v2) * 10); print(readHeap(v2)); countDown( cnt )); fork(writeHeap(v3, readHeap(v3) * 10); print(readHeap(v3)); countDown( cnt )); await(cnt); print(100); countDown( cnt ); print(100)

Symbol table:
cnt -> 0

Heap table:

Output:

File table:

------------------------
ID: 1
Execution stack:
Ref(int) v1
Ref(int) v2; Ref(int) v3; new(v1, 2); new(v2, 3); new(v3, 4); newLatch(cnt, readHeap(v2)); fork(writeHeap(v1, readHeap(v1) * 10); print(readHeap(v1)); countDown( cnt )); fork(writeHeap(v2, readHeap(v2) * 10); print(readHeap(v2)); countDown( cnt )); fork(writeHeap(v3, readHeap(v3) * 10); print(readHeap(v3)); countDown( cnt )); await(cnt); print(100); countDown( cnt ); print(100)

Symbol table:
cnt -> 0

Heap table:

Output:

File table:

------------------------
ID: 1
Execution stack:
Ref(int) v1
Ref(int) v2; Ref(int) v3; new(v1, 2); new(v2, 3); new(v3, 4); newLatch(cnt, readHeap(v2)); fork(writeHeap(v1, readHeap(v1) * 10); print(readHeap(v1)); countDown( cnt )); fork(writeHeap(v2, readHeap(v2) * 10); print(readHeap(v2)); countDown( cnt )); fork(writeHeap(v3, readHeap(v3) * 10); print(readHeap(v3)); countDown( cnt )); await(cnt); print(100); countDown( cnt ); print(100)

Symbol table:
cnt -> 0

Heap table:

Output:

File table:

------------------------
ID: 1
Execution stack:
Ref(int) v2; Ref(int) v3; new(v1, 2); new(v2, 3); new(v3, 4); newLatch(cnt, readHeap(v2)); fork(writeHeap(v1, readHeap(v1) * 10); print(readHeap(v1)); countDown( cnt )); fork(writeHeap(v2, readHeap(v2) * 10); print(readHeap(v2)); countDown( cnt )); fork(writeHeap(v3, readHeap(v3) * 10); print(readHeap(v3)); countDown( cnt )); await(cnt); print(100); countDown( cnt ); print(100)

Symbol table:
cnt -> 0
v1 -> (1, int)

Heap table:

Output:

File table:

------------------------
ID: 1
Execution stack:
Ref(int) v2; Ref(int) v3; new(v1, 2); new(v2, 3); new(v3, 4); newLatch(cnt, readHeap(v2)); fork(writeHeap(v1, readHeap(v1) * 10); print(readHeap(v1)); countDown( cnt )); fork(writeHeap(v2, readHeap(v2) * 10); print(readHeap(v2)); countDown( cnt )); fork(writeHeap(v3, readHeap(v3) * 10); print(readHeap(v3)); countDown( cnt )); await(cnt); print(100); countDown( cnt ); print(100)

Symbol table:
cnt -> 0
v1 -> (1, int)

Heap table:

Output:

File table:

------------------------
ID: 1
Execution stack:
Ref(int) v2
Ref(int) v3; new(v1, 2); new(v2, 3); new(v3, 4); newLatch(cnt, readHeap(v2)); fork(writeHeap(v1, readHeap(v1) * 10); print(readHeap(v1)); countDown( cnt )); fork(writeHeap(v2, readHeap(v2) * 10); print(readHeap(v2)); countDown( cnt )); fork(writeHeap(v3, readHeap(v3) * 10); print(readHeap(v3)); countDown( cnt )); await(cnt); print(100); countDown( cnt ); print(100)

Symbol table:
cnt -> 0
v1 -> (1, int)

Heap table:

Output:

File table:

------------------------
ID: 1
Execution stack:
Ref(int) v2
Ref(int) v3; new(v1, 2); new(v2, 3); new(v3, 4); newLatch(cnt, readHeap(v2)); fork(writeHeap(v1, readHeap(v1) * 10); print(readHeap(v1)); countDown( cnt )); fork(writeHeap(v2, readHeap(v2) * 10); print(readHeap(v2)); countDown( cnt )); fork(writeHeap(v3, readHeap(v3) * 10); print(readHeap(v3)); countDown( cnt )); await(cnt); print(100); countDown( cnt ); print(100)

Symbol table:
cnt -> 0
v1 -> (1, int)

Heap table:

Output:

File table:

------------------------
ID: 1
Execution stack:
Ref(int) v3; new(v1, 2); new(v2, 3); new(v3, 4); newLatch(cnt, readHeap(v2)); fork(writeHeap(v1, readHeap(v1) * 10); print(readHeap(v1)); countDown( cnt )); fork(writeHeap(v2, readHeap(v2) * 10); print(readHeap(v2)); countDown( cnt )); fork(writeHeap(v3, readHeap(v3) * 10); print(readHeap(v3)); countDown( cnt )); await(cnt); print(100); countDown( cnt ); print(100)

Symbol table:
cnt -> 0
v1 -> (1, int)
v2 -> (1, int)

Heap table:

Output:

File table:

------------------------
ID: 1
Execution stack:
Ref(int) v3; new(v1, 2); new(v2, 3); new(v3, 4); newLatch(cnt, readHeap(v2)); fork(writeHeap(v1, readHeap(v1) * 10); print(readHeap(v1)); countDown( cnt )); fork(writeHeap(v2, readHeap(v2) * 10); print(readHeap(v2)); countDown( cnt )); fork(writeHeap(v3, readHeap(v3) * 10); print(readHeap(v3)); countDown( cnt )); await(cnt); print(100); countDown( cnt ); print(100)

Symbol table:
cnt -> 0
v1 -> (1, int)
v2 -> (1, int)

Heap table:

Output:

File table:

------------------------
ID: 1
Execution stack:
Ref(int) v3
new(v1, 2); new(v2, 3); new(v3, 4); newLatch(cnt, readHeap(v2)); fork(writeHeap(v1, readHeap(v1) * 10); print(readHeap(v1)); countDown( cnt )); fork(writeHeap(v2, readHeap(v2) * 10); print(readHeap(v2)); countDown( cnt )); fork(writeHeap(v3, readHeap(v3) * 10); print(readHeap(v3)); countDown( cnt )); await(cnt); print(100); countDown( cnt ); print(100)

Symbol table:
cnt -> 0
v1 -> (1, int)
v2 -> (1, int)

Heap table:

Output:

File table:

------------------------
ID: 1
Execution stack:
Ref(int) v3
new(v1, 2); new(v2, 3); new(v3, 4); newLatch(cnt, readHeap(v2)); fork(writeHeap(v1, readHeap(v1) * 10); print(readHeap(v1)); countDown( cnt )); fork(writeHeap(v2, readHeap(v2) * 10); print(readHeap(v2)); countDown( cnt )); fork(writeHeap(v3, readHeap(v3) * 10); print(readHeap(v3)); countDown( cnt )); await(cnt); print(100); countDown( cnt ); print(100)

Symbol table:
cnt -> 0
v1 -> (1, int)
v2 -> (1, int)

Heap table:

Output:

File table:

------------------------
ID: 1
Execution stack:
new(v1, 2); new(v2, 3); new(v3, 4); newLatch(cnt, readHeap(v2)); fork(writeHeap(v1, readHeap(v1) * 10); print(readHeap(v1)); countDown( cnt )); fork(writeHeap(v2, readHeap(v2) * 10); print(readHeap(v2)); countDown( cnt )); fork(writeHeap(v3, readHeap(v3) * 10); print(readHeap(v3)); countDown( cnt )); await(cnt); print(100); countDown( cnt ); print(100)

Symbol table:
cnt -> 0
v1 -> (1, int)
v2 -> (1, int)
v3 -> (1, int)

Heap table:

Output:

File table:

------------------------
ID: 1
Execution stack:
new(v1, 2); new(v2, 3); new(v3, 4); newLatch(cnt, readHeap(v2)); fork(writeHeap(v1, readHeap(v1) * 10); print(readHeap(v1)); countDown( cnt )); fork(writeHeap(v2, readHeap(v2) * 10); print(readHeap(v2)); countDown( cnt )); fork(writeHeap(v3, readHeap(v3) * 10); print(readHeap(v3)); countDown( cnt )); await(cnt); print(100); countDown( cnt ); print(100)

Symbol table:
cnt -> 0
v1 -> (1, int)
v2 -> (1, int)
v3 -> (1, int)

Heap table:

Output:

File table:

------------------------
ID: 1
Execution stack:
new(v1, 2)
new(v2, 3); new(v3, 4); newLatch(cnt, readHeap(v2)); fork(writeHeap(v1, readHeap(v1) * 10); print(readHeap(v1)); countDown( cnt )); fork(writeHeap(v2, readHeap(v2) * 10); print(readHeap(v2)); countDown( cnt )); fork(writeHeap(v3, readHeap(v3) * 10); print(readHeap(v3)); countDown( cnt )); await(cnt); print(100); countDown( cnt ); print(100)

Symbol table:
cnt -> 0
v1 -> (1, int)
v2 -> (1, int)
v3 -> (1, int)

Heap table:

Output:

File table:

------------------------
ID: 1
Execution stack:
new(v1, 2)
new(v2, 3); new(v3, 4); newLatch(cnt, readHeap(v2)); fork(writeHeap(v1, readHeap(v1) * 10); print(readHeap(v1)); countDown( cnt )); fork(writeHeap(v2, readHeap(v2) * 10); print(readHeap(v2)); countDown( cnt )); fork(writeHeap(v3, readHeap(v3) * 10); print(readHeap(v3)); countDown( cnt )); await(cnt); print(100); countDown( cnt ); print(100)

Symbol table:
cnt -> 0
v1 -> (1, int)
v2 -> (1, int)
v3 -> (1, int)

Heap table:

Output:

File table:

------------------------
ID: 1
Execution stack:
new(v2, 3); new(v3, 4); newLatch(cnt, readHeap(v2)); fork(writeHeap(v1, readHeap(v1) * 10); print(readHeap(v1)); countDown( cnt )); fork(writeHeap(v2, readHeap(v2) * 10); print(readHeap(v2)); countDown( cnt )); fork(writeHeap(v3, readHeap(v3) * 10); print(readHeap(v3)); countDown( cnt )); await(cnt); print(100); countDown( cnt ); print(100)

Symbol table:
cnt -> 0
v1 -> (1, int)
v2 -> (1, int)
v3 -> (1, int)

Heap table:
1 -> 2

Output:

File table:

------------------------
ID: 1
Execution stack:
new(v2, 3); new(v3, 4); newLatch(cnt, readHeap(v2)); fork(writeHeap(v1, readHeap(v1) * 10); print(readHeap(v1)); countDown( cnt )); fork(writeHeap(v2, readHeap(v2) * 10); print(readHeap(v2)); countDown( cnt )); fork(writeHeap(v3, readHeap(v3) * 10); print(readHeap(v3)); countDown( cnt )); await(cnt); print(100); countDown( cnt ); print(100)

Symbol table:
cnt -> 0
v1 -> (1, int)
v2 -> (1, int)
v3 -> (1, int)

Heap table:
1 -> 2

Output:

File table:

------------------------
ID: 1
Execution stack:
new(v2, 3)
new(v3, 4); newLatch(cnt, readHeap(v2)); fork(writeHeap(v1, readHeap(v1) * 10); print(readHeap(v1)); countDown( cnt )); fork(writeHeap(v2, readHeap(v2) * 10); print(readHeap(v2)); countDown( cnt )); fork(writeHeap(v3, readHeap(v3) * 10); print(readHeap(v3)); countDown( cnt )); await(cnt); print(100); countDown( cnt ); print(100)

Symbol table:
cnt -> 0
v1 -> (1, int)
v2 -> (1, int)
v3 -> (1, int)

Heap table:
1 -> 2

Output:

File table:

------------------------
ID: 1
Execution stack:
new(v2, 3)
new(v3, 4); newLatch(cnt, readHeap(v2)); fork(writeHeap(v1, readHeap(v1) * 10); print(readHeap(v1)); countDown( cnt )); fork(writeHeap(v2, readHeap(v2) * 10); print(readHeap(v2)); countDown( cnt )); fork(writeHeap(v3, readHeap(v3) * 10); print(readHeap(v3)); countDown( cnt )); await(cnt); print(100); countDown( cnt ); print(100)

Symbol table:
cnt -> 0
v1 -> (1, int)
v2 -> (1, int)
v3 -> (1, int)

Heap table:
1 -> 2

Output:

File table:

------------------------
ID: 1
Execution stack:
new(v3, 4); newLatch(cnt, readHeap(v2)); fork(writeHeap(v1, readHeap(v1) * 10); print(readHeap(v1)); countDown( cnt )); fork(writeHeap(v2, readHeap(v2) * 10); print(readHeap(v2)); countDown( cnt )); fork(writeHeap(v3, readHeap(v3) * 10); print(readHeap(v3)); countDown( cnt )); await(cnt); print(100); countDown( cnt ); print(100)

Symbol table:
cnt -> 0
v1 -> (1, int)
v2 -> (2, int)
v3 -> (1, int)

Heap table:
1 -> 2
2 -> 3

Output:

File table:

------------------------
ID: 1
Execution stack:
new(v3, 4); newLatch(cnt, readHeap(v2)); fork(writeHeap(v1, readHeap(v1) * 10); print(readHeap(v1)); countDown( cnt )); fork(writeHeap(v2, readHeap(v2) * 10); print(readHeap(v2)); countDown( cnt )); fork(writeHeap(v3, readHeap(v3) * 10); print(readHeap(v3)); countDown( cnt )); await(cnt); print(100); countDown( cnt ); print(100)

Symbol table:
cnt -> 0
v1 -> (1, int)
v2 -> (2, int)
v3 -> (1, int)

Heap table:
1 -> 2
2 -> 3

Output:

File table:

------------------------
ID: 1
Execution stack:
new(v3, 4)
newLatch(cnt, readHeap(v2)); fork(writeHeap(v1, readHeap(v1) * 10); print(readHeap(v1)); countDown( cnt )); fork(writeHeap(v2, readHeap(v2) * 10); print(readHeap(v2)); countDown( cnt )); fork(writeHeap(v3, readHeap(v3) * 10); print(readHeap(v3)); countDown( cnt )); await(cnt); print(100); countDown( cnt ); print(100)

Symbol table:
cnt -> 0
v1 -> (1, int)
v2 -> (2, int)
v3 -> (1, int)

Heap table:
1 -> 2
2 -> 3

Output:

File table:

------------------------
ID: 1
Execution stack:
new(v3, 4)
newLatch(cnt, readHeap(v2)); fork(writeHeap(v1, readHeap(v1) * 10); print(readHeap(v1)); countDown( cnt )); fork(writeHeap(v2, readHeap(v2) * 10); print(readHeap(v2)); countDown( cnt )); fork(writeHeap(v3, readHeap(v3) * 10); print(readHeap(v3)); countDown( cnt )); await(cnt); print(100); countDown( cnt ); print(100)

Symbol table:
cnt -> 0
v1 -> (1, int)
v2 -> (2, int)
v3 -> (1, int)

Heap table:
1 -> 2
2 -> 3

Output:

File table:

------------------------
ID: 1
Execution stack:
newLatch(cnt, readHeap(v2)); fork(writeHeap(v1, readHeap(v1) * 10); print(readHeap(v1)); countDown( cnt )); fork(writeHeap(v2, readHeap(v2) * 10); print(readHeap(v2)); countDown( cnt )); fork(writeHeap(v3, readHeap(v3) * 10); print(readHeap(v3)); countDown( cnt )); await(cnt); print(100); countDown( cnt ); print(100)

Symbol table:
cnt -> 0
v1 -> (1, int)
v2 -> (2, int)
v3 -> (3, int)

Heap table:
1 -> 2
2 -> 3
3 -> 4

Output:

File table:

------------------------
ID: 1
Execution stack:
newLatch(cnt, readHeap(v2)); fork(writeHeap(v1, readHeap(v1) * 10); print(readHeap(v1)); countDown( cnt )); fork(writeHeap(v2, readHeap(v2) * 10); print(readHeap(v2)); countDown( cnt )); fork(writeHeap(v3, readHeap(v3) * 10); print(readHeap(v3)); countDown( cnt )); await(cnt); print(100); countDown( cnt ); print(100)

Symbol table:
cnt -> 0
v1 -> (1, int)
v2 -> (2, int)
v3 -> (3, int)

Heap table:
1 -> 2
2 -> 3
3 -> 4

Output:

File table:

------------------------
ID: 1
Execution stack:
newLatch(cnt, readHeap(v2))
fork(writeHeap(v1, readHeap(v1) * 10); print(readHeap(v1)); countDown( cnt )); fork(writeHeap(v2, readHeap(v2) * 10); print(readHeap(v2)); countDown( cnt )); fork(writeHeap(v3, readHeap(v3) * 10); print(readHeap(v3)); countDown( cnt )); await(cnt); print(100); countDown( cnt ); print(100)

Symbol table:
cnt -> 0
v1 -> (1, int)
v2 -> (2, int)
v3 -> (3, int)

Heap table:
1 -> 2
2 -> 3
3 -> 4

Output:

File table:

------------------------
ID: 1
Execution stack:
newLatch(cnt, readHeap(v2))
fork(writeHeap(v1, readHeap(v1) * 10); print(readHeap(v1)); countDown( cnt )); fork(writeHeap(v2, readHeap(v2) * 10); print(readHeap(v2)); countDown( cnt )); fork(writeHeap(v3, readHeap(v3) * 10); print(readHeap(v3)); countDown( cnt )); await(cnt); print(100); countDown( cnt ); print(100)

Symbol table:
cnt -> 0
v1 -> (1, int)
v2 -> (2, int)
v3 -> (3, int)

Heap table:
1 -> 2
2 -> 3
3 -> 4

Output:

File table:

------------------------
ID: 1
Execution stack:
fork(writeHeap(v1, readHeap(v1) * 10); print(readHeap(v1)); countDown( cnt )); fork(writeHeap(v2, readHeap(v2) * 10); print(readHeap(v2)); countDown( cnt )); fork(writeHeap(v3, readHeap(v3) * 10); print(readHeap(v3)); countDown( cnt )); await(cnt); print(100); countDown( cnt ); print(100)

Symbol table:
cnt -> 1
v1 -> (1, int)
v2 -> (2, int)
v3 -> (3, int)

Heap table:
1 -> 2
2 -> 3
3 -> 4

Output:

File table:

------------------------
ID: 1
Execution stack:
fork(writeHeap(v1, readHeap(v1) * 10); print(readHeap(v1)); countDown( cnt )); fork(writeHeap(v2, readHeap(v2) * 10); print(readHeap(v2)); countDown( cnt )); fork(writeHeap(v3, readHeap(v3) * 10); print(readHeap(v3)); countDown( cnt )); await(cnt); print(100); countDown( cnt ); print(100)

Symbol table:
cnt -> 1
v1 -> (1, int)
v2 -> (2, int)
v3 -> (3, int)

Heap table:
1 -> 2
2 -> 3
3 -> 4

Output:

File table:

------------------------
ID: 1
Execution stack:
fork(writeHeap(v1, readHeap(v1) * 10); print(readHeap(v1)); countDown( cnt ))
fork(writeHeap(v2, readHeap(v2) * 10); print(readHeap(v2)); countDown( cnt )); fork(writeHeap(v3, readHeap(v3) * 10); print(readHeap(v3)); countDown( cnt )); await(cnt); print(100); countDown( cnt ); print(100)

Symbol table:
cnt -> 1
v1 -> (1, int)
v2 -> (2, int)
v3 -> (3, int)

Heap table:
1 -> 2
2 -> 3
3 -> 4

Output:

File table:

------------------------
ID: 1
Execution stack:
fork(writeHeap(v1, readHeap(v1) * 10); print(readHeap(v1)); countDown( cnt ))
fork(writeHeap(v2, readHeap(v2) * 10); print(readHeap(v2)); countDown( cnt )); fork(writeHeap(v3, readHeap(v3) * 10); print(readHeap(v3)); countDown( cnt )); await(cnt); print(100); countDown( cnt ); print(100)

Symbol table:
cnt -> 1
v1 -> (1, int)
v2 -> (2, int)
v3 -> (3, int)

Heap table:
1 -> 2
2 -> 3
3 -> 4

Output:

File table:

------------------------
ID: 1
Execution stack:
fork(writeHeap(v2, readHeap(v2) * 10); print(readHeap(v2)); countDown( cnt )); fork(writeHeap(v3, readHeap(v3) * 10); print(readHeap(v3)); countDown( cnt )); await(cnt); print(100); countDown( cnt ); print(100)

Symbol table:
cnt -> 1
v1 -> (1, int)
v2 -> (2, int)
v3 -> (3, int)

Heap table:
1 -> 2
2 -> 3
3 -> 4

Output:

File table:

------------------------
ID: 2
Execution stack:
writeHeap(v1, readHeap(v1) * 10); print(readHeap(v1)); countDown( cnt )

Symbol table:
cnt -> 1
v1 -> (1, int)
v2 -> (2, int)
v3 -> (3, int)

Heap table:
1 -> 2
2 -> 3
3 -> 4

Output:

File table:

------------------------
ID: 1
Execution stack:
fork(writeHeap(v2, readHeap(v2) * 10); print(readHeap(v2)); countDown( cnt )); fork(writeHeap(v3, readHeap(v3) * 10); print(readHeap(v3)); countDown( cnt )); await(cnt); print(100); countDown( cnt ); print(100)

Symbol table:
cnt -> 1
v1 -> (1, int)
v2 -> (2, int)
v3 -> (3, int)

Heap table:
1 -> 2
2 -> 3
3 -> 4

Output:

File table:

------------------------
ID: 2
Execution stack:
writeHeap(v1, readHeap(v1) * 10); print(readHeap(v1)); countDown( cnt )

Symbol table:
cnt -> 1
v1 -> (1, int)
v2 -> (2, int)
v3 -> (3, int)

Heap table:
1 -> 2
2 -> 3
3 -> 4

Output:

File table:

------------------------
ID: 1
Execution stack:
fork(writeHeap(v2, readHeap(v2) * 10); print(readHeap(v2)); countDown( cnt ))
fork(writeHeap(v3, readHeap(v3) * 10); print(readHeap(v3)); countDown( cnt )); await(cnt); print(100); countDown( cnt ); print(100)

Symbol table:
cnt -> 1
v1 -> (1, int)
v2 -> (2, int)
v3 -> (3, int)

Heap table:
1 -> 2
2 -> 3
3 -> 4

Output:

File table:

------------------------
ID: 2
Execution stack:
writeHeap(v1, readHeap(v1) * 10)
print(readHeap(v1)); countDown( cnt )

Symbol table:
cnt -> 1
v1 -> (1, int)
v2 -> (2, int)
v3 -> (3, int)

Heap table:
1 -> 2
2 -> 3
3 -> 4

Output:

File table:

------------------------
ID: 1
Execution stack:
fork(writeHeap(v2, readHeap(v2) * 10); print(readHeap(v2)); countDown( cnt ))
fork(writeHeap(v3, readHeap(v3) * 10); print(readHeap(v3)); countDown( cnt )); await(cnt); print(100); countDown( cnt ); print(100)

Symbol table:
cnt -> 1
v1 -> (1, int)
v2 -> (2, int)
v3 -> (3, int)

Heap table:
1 -> 2
2 -> 3
3 -> 4

Output:

File table:

------------------------
ID: 2
Execution stack:
writeHeap(v1, readHeap(v1) * 10)
print(readHeap(v1)); countDown( cnt )

Symbol table:
cnt -> 1
v1 -> (1, int)
v2 -> (2, int)
v3 -> (3, int)

Heap table:
1 -> 2
2 -> 3
3 -> 4

Output:

File table:

------------------------
ID: 1
Execution stack:
fork(writeHeap(v3, readHeap(v3) * 10); print(readHeap(v3)); countDown( cnt )); await(cnt); print(100); countDown( cnt ); print(100)

Symbol table:
cnt -> 1
v1 -> (1, int)
v2 -> (2, int)
v3 -> (3, int)

Heap table:
1 -> 20
2 -> 3
3 -> 4

Output:

File table:

------------------------
ID: 2
Execution stack:
print(readHeap(v1)); countDown( cnt )

Symbol table:
cnt -> 1
v1 -> (1, int)
v2 -> (2, int)
v3 -> (3, int)

Heap table:
1 -> 20
2 -> 3
3 -> 4

Output:

File table:

------------------------
ID: 3
Execution stack:
writeHeap(v2, readHeap(v2) * 10); print(readHeap(v2)); countDown( cnt )

Symbol table:
cnt -> 1
v1 -> (1, int)
v2 -> (2, int)
v3 -> (3, int)

Heap table:
1 -> 20
2 -> 3
3 -> 4

Output:

File table:

------------------------
ID: 1
Execution stack:
fork(writeHeap(v3, readHeap(v3) * 10); print(readHeap(v3)); countDown( cnt )); await(cnt); print(100); countDown( cnt ); print(100)

Symbol table:
cnt -> 1
v1 -> (1, int)
v2 -> (2, int)
v3 -> (3, int)

Heap table:
1 -> 20
2 -> 3
3 -> 4

Output:

File table:

------------------------
ID: 2
Execution stack:
print(readHeap(v1)); countDown( cnt )

Symbol table:
cnt -> 1
v1 -> (1, int)
v2 -> (2, int)
v3 -> (3, int)

Heap table:
1 -> 20
2 -> 3
3 -> 4

Output:

File table:

------------------------
ID: 3
Execution stack:
writeHeap(v2, readHeap(v2) * 10); print(readHeap(v2)); countDown( cnt )

Symbol table:
cnt -> 1
v1 -> (1, int)
v2 -> (2, int)
v3 -> (3, int)

Heap table:
1 -> 20
2 -> 3
3 -> 4

Output:

File table:

------------------------
ID: 1
Execution stack:
fork(writeHeap(v3, readHeap(v3) * 10); print(readHeap(v3)); countDown( cnt ))
await(cnt); print(100); countDown( cnt ); print(100)

Symbol table:
cnt -> 1
v1 -> (1, int)
v2 -> (2, int)
v3 -> (3, int)

Heap table:
1 -> 20
2 -> 3
3 -> 4

Output:

File table:

------------------------
ID: 2
Execution stack:
print(readHeap(v1))
countDown( cnt )

Symbol table:
cnt -> 1
v1 -> (1, int)
v2 -> (2, int)
v3 -> (3, int)

Heap table:
1 -> 20
2 -> 3
3 -> 4

Output:

File table:

------------------------
ID: 3
Execution stack:
writeHeap(v2, readHeap(v2) * 10)
print(readHeap(v2)); countDown( cnt )

Symbol table:
cnt -> 1
v1 -> (1, int)
v2 -> (2, int)
v3 -> (3, int)

Heap table:
1 -> 20
2 -> 3
3 -> 4

Output:

File table:

------------------------
ID: 1
Execution stack:
fork(writeHeap(v3, readHeap(v3) * 10); print(readHeap(v3)); countDown( cnt ))
await(cnt); print(100); countDown( cnt ); print(100)

Symbol table:
cnt -> 1
v1 -> (1, int)
v2 -> (2, int)
v3 -> (3, int)

Heap table:
1 -> 20
2 -> 3
3 -> 4

Output:

File table:

------------------------
ID: 2
Execution stack:
print(readHeap(v1))
countDown( cnt )

Symbol table:
cnt -> 1
v1 -> (1, int)
v2 -> (2, int)
v3 -> (3, int)

Heap table:
1 -> 20
2 -> 3
3 -> 4

Output:

File table:

------------------------
ID: 3
Execution stack:
writeHeap(v2, readHeap(v2) * 10)
print(readHeap(v2)); countDown( cnt )

Symbol table:
cnt -> 1
v1 -> (1, int)
v2 -> (2, int)
v3 -> (3, int)

Heap table:
1 -> 20
2 -> 3
3 -> 4

Output:

File table:

------------------------
ID: 1
Execution stack:
await(cnt); print(100); countDown( cnt ); print(100)

Symbol table:
cnt -> 1
v1 -> (1, int)
v2 -> (2, int)
v3 -> (3, int)

Heap table:
1 -> 20
2 -> 30
3 -> 4

Output:
20

File table:

------------------------
ID: 2
Execution stack:
countDown( cnt )

Symbol table:
cnt -> 1
v1 -> (1, int)
v2 -> (2, int)
v3 -> (3, int)

Heap table:
1 -> 20
2 -> 30
3 -> 4

Output:
20

File table:

------------------------
ID: 3
Execution stack:
print(readHeap(v2)); countDown( cnt )

Symbol table:
cnt -> 1
v1 -> (1, int)
v2 -> (2, int)
v3 -> (3, int)

Heap table:
1 -> 20
2 -> 30
3 -> 4

Output:
20

File table:

------------------------
ID: 4
Execution stack:
writeHeap(v3, readHeap(v3) * 10); print(readHeap(v3)); countDown( cnt )

Symbol table:
cnt -> 1
v1 -> (1, int)
v2 -> (2, int)
v3 -> (3, int)

Heap table:
1 -> 20
2 -> 30
3 -> 4

Output:
20

File table:

------------------------
ID: 1
Execution stack:
await(cnt); print(100); countDown( cnt ); print(100)

Symbol table:
cnt -> 1
v1 -> (1, int)
v2 -> (2, int)
v3 -> (3, int)

Heap table:
1 -> 20
2 -> 30
3 -> 4

Output:
20

File table:

------------------------
ID: 2
Execution stack:
countDown( cnt )

Symbol table:
cnt -> 1
v1 -> (1, int)
v2 -> (2, int)
v3 -> (3, int)

Heap table:
1 -> 20
2 -> 30
3 -> 4

Output:
20

File table:

------------------------
ID: 3
Execution stack:
print(readHeap(v2)); countDown( cnt )

Symbol table:
cnt -> 1
v1 -> (1, int)
v2 -> (2, int)
v3 -> (3, int)

Heap table:
1 -> 20
2 -> 30
3 -> 4

Output:
20

File table:

------------------------
ID: 4
Execution stack:
writeHeap(v3, readHeap(v3) * 10); print(readHeap(v3)); countDown( cnt )

Symbol table:
cnt -> 1
v1 -> (1, int)
v2 -> (2, int)
v3 -> (3, int)

Heap table:
1 -> 20
2 -> 30
3 -> 4

Output:
20

File table:

------------------------
ID: 1
Execution stack:
await(cnt)
print(100); countDown( cnt ); print(100)

Symbol table:
cnt -> 1
v1 -> (1, int)
v2 -> (2, int)
v3 -> (3, int)

Heap table:
1 -> 20
2 -> 30
3 -> 4

Output:
20
2

File table:

------------------------
ID: 2
Execution stack:

Symbol table:
cnt -> 1
v1 -> (1, int)
v2 -> (2, int)
v3 -> (3, int)

Heap table:
1 -> 20
2 -> 30
3 -> 4

Output:
20
2

File table:

------------------------
ID: 3
Execution stack:
print(readHeap(v2))
countDown( cnt )

Symbol table:
cnt -> 1
v1 -> (1, int)
v2 -> (2, int)
v3 -> (3, int)

Heap table:
1 -> 20
2 -> 30
3 -> 4

Output:
20
2

File table:

------------------------
ID: 4
Execution stack:
writeHeap(v3, readHeap(v3) * 10)
print(readHeap(v3)); countDown( cnt )

Symbol table:
cnt -> 1
v1 -> (1, int)
v2 -> (2, int)
v3 -> (3, int)

Heap table:
1 -> 20
2 -> 30
3 -> 4

Output:
20
2

File table:

------------------------
ID: 1
Execution stack:
await(cnt)
print(100); countDown( cnt ); print(100)

Symbol table:
cnt -> 1
v1 -> (1, int)
v2 -> (2, int)
v3 -> (3, int)

Heap table:
1 -> 20
2 -> 30
3 -> 4

Output:
20
2

File table:

------------------------
ID: 3
Execution stack:
print(readHeap(v2))
countDown( cnt )

Symbol table:
cnt -> 1
v1 -> (1, int)
v2 -> (2, int)
v3 -> (3, int)

Heap table:
1 -> 20
2 -> 30
3 -> 4

Output:
20
2

File table:

------------------------
ID: 4
Execution stack:
writeHeap(v3, readHeap(v3) * 10)
print(readHeap(v3)); countDown( cnt )

Symbol table:
cnt -> 1
v1 -> (1, int)
v2 -> (2, int)
v3 -> (3, int)

Heap table:
1 -> 20
2 -> 30
3 -> 4

Output:
20
2

File table:

------------------------
ID: 1
Execution stack:
await(cnt)
print(100); countDown( cnt ); print(100)

Symbol table:
cnt -> 1
v1 -> (1, int)
v2 -> (2, int)
v3 -> (3, int)

Heap table:
1 -> 20
2 -> 30
3 -> 40

Output:
20
2
30

File table:

------------------------
ID: 3
Execution stack:
countDown( cnt )

Symbol table:
cnt -> 1
v1 -> (1, int)
v2 -> (2, int)
v3 -> (3, int)

Heap table:
1 -> 20
2 -> 30
3 -> 40

Output:
20
2
30

File table:

------------------------
ID: 4
Execution stack:
print(readHeap(v3)); countDown( cnt )

Symbol table:
cnt -> 1
v1 -> (1, int)
v2 -> (2, int)
v3 -> (3, int)

Heap table:
1 -> 20
2 -> 30
3 -> 40

Output:
20
2
30

File table:

------------------------
ID: 1
Execution stack:
await(cnt)
print(100); countDown( cnt ); print(100)

Symbol table:
cnt -> 1
v1 -> (1, int)
v2 -> (2, int)
v3 -> (3, int)

Heap table:
1 -> 20
2 -> 30
3 -> 40

Output:
20
2
30

File table:

------------------------
ID: 3
Execution stack:
countDown( cnt )

Symbol table:
cnt -> 1
v1 -> (1, int)
v2 -> (2, int)
v3 -> (3, int)

Heap table:
1 -> 20
2 -> 30
3 -> 40

Output:
20
2
30

File table:

------------------------
ID: 4
Execution stack:
print(readHeap(v3)); countDown( cnt )

Symbol table:
cnt -> 1
v1 -> (1, int)
v2 -> (2, int)
v3 -> (3, int)

Heap table:
1 -> 20
2 -> 30
3 -> 40

Output:
20
2
30

File table:

------------------------
ID: 1
Execution stack:
await(cnt)
print(100); countDown( cnt ); print(100)

Symbol table:
cnt -> 1
v1 -> (1, int)
v2 -> (2, int)
v3 -> (3, int)

Heap table:
1 -> 20
2 -> 30
3 -> 40

Output:
20
2
30
3

File table:

------------------------
ID: 3
Execution stack:

Symbol table:
cnt -> 1
v1 -> (1, int)
v2 -> (2, int)
v3 -> (3, int)

Heap table:
1 -> 20
2 -> 30
3 -> 40

Output:
20
2
30
3

File table:

------------------------
ID: 4
Execution stack:
print(readHeap(v3))
countDown( cnt )

Symbol table:
cnt -> 1
v1 -> (1, int)
v2 -> (2, int)
v3 -> (3, int)

Heap table:
1 -> 20
2 -> 30
3 -> 40

Output:
20
2
30
3

File table:

------------------------
ID: 1
Execution stack:
await(cnt)
print(100); countDown( cnt ); print(100)

Symbol table:
cnt -> 1
v1 -> (1, int)
v2 -> (2, int)
v3 -> (3, int)

Heap table:
1 -> 20
2 -> 30
3 -> 40

Output:
20
2
30
3

File table:

------------------------
ID: 4
Execution stack:
print(readHeap(v3))
countDown( cnt )

Symbol table:
cnt -> 1
v1 -> (1, int)
v2 -> (2, int)
v3 -> (3, int)

Heap table:
1 -> 20
2 -> 30
3 -> 40

Output:
20
2
30
3

File table:

------------------------
ID: 1
Execution stack:
await(cnt)
print(100); countDown( cnt ); print(100)

Symbol table:
cnt -> 1
v1 -> (1, int)
v2 -> (2, int)
v3 -> (3, int)

Heap table:
1 -> 20
2 -> 30
3 -> 40

Output:
20
2
30
3
40

File table:

------------------------
ID: 4
Execution stack:
countDown( cnt )

Symbol table:
cnt -> 1
v1 -> (1, int)
v2 -> (2, int)
v3 -> (3, int)

Heap table:
1 -> 20
2 -> 30
3 -> 40

Output:
20
2
30
3
40

File table:

------------------------
ID: 1
Execution stack:
await(cnt)
print(100); countDown( cnt ); print(100)

Symbol table:
cnt -> 1
v1 -> (1, int)
v2 -> (2, int)
v3 -> (3, int)

Heap table:
1 -> 20
2 -> 30
3 -> 40

Output:
20
2
30
3
40

File table:

------------------------
ID: 4
Execution stack:
countDown( cnt )

Symbol table:
cnt -> 1
v1 -> (1, int)
v2 -> (2, int)
v3 -> (3, int)

Heap table:
1 -> 20
2 -> 30
3 -> 40

Output:
20
2
30
3
40

File table:

------------------------
ID: 1
Execution stack:
await(cnt)
print(100); countDown( cnt ); print(100)

Symbol table:
cnt -> 1
v1 -> (1, int)
v2 -> (2, int)
v3 -> (3, int)

Heap table:
1 -> 20
2 -> 30
3 -> 40

Output:
20
2
30
3
40
4

File table:

------------------------
ID: 4
Execution stack:

Symbol table:
cnt -> 1
v1 -> (1, int)
v2 -> (2, int)
v3 -> (3, int)

Heap table:
1 -> 20
2 -> 30
3 -> 40

Output:
20
2
30
3
40
4

File table:

------------------------
ID: 1
Execution stack:
await(cnt)
print(100); countDown( cnt ); print(100)

Symbol table:
cnt -> 1
v1 -> (1, int)
v2 -> (2, int)
v3 -> (3, int)

Heap table:
1 -> 20
2 -> 30
3 -> 40

Output:
20
2
30
3
40
4

File table:

------------------------
ID: 1
Execution stack:
await(cnt)
print(100); countDown( cnt ); print(100)

Symbol table:
cnt -> 1
v1 -> (1, int)
v2 -> (2, int)
v3 -> (3, int)

Heap table:
1 -> 20
2 -> 30
3 -> 40

Output:
20
2
30
3
40
4

File table:

------------------------
ID: 1
Execution stack:
await(cnt)
print(100); countDown( cnt ); print(100)

Symbol table:
cnt -> 1
v1 -> (1, int)
v2 -> (2, int)
v3 -> (3, int)

Heap table:
1 -> 20
2 -> 30
3 -> 40

Output:
20
2
30
3
40
4

File table:

------------------------
ID: 1
Execution stack:
await(cnt)
print(100); countDown( cnt ); print(100)

Symbol table:
cnt -> 1
v1 -> (1, int)
v2 -> (2, int)
v3 -> (3, int)

Heap table:
1 -> 20
2 -> 30
3 -> 40

Output:
20
2
30
3
40
4

File table:

------------------------
ID: 1
Execution stack:
await(cnt)
print(100); countDown( cnt ); print(100)

Symbol table:
cnt -> 1
v1 -> (1, int)
v2 -> (2, int)
v3 -> (3, int)

Heap table:
1 -> 20
2 -> 30
3 -> 40

Output:
20
2
30
3
40
4

File table:

------------------------
ID: 1
Execution stack:
await(cnt)
print(100); countDown( cnt ); print(100)

Symbol table:
cnt -> 1
v1 -> (1, int)
v2 -> (2, int)
v3 -> (3, int)

Heap table:
1 -> 20
2 -> 30
3 -> 40

Output:
20
2
30
3
40
4

File table:

------------------------
ID: 1
Execution stack:
await(cnt)
print(100); countDown( cnt ); print(100)

Symbol table:
cnt -> 1
v1 -> (1, int)
v2 -> (2, int)
v3 -> (3, int)

Heap table:
1 -> 20
2 -> 30
3 -> 40

Output:
20
2
30
3
40
4

File table:

------------------------
ID: 1
Execution stack:
await(cnt)
print(100); countDown( cnt ); print(100)

Symbol table:
cnt -> 1
v1 -> (1, int)
v2 -> (2, int)
v3 -> (3, int)

Heap table:
1 -> 20
2 -> 30
3 -> 40

Output:
20
2
30
3
40
4

File table:

------------------------
ID: 1
Execution stack:
await(cnt)
print(100); countDown( cnt ); print(100)

Symbol table:
cnt -> 1
v1 -> (1, int)
v2 -> (2, int)
v3 -> (3, int)

Heap table:
1 -> 20
2 -> 30
3 -> 40

Output:
20
2
30
3
40
4

File table:

------------------------
ID: 1
Execution stack:
await(cnt)
print(100); countDown( cnt ); print(100)

Symbol table:
cnt -> 1
v1 -> (1, int)
v2 -> (2, int)
v3 -> (3, int)

Heap table:
1 -> 20
2 -> 30
3 -> 40

Output:
20
2
30
3
40
4

File table:

------------------------
ID: 1
Execution stack:
await(cnt)
print(100); countDown( cnt ); print(100)

Symbol table:
cnt -> 1
v1 -> (1, int)
v2 -> (2, int)
v3 -> (3, int)

Heap table:
1 -> 20
2 -> 30
3 -> 40

Output:
20
2
30
3
40
4

File table:

------------------------
ID: 1
Execution stack:
await(cnt)
print(100); countDown( cnt ); print(100)

Symbol table:
cnt -> 1
v1 -> (1, int)
v2 -> (2, int)
v3 -> (3, int)

Heap table:
1 -> 20
2 -> 30
3 -> 40

Output:
20
2
30
3
40
4

File table:

------------------------
ID: 1
Execution stack:
await(cnt)
print(100); countDown( cnt ); print(100)

Symbol table:
cnt -> 1
v1 -> (1, int)
v2 -> (2, int)
v3 -> (3, int)

Heap table:
1 -> 20
2 -> 30
3 -> 40

Output:
20
2
30
3
40
4

File table:

------------------------
ID: 1
Execution stack:
await(cnt)
print(100); countDown( cnt ); print(100)

Symbol table:
cnt -> 1
v1 -> (1, int)
v2 -> (2, int)
v3 -> (3, int)

Heap table:
1 -> 20
2 -> 30
3 -> 40

Output:
20
2
30
3
40
4

File table:

------------------------
ID: 1
Execution stack:
await(cnt)
print(100); countDown( cnt ); print(100)

Symbol table:
cnt -> 1
v1 -> (1, int)
v2 -> (2, int)
v3 -> (3, int)

Heap table:
1 -> 20
2 -> 30
3 -> 40

Output:
20
2
30
3
40
4

File table:

------------------------
ID: 1
Execution stack:
await(cnt)
print(100); countDown( cnt ); print(100)

Symbol table:
cnt -> 1
v1 -> (1, int)
v2 -> (2, int)
v3 -> (3, int)

Heap table:
1 -> 20
2 -> 30
3 -> 40

Output:
20
2
30
3
40
4

File table:

------------------------
ID: 1
Execution stack:
await(cnt)
print(100); countDown( cnt ); print(100)

Symbol table:
cnt -> 1
v1 -> (1, int)
v2 -> (2, int)
v3 -> (3, int)

Heap table:
1 -> 20
2 -> 30
3 -> 40

Output:
20
2
30
3
40
4

File table:

------------------------
ID: 1
Execution stack:
await(cnt)
print(100); countDown( cnt ); print(100)

Symbol table:
cnt -> 1
v1 -> (1, int)
v2 -> (2, int)
v3 -> (3, int)

Heap table:
1 -> 20
2 -> 30
3 -> 40

Output:
20
2
30
3
40
4

File table:

------------------------
ID: 1
Execution stack:
int cnt; Ref(int) v1; Ref(int) v2; Ref(int) v3; new(v1, 2); new(v2, 3); new(v3, 4); newLatch(cnt, readHeap(v2)); fork(writeHeap(v1, readHeap(v1) * 10); print(readHeap(v1)); countDown( cnt )); fork(writeHeap(v2, readHeap(v2) * 10); print(readHeap(v2)); countDown( cnt )); fork(writeHeap(v3, readHeap(v3) * 10); print(readHeap(v3)); countDown( cnt )); await(cnt); print(100); countDown( cnt ); print(100)

Symbol table:

Heap table:

Output:

File table:

------------------------
ID: 1
Execution stack:
int cnt
Ref(int) v1; Ref(int) v2; Ref(int) v3; new(v1, 2); new(v2, 3); new(v3, 4); newLatch(cnt, readHeap(v2)); fork(writeHeap(v1, readHeap(v1) * 10); print(readHeap(v1)); countDown( cnt )); fork(writeHeap(v2, readHeap(v2) * 10); print(readHeap(v2)); countDown( cnt )); fork(writeHeap(v3, readHeap(v3) * 10); print(readHeap(v3)); countDown( cnt )); await(cnt); print(100); countDown( cnt ); print(100)

Symbol table:

Heap table:

Output:

File table:

------------------------
ID: 1
Execution stack:
int cnt
Ref(int) v1; Ref(int) v2; Ref(int) v3; new(v1, 2); new(v2, 3); new(v3, 4); newLatch(cnt, readHeap(v2)); fork(writeHeap(v1, readHeap(v1) * 10); print(readHeap(v1)); countDown( cnt )); fork(writeHeap(v2, readHeap(v2) * 10); print(readHeap(v2)); countDown( cnt )); fork(writeHeap(v3, readHeap(v3) * 10); print(readHeap(v3)); countDown( cnt )); await(cnt); print(100); countDown( cnt ); print(100)

Symbol table:

Heap table:

Output:

File table:

------------------------
ID: 1
Execution stack:
Ref(int) v1; Ref(int) v2; Ref(int) v3; new(v1, 2); new(v2, 3); new(v3, 4); newLatch(cnt, readHeap(v2)); fork(writeHeap(v1, readHeap(v1) * 10); print(readHeap(v1)); countDown( cnt )); fork(writeHeap(v2, readHeap(v2) * 10); print(readHeap(v2)); countDown( cnt )); fork(writeHeap(v3, readHeap(v3) * 10); print(readHeap(v3)); countDown( cnt )); await(cnt); print(100); countDown( cnt ); print(100)

Symbol table:
cnt -> 0

Heap table:

Output:

File table:

------------------------
ID: 1
Execution stack:
Ref(int) v1; Ref(int) v2; Ref(int) v3; new(v1, 2); new(v2, 3); new(v3, 4); newLatch(cnt, readHeap(v2)); fork(writeHeap(v1, readHeap(v1) * 10); print(readHeap(v1)); countDown( cnt )); fork(writeHeap(v2, readHeap(v2) * 10); print(readHeap(v2)); countDown( cnt )); fork(writeHeap(v3, readHeap(v3) * 10); print(readHeap(v3)); countDown( cnt )); await(cnt); print(100); countDown( cnt ); print(100)

Symbol table:
cnt -> 0

Heap table:

Output:

File table:

------------------------
ID: 1
Execution stack:
Ref(int) v1
Ref(int) v2; Ref(int) v3; new(v1, 2); new(v2, 3); new(v3, 4); newLatch(cnt, readHeap(v2)); fork(writeHeap(v1, readHeap(v1) * 10); print(readHeap(v1)); countDown( cnt )); fork(writeHeap(v2, readHeap(v2) * 10); print(readHeap(v2)); countDown( cnt )); fork(writeHeap(v3, readHeap(v3) * 10); print(readHeap(v3)); countDown( cnt )); await(cnt); print(100); countDown( cnt ); print(100)

Symbol table:
cnt -> 0

Heap table:

Output:

File table:

------------------------
ID: 1
Execution stack:
Ref(int) v1
Ref(int) v2; Ref(int) v3; new(v1, 2); new(v2, 3); new(v3, 4); newLatch(cnt, readHeap(v2)); fork(writeHeap(v1, readHeap(v1) * 10); print(readHeap(v1)); countDown( cnt )); fork(writeHeap(v2, readHeap(v2) * 10); print(readHeap(v2)); countDown( cnt )); fork(writeHeap(v3, readHeap(v3) * 10); print(readHeap(v3)); countDown( cnt )); await(cnt); print(100); countDown( cnt ); print(100)

Symbol table:
cnt -> 0

Heap table:

Output:

File table:

------------------------
ID: 1
Execution stack:
Ref(int) v2; Ref(int) v3; new(v1, 2); new(v2, 3); new(v3, 4); newLatch(cnt, readHeap(v2)); fork(writeHeap(v1, readHeap(v1) * 10); print(readHeap(v1)); countDown( cnt )); fork(writeHeap(v2, readHeap(v2) * 10); print(readHeap(v2)); countDown( cnt )); fork(writeHeap(v3, readHeap(v3) * 10); print(readHeap(v3)); countDown( cnt )); await(cnt); print(100); countDown( cnt ); print(100)

Symbol table:
cnt -> 0
v1 -> (1, int)

Heap table:

Output:

File table:

------------------------
ID: 1
Execution stack:
Ref(int) v2; Ref(int) v3; new(v1, 2); new(v2, 3); new(v3, 4); newLatch(cnt, readHeap(v2)); fork(writeHeap(v1, readHeap(v1) * 10); print(readHeap(v1)); countDown( cnt )); fork(writeHeap(v2, readHeap(v2) * 10); print(readHeap(v2)); countDown( cnt )); fork(writeHeap(v3, readHeap(v3) * 10); print(readHeap(v3)); countDown( cnt )); await(cnt); print(100); countDown( cnt ); print(100)

Symbol table:
cnt -> 0
v1 -> (1, int)

Heap table:

Output:

File table:

------------------------
ID: 1
Execution stack:
Ref(int) v2
Ref(int) v3; new(v1, 2); new(v2, 3); new(v3, 4); newLatch(cnt, readHeap(v2)); fork(writeHeap(v1, readHeap(v1) * 10); print(readHeap(v1)); countDown( cnt )); fork(writeHeap(v2, readHeap(v2) * 10); print(readHeap(v2)); countDown( cnt )); fork(writeHeap(v3, readHeap(v3) * 10); print(readHeap(v3)); countDown( cnt )); await(cnt); print(100); countDown( cnt ); print(100)

Symbol table:
cnt -> 0
v1 -> (1, int)

Heap table:

Output:

File table:

------------------------
ID: 1
Execution stack:
Ref(int) v2
Ref(int) v3; new(v1, 2); new(v2, 3); new(v3, 4); newLatch(cnt, readHeap(v2)); fork(writeHeap(v1, readHeap(v1) * 10); print(readHeap(v1)); countDown( cnt )); fork(writeHeap(v2, readHeap(v2) * 10); print(readHeap(v2)); countDown( cnt )); fork(writeHeap(v3, readHeap(v3) * 10); print(readHeap(v3)); countDown( cnt )); await(cnt); print(100); countDown( cnt ); print(100)

Symbol table:
cnt -> 0
v1 -> (1, int)

Heap table:

Output:

File table:

------------------------
ID: 1
Execution stack:
Ref(int) v3; new(v1, 2); new(v2, 3); new(v3, 4); newLatch(cnt, readHeap(v2)); fork(writeHeap(v1, readHeap(v1) * 10); print(readHeap(v1)); countDown( cnt )); fork(writeHeap(v2, readHeap(v2) * 10); print(readHeap(v2)); countDown( cnt )); fork(writeHeap(v3, readHeap(v3) * 10); print(readHeap(v3)); countDown( cnt )); await(cnt); print(100); countDown( cnt ); print(100)

Symbol table:
cnt -> 0
v1 -> (1, int)
v2 -> (1, int)

Heap table:

Output:

File table:

------------------------
ID: 1
Execution stack:
Ref(int) v3; new(v1, 2); new(v2, 3); new(v3, 4); newLatch(cnt, readHeap(v2)); fork(writeHeap(v1, readHeap(v1) * 10); print(readHeap(v1)); countDown( cnt )); fork(writeHeap(v2, readHeap(v2) * 10); print(readHeap(v2)); countDown( cnt )); fork(writeHeap(v3, readHeap(v3) * 10); print(readHeap(v3)); countDown( cnt )); await(cnt); print(100); countDown( cnt ); print(100)

Symbol table:
cnt -> 0
v1 -> (1, int)
v2 -> (1, int)

Heap table:

Output:

File table:

------------------------
ID: 1
Execution stack:
Ref(int) v3
new(v1, 2); new(v2, 3); new(v3, 4); newLatch(cnt, readHeap(v2)); fork(writeHeap(v1, readHeap(v1) * 10); print(readHeap(v1)); countDown( cnt )); fork(writeHeap(v2, readHeap(v2) * 10); print(readHeap(v2)); countDown( cnt )); fork(writeHeap(v3, readHeap(v3) * 10); print(readHeap(v3)); countDown( cnt )); await(cnt); print(100); countDown( cnt ); print(100)

Symbol table:
cnt -> 0
v1 -> (1, int)
v2 -> (1, int)

Heap table:

Output:

File table:

------------------------
ID: 1
Execution stack:
Ref(int) v3
new(v1, 2); new(v2, 3); new(v3, 4); newLatch(cnt, readHeap(v2)); fork(writeHeap(v1, readHeap(v1) * 10); print(readHeap(v1)); countDown( cnt )); fork(writeHeap(v2, readHeap(v2) * 10); print(readHeap(v2)); countDown( cnt )); fork(writeHeap(v3, readHeap(v3) * 10); print(readHeap(v3)); countDown( cnt )); await(cnt); print(100); countDown( cnt ); print(100)

Symbol table:
cnt -> 0
v1 -> (1, int)
v2 -> (1, int)

Heap table:

Output:

File table:

------------------------
ID: 1
Execution stack:
new(v1, 2); new(v2, 3); new(v3, 4); newLatch(cnt, readHeap(v2)); fork(writeHeap(v1, readHeap(v1) * 10); print(readHeap(v1)); countDown( cnt )); fork(writeHeap(v2, readHeap(v2) * 10); print(readHeap(v2)); countDown( cnt )); fork(writeHeap(v3, readHeap(v3) * 10); print(readHeap(v3)); countDown( cnt )); await(cnt); print(100); countDown( cnt ); print(100)

Symbol table:
cnt -> 0
v1 -> (1, int)
v2 -> (1, int)
v3 -> (1, int)

Heap table:

Output:

File table:

------------------------
ID: 1
Execution stack:
new(v1, 2); new(v2, 3); new(v3, 4); newLatch(cnt, readHeap(v2)); fork(writeHeap(v1, readHeap(v1) * 10); print(readHeap(v1)); countDown( cnt )); fork(writeHeap(v2, readHeap(v2) * 10); print(readHeap(v2)); countDown( cnt )); fork(writeHeap(v3, readHeap(v3) * 10); print(readHeap(v3)); countDown( cnt )); await(cnt); print(100); countDown( cnt ); print(100)

Symbol table:
cnt -> 0
v1 -> (1, int)
v2 -> (1, int)
v3 -> (1, int)

Heap table:

Output:

File table:

------------------------
ID: 1
Execution stack:
new(v1, 2)
new(v2, 3); new(v3, 4); newLatch(cnt, readHeap(v2)); fork(writeHeap(v1, readHeap(v1) * 10); print(readHeap(v1)); countDown( cnt )); fork(writeHeap(v2, readHeap(v2) * 10); print(readHeap(v2)); countDown( cnt )); fork(writeHeap(v3, readHeap(v3) * 10); print(readHeap(v3)); countDown( cnt )); await(cnt); print(100); countDown( cnt ); print(100)

Symbol table:
cnt -> 0
v1 -> (1, int)
v2 -> (1, int)
v3 -> (1, int)

Heap table:

Output:

File table:

------------------------
ID: 1
Execution stack:
new(v1, 2)
new(v2, 3); new(v3, 4); newLatch(cnt, readHeap(v2)); fork(writeHeap(v1, readHeap(v1) * 10); print(readHeap(v1)); countDown( cnt )); fork(writeHeap(v2, readHeap(v2) * 10); print(readHeap(v2)); countDown( cnt )); fork(writeHeap(v3, readHeap(v3) * 10); print(readHeap(v3)); countDown( cnt )); await(cnt); print(100); countDown( cnt ); print(100)

Symbol table:
cnt -> 0
v1 -> (1, int)
v2 -> (1, int)
v3 -> (1, int)

Heap table:

Output:

File table:

------------------------
ID: 1
Execution stack:
new(v2, 3); new(v3, 4); newLatch(cnt, readHeap(v2)); fork(writeHeap(v1, readHeap(v1) * 10); print(readHeap(v1)); countDown( cnt )); fork(writeHeap(v2, readHeap(v2) * 10); print(readHeap(v2)); countDown( cnt )); fork(writeHeap(v3, readHeap(v3) * 10); print(readHeap(v3)); countDown( cnt )); await(cnt); print(100); countDown( cnt ); print(100)

Symbol table:
cnt -> 0
v1 -> (1, int)
v2 -> (1, int)
v3 -> (1, int)

Heap table:
1 -> 2

Output:

File table:

------------------------
ID: 1
Execution stack:
new(v2, 3); new(v3, 4); newLatch(cnt, readHeap(v2)); fork(writeHeap(v1, readHeap(v1) * 10); print(readHeap(v1)); countDown( cnt )); fork(writeHeap(v2, readHeap(v2) * 10); print(readHeap(v2)); countDown( cnt )); fork(writeHeap(v3, readHeap(v3) * 10); print(readHeap(v3)); countDown( cnt )); await(cnt); print(100); countDown( cnt ); print(100)

Symbol table:
cnt -> 0
v1 -> (1, int)
v2 -> (1, int)
v3 -> (1, int)

Heap table:
1 -> 2

Output:

File table:

------------------------
ID: 1
Execution stack:
new(v2, 3)
new(v3, 4); newLatch(cnt, readHeap(v2)); fork(writeHeap(v1, readHeap(v1) * 10); print(readHeap(v1)); countDown( cnt )); fork(writeHeap(v2, readHeap(v2) * 10); print(readHeap(v2)); countDown( cnt )); fork(writeHeap(v3, readHeap(v3) * 10); print(readHeap(v3)); countDown( cnt )); await(cnt); print(100); countDown( cnt ); print(100)

Symbol table:
cnt -> 0
v1 -> (1, int)
v2 -> (1, int)
v3 -> (1, int)

Heap table:
1 -> 2

Output:

File table:

------------------------
ID: 1
Execution stack:
new(v2, 3)
new(v3, 4); newLatch(cnt, readHeap(v2)); fork(writeHeap(v1, readHeap(v1) * 10); print(readHeap(v1)); countDown( cnt )); fork(writeHeap(v2, readHeap(v2) * 10); print(readHeap(v2)); countDown( cnt )); fork(writeHeap(v3, readHeap(v3) * 10); print(readHeap(v3)); countDown( cnt )); await(cnt); print(100); countDown( cnt ); print(100)

Symbol table:
cnt -> 0
v1 -> (1, int)
v2 -> (1, int)
v3 -> (1, int)

Heap table:
1 -> 2

Output:

File table:

------------------------
ID: 1
Execution stack:
new(v3, 4); newLatch(cnt, readHeap(v2)); fork(writeHeap(v1, readHeap(v1) * 10); print(readHeap(v1)); countDown( cnt )); fork(writeHeap(v2, readHeap(v2) * 10); print(readHeap(v2)); countDown( cnt )); fork(writeHeap(v3, readHeap(v3) * 10); print(readHeap(v3)); countDown( cnt )); await(cnt); print(100); countDown( cnt ); print(100)

Symbol table:
cnt -> 0
v1 -> (1, int)
v2 -> (2, int)
v3 -> (1, int)

Heap table:
1 -> 2
2 -> 3

Output:

File table:

------------------------
ID: 1
Execution stack:
new(v3, 4); newLatch(cnt, readHeap(v2)); fork(writeHeap(v1, readHeap(v1) * 10); print(readHeap(v1)); countDown( cnt )); fork(writeHeap(v2, readHeap(v2) * 10); print(readHeap(v2)); countDown( cnt )); fork(writeHeap(v3, readHeap(v3) * 10); print(readHeap(v3)); countDown( cnt )); await(cnt); print(100); countDown( cnt ); print(100)

Symbol table:
cnt -> 0
v1 -> (1, int)
v2 -> (2, int)
v3 -> (1, int)

Heap table:
1 -> 2
2 -> 3

Output:

File table:

------------------------
ID: 1
Execution stack:
new(v3, 4)
newLatch(cnt, readHeap(v2)); fork(writeHeap(v1, readHeap(v1) * 10); print(readHeap(v1)); countDown( cnt )); fork(writeHeap(v2, readHeap(v2) * 10); print(readHeap(v2)); countDown( cnt )); fork(writeHeap(v3, readHeap(v3) * 10); print(readHeap(v3)); countDown( cnt )); await(cnt); print(100); countDown( cnt ); print(100)

Symbol table:
cnt -> 0
v1 -> (1, int)
v2 -> (2, int)
v3 -> (1, int)

Heap table:
1 -> 2
2 -> 3

Output:

File table:

------------------------
ID: 1
Execution stack:
new(v3, 4)
newLatch(cnt, readHeap(v2)); fork(writeHeap(v1, readHeap(v1) * 10); print(readHeap(v1)); countDown( cnt )); fork(writeHeap(v2, readHeap(v2) * 10); print(readHeap(v2)); countDown( cnt )); fork(writeHeap(v3, readHeap(v3) * 10); print(readHeap(v3)); countDown( cnt )); await(cnt); print(100); countDown( cnt ); print(100)

Symbol table:
cnt -> 0
v1 -> (1, int)
v2 -> (2, int)
v3 -> (1, int)

Heap table:
1 -> 2
2 -> 3

Output:

File table:

------------------------
ID: 1
Execution stack:
newLatch(cnt, readHeap(v2)); fork(writeHeap(v1, readHeap(v1) * 10); print(readHeap(v1)); countDown( cnt )); fork(writeHeap(v2, readHeap(v2) * 10); print(readHeap(v2)); countDown( cnt )); fork(writeHeap(v3, readHeap(v3) * 10); print(readHeap(v3)); countDown( cnt )); await(cnt); print(100); countDown( cnt ); print(100)

Symbol table:
cnt -> 0
v1 -> (1, int)
v2 -> (2, int)
v3 -> (3, int)

Heap table:
1 -> 2
2 -> 3
3 -> 4

Output:

File table:

------------------------
ID: 1
Execution stack:
newLatch(cnt, readHeap(v2)); fork(writeHeap(v1, readHeap(v1) * 10); print(readHeap(v1)); countDown( cnt )); fork(writeHeap(v2, readHeap(v2) * 10); print(readHeap(v2)); countDown( cnt )); fork(writeHeap(v3, readHeap(v3) * 10); print(readHeap(v3)); countDown( cnt )); await(cnt); print(100); countDown( cnt ); print(100)

Symbol table:
cnt -> 0
v1 -> (1, int)
v2 -> (2, int)
v3 -> (3, int)

Heap table:
1 -> 2
2 -> 3
3 -> 4

Output:

File table:

------------------------
ID: 1
Execution stack:
newLatch(cnt, readHeap(v2))
fork(writeHeap(v1, readHeap(v1) * 10); print(readHeap(v1)); countDown( cnt )); fork(writeHeap(v2, readHeap(v2) * 10); print(readHeap(v2)); countDown( cnt )); fork(writeHeap(v3, readHeap(v3) * 10); print(readHeap(v3)); countDown( cnt )); await(cnt); print(100); countDown( cnt ); print(100)

Symbol table:
cnt -> 0
v1 -> (1, int)
v2 -> (2, int)
v3 -> (3, int)

Heap table:
1 -> 2
2 -> 3
3 -> 4

Output:

File table:

------------------------
ID: 1
Execution stack:
newLatch(cnt, readHeap(v2))
fork(writeHeap(v1, readHeap(v1) * 10); print(readHeap(v1)); countDown( cnt )); fork(writeHeap(v2, readHeap(v2) * 10); print(readHeap(v2)); countDown( cnt )); fork(writeHeap(v3, readHeap(v3) * 10); print(readHeap(v3)); countDown( cnt )); await(cnt); print(100); countDown( cnt ); print(100)

Symbol table:
cnt -> 0
v1 -> (1, int)
v2 -> (2, int)
v3 -> (3, int)

Heap table:
1 -> 2
2 -> 3
3 -> 4

Output:

File table:

------------------------
ID: 1
Execution stack:
fork(writeHeap(v1, readHeap(v1) * 10); print(readHeap(v1)); countDown( cnt )); fork(writeHeap(v2, readHeap(v2) * 10); print(readHeap(v2)); countDown( cnt )); fork(writeHeap(v3, readHeap(v3) * 10); print(readHeap(v3)); countDown( cnt )); await(cnt); print(100); countDown( cnt ); print(100)

Symbol table:
cnt -> 1
v1 -> (1, int)
v2 -> (2, int)
v3 -> (3, int)

Heap table:
1 -> 2
2 -> 3
3 -> 4

Output:

File table:

------------------------
ID: 1
Execution stack:
fork(writeHeap(v1, readHeap(v1) * 10); print(readHeap(v1)); countDown( cnt )); fork(writeHeap(v2, readHeap(v2) * 10); print(readHeap(v2)); countDown( cnt )); fork(writeHeap(v3, readHeap(v3) * 10); print(readHeap(v3)); countDown( cnt )); await(cnt); print(100); countDown( cnt ); print(100)

Symbol table:
cnt -> 1
v1 -> (1, int)
v2 -> (2, int)
v3 -> (3, int)

Heap table:
1 -> 2
2 -> 3
3 -> 4

Output:

File table:

------------------------
ID: 1
Execution stack:
fork(writeHeap(v1, readHeap(v1) * 10); print(readHeap(v1)); countDown( cnt ))
fork(writeHeap(v2, readHeap(v2) * 10); print(readHeap(v2)); countDown( cnt )); fork(writeHeap(v3, readHeap(v3) * 10); print(readHeap(v3)); countDown( cnt )); await(cnt); print(100); countDown( cnt ); print(100)

Symbol table:
cnt -> 1
v1 -> (1, int)
v2 -> (2, int)
v3 -> (3, int)

Heap table:
1 -> 2
2 -> 3
3 -> 4

Output:

File table:

------------------------
ID: 1
Execution stack:
fork(writeHeap(v1, readHeap(v1) * 10); print(readHeap(v1)); countDown( cnt ))
fork(writeHeap(v2, readHeap(v2) * 10); print(readHeap(v2)); countDown( cnt )); fork(writeHeap(v3, readHeap(v3) * 10); print(readHeap(v3)); countDown( cnt )); await(cnt); print(100); countDown( cnt ); print(100)

Symbol table:
cnt -> 1
v1 -> (1, int)
v2 -> (2, int)
v3 -> (3, int)

Heap table:
1 -> 2
2 -> 3
3 -> 4

Output:

File table:

------------------------
ID: 1
Execution stack:
fork(writeHeap(v2, readHeap(v2) * 10); print(readHeap(v2)); countDown( cnt )); fork(writeHeap(v3, readHeap(v3) * 10); print(readHeap(v3)); countDown( cnt )); await(cnt); print(100); countDown( cnt ); print(100)

Symbol table:
cnt -> 1
v1 -> (1, int)
v2 -> (2, int)
v3 -> (3, int)

Heap table:
1 -> 2
2 -> 3
3 -> 4

Output:

File table:

------------------------
ID: 2
Execution stack:
writeHeap(v1, readHeap(v1) * 10); print(readHeap(v1)); countDown( cnt )

Symbol table:
cnt -> 1
v1 -> (1, int)
v2 -> (2, int)
v3 -> (3, int)

Heap table:
1 -> 2
2 -> 3
3 -> 4

Output:

File table:

------------------------
ID: 1
Execution stack:
fork(writeHeap(v2, readHeap(v2) * 10); print(readHeap(v2)); countDown( cnt )); fork(writeHeap(v3, readHeap(v3) * 10); print(readHeap(v3)); countDown( cnt )); await(cnt); print(100); countDown( cnt ); print(100)

Symbol table:
cnt -> 1
v1 -> (1, int)
v2 -> (2, int)
v3 -> (3, int)

Heap table:
1 -> 2
2 -> 3
3 -> 4

Output:

File table:

------------------------
ID: 2
Execution stack:
writeHeap(v1, readHeap(v1) * 10); print(readHeap(v1)); countDown( cnt )

Symbol table:
cnt -> 1
v1 -> (1, int)
v2 -> (2, int)
v3 -> (3, int)

Heap table:
1 -> 2
2 -> 3
3 -> 4

Output:

File table:

------------------------
ID: 1
Execution stack:
fork(writeHeap(v2, readHeap(v2) * 10); print(readHeap(v2)); countDown( cnt ))
fork(writeHeap(v3, readHeap(v3) * 10); print(readHeap(v3)); countDown( cnt )); await(cnt); print(100); countDown( cnt ); print(100)

Symbol table:
cnt -> 1
v1 -> (1, int)
v2 -> (2, int)
v3 -> (3, int)

Heap table:
1 -> 2
2 -> 3
3 -> 4

Output:

File table:

------------------------
ID: 2
Execution stack:
writeHeap(v1, readHeap(v1) * 10)
print(readHeap(v1)); countDown( cnt )

Symbol table:
cnt -> 1
v1 -> (1, int)
v2 -> (2, int)
v3 -> (3, int)

Heap table:
1 -> 2
2 -> 3
3 -> 4

Output:

File table:

------------------------
ID: 1
Execution stack:
fork(writeHeap(v2, readHeap(v2) * 10); print(readHeap(v2)); countDown( cnt ))
fork(writeHeap(v3, readHeap(v3) * 10); print(readHeap(v3)); countDown( cnt )); await(cnt); print(100); countDown( cnt ); print(100)

Symbol table:
cnt -> 1
v1 -> (1, int)
v2 -> (2, int)
v3 -> (3, int)

Heap table:
1 -> 2
2 -> 3
3 -> 4

Output:

File table:

------------------------
ID: 2
Execution stack:
writeHeap(v1, readHeap(v1) * 10)
print(readHeap(v1)); countDown( cnt )

Symbol table:
cnt -> 1
v1 -> (1, int)
v2 -> (2, int)
v3 -> (3, int)

Heap table:
1 -> 2
2 -> 3
3 -> 4

Output:

File table:

------------------------
ID: 1
Execution stack:
fork(writeHeap(v3, readHeap(v3) * 10); print(readHeap(v3)); countDown( cnt )); await(cnt); print(100); countDown( cnt ); print(100)

Symbol table:
cnt -> 1
v1 -> (1, int)
v2 -> (2, int)
v3 -> (3, int)

Heap table:
1 -> 20
2 -> 3
3 -> 4

Output:

File table:

------------------------
ID: 2
Execution stack:
print(readHeap(v1)); countDown( cnt )

Symbol table:
cnt -> 1
v1 -> (1, int)
v2 -> (2, int)
v3 -> (3, int)

Heap table:
1 -> 20
2 -> 3
3 -> 4

Output:

File table:

------------------------
ID: 3
Execution stack:
writeHeap(v2, readHeap(v2) * 10); print(readHeap(v2)); countDown( cnt )

Symbol table:
cnt -> 1
v1 -> (1, int)
v2 -> (2, int)
v3 -> (3, int)

Heap table:
1 -> 20
2 -> 3
3 -> 4

Output:

File table:

------------------------
ID: 1
Execution stack:
fork(writeHeap(v3, readHeap(v3) * 10); print(readHeap(v3)); countDown( cnt )); await(cnt); print(100); countDown( cnt ); print(100)

Symbol table:
cnt -> 1
v1 -> (1, int)
v2 -> (2, int)
v3 -> (3, int)

Heap table:
1 -> 20
2 -> 3
3 -> 4

Output:

File table:

------------------------
ID: 2
Execution stack:
print(readHeap(v1)); countDown( cnt )

Symbol table:
cnt -> 1
v1 -> (1, int)
v2 -> (2, int)
v3 -> (3, int)

Heap table:
1 -> 20
2 -> 3
3 -> 4

Output:

File table:

------------------------
ID: 3
Execution stack:
writeHeap(v2, readHeap(v2) * 10); print(readHeap(v2)); countDown( cnt )

Symbol table:
cnt -> 1
v1 -> (1, int)
v2 -> (2, int)
v3 -> (3, int)

Heap table:
1 -> 20
2 -> 3
3 -> 4

Output:

File table:

------------------------
ID: 1
Execution stack:
fork(writeHeap(v3, readHeap(v3) * 10); print(readHeap(v3)); countDown( cnt ))
await(cnt); print(100); countDown( cnt ); print(100)

Symbol table:
cnt -> 1
v1 -> (1, int)
v2 -> (2, int)
v3 -> (3, int)

Heap table:
1 -> 20
2 -> 3
3 -> 4

Output:

File table:

------------------------
ID: 2
Execution stack:
print(readHeap(v1))
countDown( cnt )

Symbol table:
cnt -> 1
v1 -> (1, int)
v2 -> (2, int)
v3 -> (3, int)

Heap table:
1 -> 20
2 -> 3
3 -> 4

Output:

File table:

------------------------
ID: 3
Execution stack:
writeHeap(v2, readHeap(v2) * 10)
print(readHeap(v2)); countDown( cnt )

Symbol table:
cnt -> 1
v1 -> (1, int)
v2 -> (2, int)
v3 -> (3, int)

Heap table:
1 -> 20
2 -> 3
3 -> 4

Output:

File table:

------------------------
ID: 1
Execution stack:
fork(writeHeap(v3, readHeap(v3) * 10); print(readHeap(v3)); countDown( cnt ))
await(cnt); print(100); countDown( cnt ); print(100)

Symbol table:
cnt -> 1
v1 -> (1, int)
v2 -> (2, int)
v3 -> (3, int)

Heap table:
1 -> 20
2 -> 3
3 -> 4

Output:

File table:

------------------------
ID: 2
Execution stack:
print(readHeap(v1))
countDown( cnt )

Symbol table:
cnt -> 1
v1 -> (1, int)
v2 -> (2, int)
v3 -> (3, int)

Heap table:
1 -> 20
2 -> 3
3 -> 4

Output:

File table:

------------------------
ID: 3
Execution stack:
writeHeap(v2, readHeap(v2) * 10)
print(readHeap(v2)); countDown( cnt )

Symbol table:
cnt -> 1
v1 -> (1, int)
v2 -> (2, int)
v3 -> (3, int)

Heap table:
1 -> 20
2 -> 3
3 -> 4

Output:

File table:

------------------------
ID: 1
Execution stack:
await(cnt); print(100); countDown( cnt ); print(100)

Symbol table:
cnt -> 1
v1 -> (1, int)
v2 -> (2, int)
v3 -> (3, int)

Heap table:
1 -> 20
2 -> 30
3 -> 4

Output:
20

File table:

------------------------
ID: 2
Execution stack:
countDown( cnt )

Symbol table:
cnt -> 1
v1 -> (1, int)
v2 -> (2, int)
v3 -> (3, int)

Heap table:
1 -> 20
2 -> 30
3 -> 4

Output:
20

File table:

------------------------
ID: 3
Execution stack:
print(readHeap(v2)); countDown( cnt )

Symbol table:
cnt -> 1
v1 -> (1, int)
v2 -> (2, int)
v3 -> (3, int)

Heap table:
1 -> 20
2 -> 30
3 -> 4

Output:
20

File table:

------------------------
ID: 4
Execution stack:
writeHeap(v3, readHeap(v3) * 10); print(readHeap(v3)); countDown( cnt )

Symbol table:
cnt -> 1
v1 -> (1, int)
v2 -> (2, int)
v3 -> (3, int)

Heap table:
1 -> 20
2 -> 30
3 -> 4

Output:
20

File table:

------------------------
ID: 1
Execution stack:
await(cnt); print(100); countDown( cnt ); print(100)

Symbol table:
cnt -> 1
v1 -> (1, int)
v2 -> (2, int)
v3 -> (3, int)

Heap table:
1 -> 20
2 -> 30
3 -> 4

Output:
20

File table:

------------------------
ID: 2
Execution stack:
countDown( cnt )

Symbol table:
cnt -> 1
v1 -> (1, int)
v2 -> (2, int)
v3 -> (3, int)

Heap table:
1 -> 20
2 -> 30
3 -> 4

Output:
20

File table:

------------------------
ID: 3
Execution stack:
print(readHeap(v2)); countDown( cnt )

Symbol table:
cnt -> 1
v1 -> (1, int)
v2 -> (2, int)
v3 -> (3, int)

Heap table:
1 -> 20
2 -> 30
3 -> 4

Output:
20

File table:

------------------------
ID: 4
Execution stack:
writeHeap(v3, readHeap(v3) * 10); print(readHeap(v3)); countDown( cnt )

Symbol table:
cnt -> 1
v1 -> (1, int)
v2 -> (2, int)
v3 -> (3, int)

Heap table:
1 -> 20
2 -> 30
3 -> 4

Output:
20

File table:

------------------------
ID: 1
Execution stack:
await(cnt)
print(100); countDown( cnt ); print(100)

Symbol table:
cnt -> 1
v1 -> (1, int)
v2 -> (2, int)
v3 -> (3, int)

Heap table:
1 -> 20
2 -> 30
3 -> 4

Output:
20
2

File table:

------------------------
ID: 2
Execution stack:

Symbol table:
cnt -> 1
v1 -> (1, int)
v2 -> (2, int)
v3 -> (3, int)

Heap table:
1 -> 20
2 -> 30
3 -> 4

Output:
20
2

File table:

------------------------
ID: 3
Execution stack:
print(readHeap(v2))
countDown( cnt )

Symbol table:
cnt -> 1
v1 -> (1, int)
v2 -> (2, int)
v3 -> (3, int)

Heap table:
1 -> 20
2 -> 30
3 -> 4

Output:
20
2

File table:

------------------------
ID: 4
Execution stack:
writeHeap(v3, readHeap(v3) * 10)
print(readHeap(v3)); countDown( cnt )

Symbol table:
cnt -> 1
v1 -> (1, int)
v2 -> (2, int)
v3 -> (3, int)

Heap table:
1 -> 20
2 -> 30
3 -> 4

Output:
20
2

File table:

------------------------
ID: 1
Execution stack:
await(cnt)
print(100); countDown( cnt ); print(100)

Symbol table:
cnt -> 1
v1 -> (1, int)
v2 -> (2, int)
v3 -> (3, int)

Heap table:
1 -> 20
2 -> 30
3 -> 4

Output:
20
2

File table:

------------------------
ID: 3
Execution stack:
print(readHeap(v2))
countDown( cnt )

Symbol table:
cnt -> 1
v1 -> (1, int)
v2 -> (2, int)
v3 -> (3, int)

Heap table:
1 -> 20
2 -> 30
3 -> 4

Output:
20
2

File table:

------------------------
ID: 4
Execution stack:
writeHeap(v3, readHeap(v3) * 10)
print(readHeap(v3)); countDown( cnt )

Symbol table:
cnt -> 1
v1 -> (1, int)
v2 -> (2, int)
v3 -> (3, int)

Heap table:
1 -> 20
2 -> 30
3 -> 4

Output:
20
2

File table:

------------------------
ID: 1
Execution stack:
await(cnt)
print(100); countDown( cnt ); print(100)

Symbol table:
cnt -> 1
v1 -> (1, int)
v2 -> (2, int)
v3 -> (3, int)

Heap table:
1 -> 20
2 -> 30
3 -> 40

Output:
20
2
30

File table:

------------------------
ID: 3
Execution stack:
countDown( cnt )

Symbol table:
cnt -> 1
v1 -> (1, int)
v2 -> (2, int)
v3 -> (3, int)

Heap table:
1 -> 20
2 -> 30
3 -> 40

Output:
20
2
30

File table:

------------------------
ID: 4
Execution stack:
print(readHeap(v3)); countDown( cnt )

Symbol table:
cnt -> 1
v1 -> (1, int)
v2 -> (2, int)
v3 -> (3, int)

Heap table:
1 -> 20
2 -> 30
3 -> 40

Output:
20
2
30

File table:

------------------------
ID: 1
Execution stack:
await(cnt)
print(100); countDown( cnt ); print(100)

Symbol table:
cnt -> 1
v1 -> (1, int)
v2 -> (2, int)
v3 -> (3, int)

Heap table:
1 -> 20
2 -> 30
3 -> 40

Output:
20
2
30

File table:

------------------------
ID: 3
Execution stack:
countDown( cnt )

Symbol table:
cnt -> 1
v1 -> (1, int)
v2 -> (2, int)
v3 -> (3, int)

Heap table:
1 -> 20
2 -> 30
3 -> 40

Output:
20
2
30

File table:

------------------------
ID: 4
Execution stack:
print(readHeap(v3)); countDown( cnt )

Symbol table:
cnt -> 1
v1 -> (1, int)
v2 -> (2, int)
v3 -> (3, int)

Heap table:
1 -> 20
2 -> 30
3 -> 40

Output:
20
2
30

File table:

------------------------
ID: 1
Execution stack:
await(cnt)
print(100); countDown( cnt ); print(100)

Symbol table:
cnt -> 1
v1 -> (1, int)
v2 -> (2, int)
v3 -> (3, int)

Heap table:
1 -> 20
2 -> 30
3 -> 40

Output:
20
2
30
3

File table:

------------------------
ID: 3
Execution stack:

Symbol table:
cnt -> 1
v1 -> (1, int)
v2 -> (2, int)
v3 -> (3, int)

Heap table:
1 -> 20
2 -> 30
3 -> 40

Output:
20
2
30
3

File table:

------------------------
ID: 4
Execution stack:
print(readHeap(v3))
countDown( cnt )

Symbol table:
cnt -> 1
v1 -> (1, int)
v2 -> (2, int)
v3 -> (3, int)

Heap table:
1 -> 20
2 -> 30
3 -> 40

Output:
20
2
30
3

File table:

------------------------
ID: 1
Execution stack:
await(cnt)
print(100); countDown( cnt ); print(100)

Symbol table:
cnt -> 1
v1 -> (1, int)
v2 -> (2, int)
v3 -> (3, int)

Heap table:
1 -> 20
2 -> 30
3 -> 40

Output:
20
2
30
3

File table:

------------------------
ID: 4
Execution stack:
print(readHeap(v3))
countDown( cnt )

Symbol table:
cnt -> 1
v1 -> (1, int)
v2 -> (2, int)
v3 -> (3, int)

Heap table:
1 -> 20
2 -> 30
3 -> 40

Output:
20
2
30
3

File table:

------------------------
ID: 1
Execution stack:
await(cnt)
print(100); countDown( cnt ); print(100)

Symbol table:
cnt -> 1
v1 -> (1, int)
v2 -> (2, int)
v3 -> (3, int)

Heap table:
1 -> 20
2 -> 30
3 -> 40

Output:
20
2
30
3
40

File table:

------------------------
ID: 4
Execution stack:
countDown( cnt )

Symbol table:
cnt -> 1
v1 -> (1, int)
v2 -> (2, int)
v3 -> (3, int)

Heap table:
1 -> 20
2 -> 30
3 -> 40

Output:
20
2
30
3
40

File table:

------------------------
ID: 1
Execution stack:
await(cnt)
print(100); countDown( cnt ); print(100)

Symbol table:
cnt -> 1
v1 -> (1, int)
v2 -> (2, int)
v3 -> (3, int)

Heap table:
1 -> 20
2 -> 30
3 -> 40

Output:
20
2
30
3
40

File table:

------------------------
ID: 4
Execution stack:
countDown( cnt )

Symbol table:
cnt -> 1
v1 -> (1, int)
v2 -> (2, int)
v3 -> (3, int)

Heap table:
1 -> 20
2 -> 30
3 -> 40

Output:
20
2
30
3
40

File table:

------------------------
ID: 1
Execution stack:
await(cnt)
print(100); countDown( cnt ); print(100)

Symbol table:
cnt -> 1
v1 -> (1, int)
v2 -> (2, int)
v3 -> (3, int)

Heap table:
1 -> 20
2 -> 30
3 -> 40

Output:
20
2
30
3
40
4

File table:

------------------------
ID: 4
Execution stack:

Symbol table:
cnt -> 1
v1 -> (1, int)
v2 -> (2, int)
v3 -> (3, int)

Heap table:
1 -> 20
2 -> 30
3 -> 40

Output:
20
2
30
3
40
4

File table:

------------------------
ID: 1
Execution stack:
await(cnt)
print(100); countDown( cnt ); print(100)

Symbol table:
cnt -> 1
v1 -> (1, int)
v2 -> (2, int)
v3 -> (3, int)

Heap table:
1 -> 20
2 -> 30
3 -> 40

Output:
20
2
30
3
40
4

File table:

------------------------
ID: 1
Execution stack:
await(cnt)
print(100); countDown( cnt ); print(100)

Symbol table:
cnt -> 1
v1 -> (1, int)
v2 -> (2, int)
v3 -> (3, int)

Heap table:
1 -> 20
2 -> 30
3 -> 40

Output:
20
2
30
3
40
4

File table:

------------------------
ID: 1
Execution stack:
await(cnt)
print(100); countDown( cnt ); print(100)

Symbol table:
cnt -> 1
v1 -> (1, int)
v2 -> (2, int)
v3 -> (3, int)

Heap table:
1 -> 20
2 -> 30
3 -> 40

Output:
20
2
30
3
40
4

File table:

------------------------
ID: 1
Execution stack:
await(cnt)
print(100); countDown( cnt ); print(100)

Symbol table:
cnt -> 1
v1 -> (1, int)
v2 -> (2, int)
v3 -> (3, int)

Heap table:
1 -> 20
2 -> 30
3 -> 40

Output:
20
2
30
3
40
4

File table:

------------------------
ID: 1
Execution stack:
await(cnt)
print(100); countDown( cnt ); print(100)

Symbol table:
cnt -> 1
v1 -> (1, int)
v2 -> (2, int)
v3 -> (3, int)

Heap table:
1 -> 20
2 -> 30
3 -> 40

Output:
20
2
30
3
40
4

File table:

------------------------
ID: 1
Execution stack:
await(cnt)
print(100); countDown( cnt ); print(100)

Symbol table:
cnt -> 1
v1 -> (1, int)
v2 -> (2, int)
v3 -> (3, int)

Heap table:
1 -> 20
2 -> 30
3 -> 40

Output:
20
2
30
3
40
4

File table:

------------------------
ID: 1
Execution stack:
await(cnt)
print(100); countDown( cnt ); print(100)

Symbol table:
cnt -> 1
v1 -> (1, int)
v2 -> (2, int)
v3 -> (3, int)

Heap table:
1 -> 20
2 -> 30
3 -> 40

Output:
20
2
30
3
40
4

File table:

------------------------
ID: 1
Execution stack:
await(cnt)
print(100); countDown( cnt ); print(100)

Symbol table:
cnt -> 1
v1 -> (1, int)
v2 -> (2, int)
v3 -> (3, int)

Heap table:
1 -> 20
2 -> 30
3 -> 40

Output:
20
2
30
3
40
4

File table:

------------------------
ID: 1
Execution stack:
await(cnt)
print(100); countDown( cnt ); print(100)

Symbol table:
cnt -> 1
v1 -> (1, int)
v2 -> (2, int)
v3 -> (3, int)

Heap table:
1 -> 20
2 -> 30
3 -> 40

Output:
20
2
30
3
40
4

File table:

------------------------
ID: 1
Execution stack:
await(cnt)
print(100); countDown( cnt ); print(100)

Symbol table:
cnt -> 1
v1 -> (1, int)
v2 -> (2, int)
v3 -> (3, int)

Heap table:
1 -> 20
2 -> 30
3 -> 40

Output:
20
2
30
3
40
4

File table:

------------------------
ID: 1
Execution stack:
await(cnt)
print(100); countDown( cnt ); print(100)

Symbol table:
cnt -> 1
v1 -> (1, int)
v2 -> (2, int)
v3 -> (3, int)

Heap table:
1 -> 20
2 -> 30
3 -> 40

Output:
20
2
30
3
40
4

File table:

------------------------
ID: 1
Execution stack:
await(cnt)
print(100); countDown( cnt ); print(100)

Symbol table:
cnt -> 1
v1 -> (1, int)
v2 -> (2, int)
v3 -> (3, int)

Heap table:
1 -> 20
2 -> 30
3 -> 40

Output:
20
2
30
3
40
4

File table:

------------------------
ID: 1
Execution stack:
await(cnt)
print(100); countDown( cnt ); print(100)

Symbol table:
cnt -> 1
v1 -> (1, int)
v2 -> (2, int)
v3 -> (3, int)

Heap table:
1 -> 20
2 -> 30
3 -> 40

Output:
20
2
30
3
40
4

File table:

------------------------
ID: 1
Execution stack:
await(cnt)
print(100); countDown( cnt ); print(100)

Symbol table:
cnt -> 1
v1 -> (1, int)
v2 -> (2, int)
v3 -> (3, int)

Heap table:
1 -> 20
2 -> 30
3 -> 40

Output:
20
2
30
3
40
4

File table:

------------------------
ID: 1
Execution stack:
await(cnt)
print(100); countDown( cnt ); print(100)

Symbol table:
cnt -> 1
v1 -> (1, int)
v2 -> (2, int)
v3 -> (3, int)

Heap table:
1 -> 20
2 -> 30
3 -> 40

Output:
20
2
30
3
40
4

File table:

------------------------
ID: 1
Execution stack:
await(cnt)
print(100); countDown( cnt ); print(100)

Symbol table:
cnt -> 1
v1 -> (1, int)
v2 -> (2, int)
v3 -> (3, int)

Heap table:
1 -> 20
2 -> 30
3 -> 40

Output:
20
2
30
3
40
4

File table:

------------------------
ID: 1
Execution stack:
int cnt; Ref(int) v1; Ref(int) v2; Ref(int) v3; new(v1, 2); new(v2, 3); new(v3, 4); newLatch(cnt, readHeap(v2)); fork(writeHeap(v1, readHeap(v1) * 10); print(readHeap(v1)); countDown( cnt )); fork(writeHeap(v2, readHeap(v2) * 10); print(readHeap(v2)); countDown( cnt )); fork(writeHeap(v3, readHeap(v3) * 10); print(readHeap(v3)); countDown( cnt )); await(cnt); print(100); countDown( cnt ); print(100)

Symbol table:

Heap table:

Output:

File table:

------------------------
ID: 1
Execution stack:
int cnt
Ref(int) v1; Ref(int) v2; Ref(int) v3; new(v1, 2); new(v2, 3); new(v3, 4); newLatch(cnt, readHeap(v2)); fork(writeHeap(v1, readHeap(v1) * 10); print(readHeap(v1)); countDown( cnt )); fork(writeHeap(v2, readHeap(v2) * 10); print(readHeap(v2)); countDown( cnt )); fork(writeHeap(v3, readHeap(v3) * 10); print(readHeap(v3)); countDown( cnt )); await(cnt); print(100); countDown( cnt ); print(100)

Symbol table:

Heap table:

Output:

File table:

------------------------
ID: 1
Execution stack:
int cnt
Ref(int) v1; Ref(int) v2; Ref(int) v3; new(v1, 2); new(v2, 3); new(v3, 4); newLatch(cnt, readHeap(v2)); fork(writeHeap(v1, readHeap(v1) * 10); print(readHeap(v1)); countDown( cnt )); fork(writeHeap(v2, readHeap(v2) * 10); print(readHeap(v2)); countDown( cnt )); fork(writeHeap(v3, readHeap(v3) * 10); print(readHeap(v3)); countDown( cnt )); await(cnt); print(100); countDown( cnt ); print(100)

Symbol table:

Heap table:

Output:

File table:

------------------------
ID: 1
Execution stack:
Ref(int) v1; Ref(int) v2; Ref(int) v3; new(v1, 2); new(v2, 3); new(v3, 4); newLatch(cnt, readHeap(v2)); fork(writeHeap(v1, readHeap(v1) * 10); print(readHeap(v1)); countDown( cnt )); fork(writeHeap(v2, readHeap(v2) * 10); print(readHeap(v2)); countDown( cnt )); fork(writeHeap(v3, readHeap(v3) * 10); print(readHeap(v3)); countDown( cnt )); await(cnt); print(100); countDown( cnt ); print(100)

Symbol table:
cnt -> 0

Heap table:

Output:

File table:

------------------------
ID: 1
Execution stack:
Ref(int) v1; Ref(int) v2; Ref(int) v3; new(v1, 2); new(v2, 3); new(v3, 4); newLatch(cnt, readHeap(v2)); fork(writeHeap(v1, readHeap(v1) * 10); print(readHeap(v1)); countDown( cnt )); fork(writeHeap(v2, readHeap(v2) * 10); print(readHeap(v2)); countDown( cnt )); fork(writeHeap(v3, readHeap(v3) * 10); print(readHeap(v3)); countDown( cnt )); await(cnt); print(100); countDown( cnt ); print(100)

Symbol table:
cnt -> 0

Heap table:

Output:

File table:

------------------------
ID: 1
Execution stack:
Ref(int) v1
Ref(int) v2; Ref(int) v3; new(v1, 2); new(v2, 3); new(v3, 4); newLatch(cnt, readHeap(v2)); fork(writeHeap(v1, readHeap(v1) * 10); print(readHeap(v1)); countDown( cnt )); fork(writeHeap(v2, readHeap(v2) * 10); print(readHeap(v2)); countDown( cnt )); fork(writeHeap(v3, readHeap(v3) * 10); print(readHeap(v3)); countDown( cnt )); await(cnt); print(100); countDown( cnt ); print(100)

Symbol table:
cnt -> 0

Heap table:

Output:

File table:

------------------------
ID: 1
Execution stack:
Ref(int) v1
Ref(int) v2; Ref(int) v3; new(v1, 2); new(v2, 3); new(v3, 4); newLatch(cnt, readHeap(v2)); fork(writeHeap(v1, readHeap(v1) * 10); print(readHeap(v1)); countDown( cnt )); fork(writeHeap(v2, readHeap(v2) * 10); print(readHeap(v2)); countDown( cnt )); fork(writeHeap(v3, readHeap(v3) * 10); print(readHeap(v3)); countDown( cnt )); await(cnt); print(100); countDown( cnt ); print(100)

Symbol table:
cnt -> 0

Heap table:

Output:

File table:

------------------------
ID: 1
Execution stack:
Ref(int) v2; Ref(int) v3; new(v1, 2); new(v2, 3); new(v3, 4); newLatch(cnt, readHeap(v2)); fork(writeHeap(v1, readHeap(v1) * 10); print(readHeap(v1)); countDown( cnt )); fork(writeHeap(v2, readHeap(v2) * 10); print(readHeap(v2)); countDown( cnt )); fork(writeHeap(v3, readHeap(v3) * 10); print(readHeap(v3)); countDown( cnt )); await(cnt); print(100); countDown( cnt ); print(100)

Symbol table:
cnt -> 0
v1 -> (1, int)

Heap table:

Output:

File table:

------------------------
ID: 1
Execution stack:
Ref(int) v2; Ref(int) v3; new(v1, 2); new(v2, 3); new(v3, 4); newLatch(cnt, readHeap(v2)); fork(writeHeap(v1, readHeap(v1) * 10); print(readHeap(v1)); countDown( cnt )); fork(writeHeap(v2, readHeap(v2) * 10); print(readHeap(v2)); countDown( cnt )); fork(writeHeap(v3, readHeap(v3) * 10); print(readHeap(v3)); countDown( cnt )); await(cnt); print(100); countDown( cnt ); print(100)

Symbol table:
cnt -> 0
v1 -> (1, int)

Heap table:

Output:

File table:

------------------------
ID: 1
Execution stack:
Ref(int) v2
Ref(int) v3; new(v1, 2); new(v2, 3); new(v3, 4); newLatch(cnt, readHeap(v2)); fork(writeHeap(v1, readHeap(v1) * 10); print(readHeap(v1)); countDown( cnt )); fork(writeHeap(v2, readHeap(v2) * 10); print(readHeap(v2)); countDown( cnt )); fork(writeHeap(v3, readHeap(v3) * 10); print(readHeap(v3)); countDown( cnt )); await(cnt); print(100); countDown( cnt ); print(100)

Symbol table:
cnt -> 0
v1 -> (1, int)

Heap table:

Output:

File table:

------------------------
ID: 1
Execution stack:
Ref(int) v2
Ref(int) v3; new(v1, 2); new(v2, 3); new(v3, 4); newLatch(cnt, readHeap(v2)); fork(writeHeap(v1, readHeap(v1) * 10); print(readHeap(v1)); countDown( cnt )); fork(writeHeap(v2, readHeap(v2) * 10); print(readHeap(v2)); countDown( cnt )); fork(writeHeap(v3, readHeap(v3) * 10); print(readHeap(v3)); countDown( cnt )); await(cnt); print(100); countDown( cnt ); print(100)

Symbol table:
cnt -> 0
v1 -> (1, int)

Heap table:

Output:

File table:

------------------------
ID: 1
Execution stack:
Ref(int) v3; new(v1, 2); new(v2, 3); new(v3, 4); newLatch(cnt, readHeap(v2)); fork(writeHeap(v1, readHeap(v1) * 10); print(readHeap(v1)); countDown( cnt )); fork(writeHeap(v2, readHeap(v2) * 10); print(readHeap(v2)); countDown( cnt )); fork(writeHeap(v3, readHeap(v3) * 10); print(readHeap(v3)); countDown( cnt )); await(cnt); print(100); countDown( cnt ); print(100)

Symbol table:
cnt -> 0
v1 -> (1, int)
v2 -> (1, int)

Heap table:

Output:

File table:

------------------------
ID: 1
Execution stack:
Ref(int) v3; new(v1, 2); new(v2, 3); new(v3, 4); newLatch(cnt, readHeap(v2)); fork(writeHeap(v1, readHeap(v1) * 10); print(readHeap(v1)); countDown( cnt )); fork(writeHeap(v2, readHeap(v2) * 10); print(readHeap(v2)); countDown( cnt )); fork(writeHeap(v3, readHeap(v3) * 10); print(readHeap(v3)); countDown( cnt )); await(cnt); print(100); countDown( cnt ); print(100)

Symbol table:
cnt -> 0
v1 -> (1, int)
v2 -> (1, int)

Heap table:

Output:

File table:

------------------------
ID: 1
Execution stack:
Ref(int) v3
new(v1, 2); new(v2, 3); new(v3, 4); newLatch(cnt, readHeap(v2)); fork(writeHeap(v1, readHeap(v1) * 10); print(readHeap(v1)); countDown( cnt )); fork(writeHeap(v2, readHeap(v2) * 10); print(readHeap(v2)); countDown( cnt )); fork(writeHeap(v3, readHeap(v3) * 10); print(readHeap(v3)); countDown( cnt )); await(cnt); print(100); countDown( cnt ); print(100)

Symbol table:
cnt -> 0
v1 -> (1, int)
v2 -> (1, int)

Heap table:

Output:

File table:

------------------------
ID: 1
Execution stack:
Ref(int) v3
new(v1, 2); new(v2, 3); new(v3, 4); newLatch(cnt, readHeap(v2)); fork(writeHeap(v1, readHeap(v1) * 10); print(readHeap(v1)); countDown( cnt )); fork(writeHeap(v2, readHeap(v2) * 10); print(readHeap(v2)); countDown( cnt )); fork(writeHeap(v3, readHeap(v3) * 10); print(readHeap(v3)); countDown( cnt )); await(cnt); print(100); countDown( cnt ); print(100)

Symbol table:
cnt -> 0
v1 -> (1, int)
v2 -> (1, int)

Heap table:

Output:

File table:

------------------------
ID: 1
Execution stack:
new(v1, 2); new(v2, 3); new(v3, 4); newLatch(cnt, readHeap(v2)); fork(writeHeap(v1, readHeap(v1) * 10); print(readHeap(v1)); countDown( cnt )); fork(writeHeap(v2, readHeap(v2) * 10); print(readHeap(v2)); countDown( cnt )); fork(writeHeap(v3, readHeap(v3) * 10); print(readHeap(v3)); countDown( cnt )); await(cnt); print(100); countDown( cnt ); print(100)

Symbol table:
cnt -> 0
v1 -> (1, int)
v2 -> (1, int)
v3 -> (1, int)

Heap table:

Output:

File table:

------------------------
ID: 1
Execution stack:
new(v1, 2); new(v2, 3); new(v3, 4); newLatch(cnt, readHeap(v2)); fork(writeHeap(v1, readHeap(v1) * 10); print(readHeap(v1)); countDown( cnt )); fork(writeHeap(v2, readHeap(v2) * 10); print(readHeap(v2)); countDown( cnt )); fork(writeHeap(v3, readHeap(v3) * 10); print(readHeap(v3)); countDown( cnt )); await(cnt); print(100); countDown( cnt ); print(100)

Symbol table:
cnt -> 0
v1 -> (1, int)
v2 -> (1, int)
v3 -> (1, int)

Heap table:

Output:

File table:

------------------------
ID: 1
Execution stack:
new(v1, 2)
new(v2, 3); new(v3, 4); newLatch(cnt, readHeap(v2)); fork(writeHeap(v1, readHeap(v1) * 10); print(readHeap(v1)); countDown( cnt )); fork(writeHeap(v2, readHeap(v2) * 10); print(readHeap(v2)); countDown( cnt )); fork(writeHeap(v3, readHeap(v3) * 10); print(readHeap(v3)); countDown( cnt )); await(cnt); print(100); countDown( cnt ); print(100)

Symbol table:
cnt -> 0
v1 -> (1, int)
v2 -> (1, int)
v3 -> (1, int)

Heap table:

Output:

File table:

------------------------
ID: 1
Execution stack:
new(v1, 2)
new(v2, 3); new(v3, 4); newLatch(cnt, readHeap(v2)); fork(writeHeap(v1, readHeap(v1) * 10); print(readHeap(v1)); countDown( cnt )); fork(writeHeap(v2, readHeap(v2) * 10); print(readHeap(v2)); countDown( cnt )); fork(writeHeap(v3, readHeap(v3) * 10); print(readHeap(v3)); countDown( cnt )); await(cnt); print(100); countDown( cnt ); print(100)

Symbol table:
cnt -> 0
v1 -> (1, int)
v2 -> (1, int)
v3 -> (1, int)

Heap table:

Output:

File table:

------------------------
ID: 1
Execution stack:
new(v2, 3); new(v3, 4); newLatch(cnt, readHeap(v2)); fork(writeHeap(v1, readHeap(v1) * 10); print(readHeap(v1)); countDown( cnt )); fork(writeHeap(v2, readHeap(v2) * 10); print(readHeap(v2)); countDown( cnt )); fork(writeHeap(v3, readHeap(v3) * 10); print(readHeap(v3)); countDown( cnt )); await(cnt); print(100); countDown( cnt ); print(100)

Symbol table:
cnt -> 0
v1 -> (1, int)
v2 -> (1, int)
v3 -> (1, int)

Heap table:
1 -> 2

Output:

File table:

------------------------
ID: 1
Execution stack:
new(v2, 3); new(v3, 4); newLatch(cnt, readHeap(v2)); fork(writeHeap(v1, readHeap(v1) * 10); print(readHeap(v1)); countDown( cnt )); fork(writeHeap(v2, readHeap(v2) * 10); print(readHeap(v2)); countDown( cnt )); fork(writeHeap(v3, readHeap(v3) * 10); print(readHeap(v3)); countDown( cnt )); await(cnt); print(100); countDown( cnt ); print(100)

Symbol table:
cnt -> 0
v1 -> (1, int)
v2 -> (1, int)
v3 -> (1, int)

Heap table:
1 -> 2

Output:

File table:

------------------------
ID: 1
Execution stack:
new(v2, 3)
new(v3, 4); newLatch(cnt, readHeap(v2)); fork(writeHeap(v1, readHeap(v1) * 10); print(readHeap(v1)); countDown( cnt )); fork(writeHeap(v2, readHeap(v2) * 10); print(readHeap(v2)); countDown( cnt )); fork(writeHeap(v3, readHeap(v3) * 10); print(readHeap(v3)); countDown( cnt )); await(cnt); print(100); countDown( cnt ); print(100)

Symbol table:
cnt -> 0
v1 -> (1, int)
v2 -> (1, int)
v3 -> (1, int)

Heap table:
1 -> 2

Output:

File table:

------------------------
ID: 1
Execution stack:
new(v2, 3)
new(v3, 4); newLatch(cnt, readHeap(v2)); fork(writeHeap(v1, readHeap(v1) * 10); print(readHeap(v1)); countDown( cnt )); fork(writeHeap(v2, readHeap(v2) * 10); print(readHeap(v2)); countDown( cnt )); fork(writeHeap(v3, readHeap(v3) * 10); print(readHeap(v3)); countDown( cnt )); await(cnt); print(100); countDown( cnt ); print(100)

Symbol table:
cnt -> 0
v1 -> (1, int)
v2 -> (1, int)
v3 -> (1, int)

Heap table:
1 -> 2

Output:

File table:

------------------------
ID: 1
Execution stack:
new(v3, 4); newLatch(cnt, readHeap(v2)); fork(writeHeap(v1, readHeap(v1) * 10); print(readHeap(v1)); countDown( cnt )); fork(writeHeap(v2, readHeap(v2) * 10); print(readHeap(v2)); countDown( cnt )); fork(writeHeap(v3, readHeap(v3) * 10); print(readHeap(v3)); countDown( cnt )); await(cnt); print(100); countDown( cnt ); print(100)

Symbol table:
cnt -> 0
v1 -> (1, int)
v2 -> (2, int)
v3 -> (1, int)

Heap table:
1 -> 2
2 -> 3

Output:

File table:

------------------------
ID: 1
Execution stack:
new(v3, 4); newLatch(cnt, readHeap(v2)); fork(writeHeap(v1, readHeap(v1) * 10); print(readHeap(v1)); countDown( cnt )); fork(writeHeap(v2, readHeap(v2) * 10); print(readHeap(v2)); countDown( cnt )); fork(writeHeap(v3, readHeap(v3) * 10); print(readHeap(v3)); countDown( cnt )); await(cnt); print(100); countDown( cnt ); print(100)

Symbol table:
cnt -> 0
v1 -> (1, int)
v2 -> (2, int)
v3 -> (1, int)

Heap table:
1 -> 2
2 -> 3

Output:

File table:

------------------------
ID: 1
Execution stack:
new(v3, 4)
newLatch(cnt, readHeap(v2)); fork(writeHeap(v1, readHeap(v1) * 10); print(readHeap(v1)); countDown( cnt )); fork(writeHeap(v2, readHeap(v2) * 10); print(readHeap(v2)); countDown( cnt )); fork(writeHeap(v3, readHeap(v3) * 10); print(readHeap(v3)); countDown( cnt )); await(cnt); print(100); countDown( cnt ); print(100)

Symbol table:
cnt -> 0
v1 -> (1, int)
v2 -> (2, int)
v3 -> (1, int)

Heap table:
1 -> 2
2 -> 3

Output:

File table:

------------------------
ID: 1
Execution stack:
new(v3, 4)
newLatch(cnt, readHeap(v2)); fork(writeHeap(v1, readHeap(v1) * 10); print(readHeap(v1)); countDown( cnt )); fork(writeHeap(v2, readHeap(v2) * 10); print(readHeap(v2)); countDown( cnt )); fork(writeHeap(v3, readHeap(v3) * 10); print(readHeap(v3)); countDown( cnt )); await(cnt); print(100); countDown( cnt ); print(100)

Symbol table:
cnt -> 0
v1 -> (1, int)
v2 -> (2, int)
v3 -> (1, int)

Heap table:
1 -> 2
2 -> 3

Output:

File table:

------------------------
ID: 1
Execution stack:
newLatch(cnt, readHeap(v2)); fork(writeHeap(v1, readHeap(v1) * 10); print(readHeap(v1)); countDown( cnt )); fork(writeHeap(v2, readHeap(v2) * 10); print(readHeap(v2)); countDown( cnt )); fork(writeHeap(v3, readHeap(v3) * 10); print(readHeap(v3)); countDown( cnt )); await(cnt); print(100); countDown( cnt ); print(100)

Symbol table:
cnt -> 0
v1 -> (1, int)
v2 -> (2, int)
v3 -> (3, int)

Heap table:
1 -> 2
2 -> 3
3 -> 4

Output:

File table:

------------------------
ID: 1
Execution stack:
newLatch(cnt, readHeap(v2)); fork(writeHeap(v1, readHeap(v1) * 10); print(readHeap(v1)); countDown( cnt )); fork(writeHeap(v2, readHeap(v2) * 10); print(readHeap(v2)); countDown( cnt )); fork(writeHeap(v3, readHeap(v3) * 10); print(readHeap(v3)); countDown( cnt )); await(cnt); print(100); countDown( cnt ); print(100)

Symbol table:
cnt -> 0
v1 -> (1, int)
v2 -> (2, int)
v3 -> (3, int)

Heap table:
1 -> 2
2 -> 3
3 -> 4

Output:

File table:

------------------------
ID: 1
Execution stack:
newLatch(cnt, readHeap(v2))
fork(writeHeap(v1, readHeap(v1) * 10); print(readHeap(v1)); countDown( cnt )); fork(writeHeap(v2, readHeap(v2) * 10); print(readHeap(v2)); countDown( cnt )); fork(writeHeap(v3, readHeap(v3) * 10); print(readHeap(v3)); countDown( cnt )); await(cnt); print(100); countDown( cnt ); print(100)

Symbol table:
cnt -> 0
v1 -> (1, int)
v2 -> (2, int)
v3 -> (3, int)

Heap table:
1 -> 2
2 -> 3
3 -> 4

Output:

File table:

------------------------
ID: 1
Execution stack:
newLatch(cnt, readHeap(v2))
fork(writeHeap(v1, readHeap(v1) * 10); print(readHeap(v1)); countDown( cnt )); fork(writeHeap(v2, readHeap(v2) * 10); print(readHeap(v2)); countDown( cnt )); fork(writeHeap(v3, readHeap(v3) * 10); print(readHeap(v3)); countDown( cnt )); await(cnt); print(100); countDown( cnt ); print(100)

Symbol table:
cnt -> 0
v1 -> (1, int)
v2 -> (2, int)
v3 -> (3, int)

Heap table:
1 -> 2
2 -> 3
3 -> 4

Output:

File table:

------------------------
ID: 1
Execution stack:
fork(writeHeap(v1, readHeap(v1) * 10); print(readHeap(v1)); countDown( cnt )); fork(writeHeap(v2, readHeap(v2) * 10); print(readHeap(v2)); countDown( cnt )); fork(writeHeap(v3, readHeap(v3) * 10); print(readHeap(v3)); countDown( cnt )); await(cnt); print(100); countDown( cnt ); print(100)

Symbol table:
cnt -> 1
v1 -> (1, int)
v2 -> (2, int)
v3 -> (3, int)

Heap table:
1 -> 2
2 -> 3
3 -> 4

Output:

File table:

------------------------
ID: 1
Execution stack:
fork(writeHeap(v1, readHeap(v1) * 10); print(readHeap(v1)); countDown( cnt )); fork(writeHeap(v2, readHeap(v2) * 10); print(readHeap(v2)); countDown( cnt )); fork(writeHeap(v3, readHeap(v3) * 10); print(readHeap(v3)); countDown( cnt )); await(cnt); print(100); countDown( cnt ); print(100)

Symbol table:
cnt -> 1
v1 -> (1, int)
v2 -> (2, int)
v3 -> (3, int)

Heap table:
1 -> 2
2 -> 3
3 -> 4

Output:

File table:

------------------------
ID: 1
Execution stack:
fork(writeHeap(v1, readHeap(v1) * 10); print(readHeap(v1)); countDown( cnt ))
fork(writeHeap(v2, readHeap(v2) * 10); print(readHeap(v2)); countDown( cnt )); fork(writeHeap(v3, readHeap(v3) * 10); print(readHeap(v3)); countDown( cnt )); await(cnt); print(100); countDown( cnt ); print(100)

Symbol table:
cnt -> 1
v1 -> (1, int)
v2 -> (2, int)
v3 -> (3, int)

Heap table:
1 -> 2
2 -> 3
3 -> 4

Output:

File table:

------------------------
ID: 1
Execution stack:
fork(writeHeap(v1, readHeap(v1) * 10); print(readHeap(v1)); countDown( cnt ))
fork(writeHeap(v2, readHeap(v2) * 10); print(readHeap(v2)); countDown( cnt )); fork(writeHeap(v3, readHeap(v3) * 10); print(readHeap(v3)); countDown( cnt )); await(cnt); print(100); countDown( cnt ); print(100)

Symbol table:
cnt -> 1
v1 -> (1, int)
v2 -> (2, int)
v3 -> (3, int)

Heap table:
1 -> 2
2 -> 3
3 -> 4

Output:

File table:

------------------------
ID: 1
Execution stack:
fork(writeHeap(v2, readHeap(v2) * 10); print(readHeap(v2)); countDown( cnt )); fork(writeHeap(v3, readHeap(v3) * 10); print(readHeap(v3)); countDown( cnt )); await(cnt); print(100); countDown( cnt ); print(100)

Symbol table:
cnt -> 1
v1 -> (1, int)
v2 -> (2, int)
v3 -> (3, int)

Heap table:
1 -> 2
2 -> 3
3 -> 4

Output:

File table:

------------------------
ID: 2
Execution stack:
writeHeap(v1, readHeap(v1) * 10); print(readHeap(v1)); countDown( cnt )

Symbol table:
cnt -> 1
v1 -> (1, int)
v2 -> (2, int)
v3 -> (3, int)

Heap table:
1 -> 2
2 -> 3
3 -> 4

Output:

File table:

------------------------
ID: 1
Execution stack:
fork(writeHeap(v2, readHeap(v2) * 10); print(readHeap(v2)); countDown( cnt )); fork(writeHeap(v3, readHeap(v3) * 10); print(readHeap(v3)); countDown( cnt )); await(cnt); print(100); countDown( cnt ); print(100)

Symbol table:
cnt -> 1
v1 -> (1, int)
v2 -> (2, int)
v3 -> (3, int)

Heap table:
1 -> 2
2 -> 3
3 -> 4

Output:

File table:

------------------------
ID: 2
Execution stack:
writeHeap(v1, readHeap(v1) * 10); print(readHeap(v1)); countDown( cnt )

Symbol table:
cnt -> 1
v1 -> (1, int)
v2 -> (2, int)
v3 -> (3, int)

Heap table:
1 -> 2
2 -> 3
3 -> 4

Output:

File table:

------------------------
ID: 1
Execution stack:
fork(writeHeap(v2, readHeap(v2) * 10); print(readHeap(v2)); countDown( cnt ))
fork(writeHeap(v3, readHeap(v3) * 10); print(readHeap(v3)); countDown( cnt )); await(cnt); print(100); countDown( cnt ); print(100)

Symbol table:
cnt -> 1
v1 -> (1, int)
v2 -> (2, int)
v3 -> (3, int)

Heap table:
1 -> 2
2 -> 3
3 -> 4

Output:

File table:

------------------------
ID: 2
Execution stack:
writeHeap(v1, readHeap(v1) * 10)
print(readHeap(v1)); countDown( cnt )

Symbol table:
cnt -> 1
v1 -> (1, int)
v2 -> (2, int)
v3 -> (3, int)

Heap table:
1 -> 2
2 -> 3
3 -> 4

Output:

File table:

------------------------
ID: 1
Execution stack:
fork(writeHeap(v2, readHeap(v2) * 10); print(readHeap(v2)); countDown( cnt ))
fork(writeHeap(v3, readHeap(v3) * 10); print(readHeap(v3)); countDown( cnt )); await(cnt); print(100); countDown( cnt ); print(100)

Symbol table:
cnt -> 1
v1 -> (1, int)
v2 -> (2, int)
v3 -> (3, int)

Heap table:
1 -> 2
2 -> 3
3 -> 4

Output:

File table:

------------------------
ID: 2
Execution stack:
writeHeap(v1, readHeap(v1) * 10)
print(readHeap(v1)); countDown( cnt )

Symbol table:
cnt -> 1
v1 -> (1, int)
v2 -> (2, int)
v3 -> (3, int)

Heap table:
1 -> 2
2 -> 3
3 -> 4

Output:

File table:

------------------------
ID: 1
Execution stack:
fork(writeHeap(v3, readHeap(v3) * 10); print(readHeap(v3)); countDown( cnt )); await(cnt); print(100); countDown( cnt ); print(100)

Symbol table:
cnt -> 1
v1 -> (1, int)
v2 -> (2, int)
v3 -> (3, int)

Heap table:
1 -> 20
2 -> 3
3 -> 4

Output:

File table:

------------------------
ID: 2
Execution stack:
print(readHeap(v1)); countDown( cnt )

Symbol table:
cnt -> 1
v1 -> (1, int)
v2 -> (2, int)
v3 -> (3, int)

Heap table:
1 -> 20
2 -> 3
3 -> 4

Output:

File table:

------------------------
ID: 3
Execution stack:
writeHeap(v2, readHeap(v2) * 10); print(readHeap(v2)); countDown( cnt )

Symbol table:
cnt -> 1
v1 -> (1, int)
v2 -> (2, int)
v3 -> (3, int)

Heap table:
1 -> 20
2 -> 3
3 -> 4

Output:

File table:

------------------------
ID: 1
Execution stack:
fork(writeHeap(v3, readHeap(v3) * 10); print(readHeap(v3)); countDown( cnt )); await(cnt); print(100); countDown( cnt ); print(100)

Symbol table:
cnt -> 1
v1 -> (1, int)
v2 -> (2, int)
v3 -> (3, int)

Heap table:
1 -> 20
2 -> 3
3 -> 4

Output:

File table:

------------------------
ID: 2
Execution stack:
print(readHeap(v1)); countDown( cnt )

Symbol table:
cnt -> 1
v1 -> (1, int)
v2 -> (2, int)
v3 -> (3, int)

Heap table:
1 -> 20
2 -> 3
3 -> 4

Output:

File table:

------------------------
ID: 3
Execution stack:
writeHeap(v2, readHeap(v2) * 10); print(readHeap(v2)); countDown( cnt )

Symbol table:
cnt -> 1
v1 -> (1, int)
v2 -> (2, int)
v3 -> (3, int)

Heap table:
1 -> 20
2 -> 3
3 -> 4

Output:

File table:

------------------------
ID: 1
Execution stack:
fork(writeHeap(v3, readHeap(v3) * 10); print(readHeap(v3)); countDown( cnt ))
await(cnt); print(100); countDown( cnt ); print(100)

Symbol table:
cnt -> 1
v1 -> (1, int)
v2 -> (2, int)
v3 -> (3, int)

Heap table:
1 -> 20
2 -> 3
3 -> 4

Output:

File table:

------------------------
ID: 2
Execution stack:
print(readHeap(v1))
countDown( cnt )

Symbol table:
cnt -> 1
v1 -> (1, int)
v2 -> (2, int)
v3 -> (3, int)

Heap table:
1 -> 20
2 -> 3
3 -> 4

Output:

File table:

------------------------
ID: 3
Execution stack:
writeHeap(v2, readHeap(v2) * 10)
print(readHeap(v2)); countDown( cnt )

Symbol table:
cnt -> 1
v1 -> (1, int)
v2 -> (2, int)
v3 -> (3, int)

Heap table:
1 -> 20
2 -> 3
3 -> 4

Output:

File table:

------------------------
ID: 1
Execution stack:
fork(writeHeap(v3, readHeap(v3) * 10); print(readHeap(v3)); countDown( cnt ))
await(cnt); print(100); countDown( cnt ); print(100)

Symbol table:
cnt -> 1
v1 -> (1, int)
v2 -> (2, int)
v3 -> (3, int)

Heap table:
1 -> 20
2 -> 3
3 -> 4

Output:

File table:

------------------------
ID: 2
Execution stack:
print(readHeap(v1))
countDown( cnt )

Symbol table:
cnt -> 1
v1 -> (1, int)
v2 -> (2, int)
v3 -> (3, int)

Heap table:
1 -> 20
2 -> 3
3 -> 4

Output:

File table:

------------------------
ID: 3
Execution stack:
writeHeap(v2, readHeap(v2) * 10)
print(readHeap(v2)); countDown( cnt )

Symbol table:
cnt -> 1
v1 -> (1, int)
v2 -> (2, int)
v3 -> (3, int)

Heap table:
1 -> 20
2 -> 3
3 -> 4

Output:

File table:

------------------------
ID: 1
Execution stack:
await(cnt); print(100); countDown( cnt ); print(100)

Symbol table:
cnt -> 1
v1 -> (1, int)
v2 -> (2, int)
v3 -> (3, int)

Heap table:
1 -> 20
2 -> 30
3 -> 4

Output:
20

File table:

------------------------
ID: 2
Execution stack:
countDown( cnt )

Symbol table:
cnt -> 1
v1 -> (1, int)
v2 -> (2, int)
v3 -> (3, int)

Heap table:
1 -> 20
2 -> 30
3 -> 4

Output:
20

File table:

------------------------
ID: 3
Execution stack:
print(readHeap(v2)); countDown( cnt )

Symbol table:
cnt -> 1
v1 -> (1, int)
v2 -> (2, int)
v3 -> (3, int)

Heap table:
1 -> 20
2 -> 30
3 -> 4

Output:
20

File table:

------------------------
ID: 4
Execution stack:
writeHeap(v3, readHeap(v3) * 10); print(readHeap(v3)); countDown( cnt )

Symbol table:
cnt -> 1
v1 -> (1, int)
v2 -> (2, int)
v3 -> (3, int)

Heap table:
1 -> 20
2 -> 30
3 -> 4

Output:
20

File table:

------------------------
ID: 1
Execution stack:
await(cnt); print(100); countDown( cnt ); print(100)

Symbol table:
cnt -> 1
v1 -> (1, int)
v2 -> (2, int)
v3 -> (3, int)

Heap table:
1 -> 20
2 -> 30
3 -> 4

Output:
20

File table:

------------------------
ID: 2
Execution stack:
countDown( cnt )

Symbol table:
cnt -> 1
v1 -> (1, int)
v2 -> (2, int)
v3 -> (3, int)

Heap table:
1 -> 20
2 -> 30
3 -> 4

Output:
20

File table:

------------------------
ID: 3
Execution stack:
print(readHeap(v2)); countDown( cnt )

Symbol table:
cnt -> 1
v1 -> (1, int)
v2 -> (2, int)
v3 -> (3, int)

Heap table:
1 -> 20
2 -> 30
3 -> 4

Output:
20

File table:

------------------------
ID: 4
Execution stack:
writeHeap(v3, readHeap(v3) * 10); print(readHeap(v3)); countDown( cnt )

Symbol table:
cnt -> 1
v1 -> (1, int)
v2 -> (2, int)
v3 -> (3, int)

Heap table:
1 -> 20
2 -> 30
3 -> 4

Output:
20

File table:

------------------------
ID: 1
Execution stack:
await(cnt)
print(100); countDown( cnt ); print(100)

Symbol table:
cnt -> 1
v1 -> (1, int)
v2 -> (2, int)
v3 -> (3, int)

Heap table:
1 -> 20
2 -> 30
3 -> 4

Output:
20
2

File table:

------------------------
ID: 2
Execution stack:

Symbol table:
cnt -> 1
v1 -> (1, int)
v2 -> (2, int)
v3 -> (3, int)

Heap table:
1 -> 20
2 -> 30
3 -> 4

Output:
20
2

File table:

------------------------
ID: 3
Execution stack:
print(readHeap(v2))
countDown( cnt )

Symbol table:
cnt -> 1
v1 -> (1, int)
v2 -> (2, int)
v3 -> (3, int)

Heap table:
1 -> 20
2 -> 30
3 -> 4

Output:
20
2

File table:

------------------------
ID: 4
Execution stack:
writeHeap(v3, readHeap(v3) * 10)
print(readHeap(v3)); countDown( cnt )

Symbol table:
cnt -> 1
v1 -> (1, int)
v2 -> (2, int)
v3 -> (3, int)

Heap table:
1 -> 20
2 -> 30
3 -> 4

Output:
20
2

File table:

------------------------
ID: 1
Execution stack:
await(cnt)
print(100); countDown( cnt ); print(100)

Symbol table:
cnt -> 1
v1 -> (1, int)
v2 -> (2, int)
v3 -> (3, int)

Heap table:
1 -> 20
2 -> 30
3 -> 4

Output:
20
2

File table:

------------------------
ID: 3
Execution stack:
print(readHeap(v2))
countDown( cnt )

Symbol table:
cnt -> 1
v1 -> (1, int)
v2 -> (2, int)
v3 -> (3, int)

Heap table:
1 -> 20
2 -> 30
3 -> 4

Output:
20
2

File table:

------------------------
ID: 4
Execution stack:
writeHeap(v3, readHeap(v3) * 10)
print(readHeap(v3)); countDown( cnt )

Symbol table:
cnt -> 1
v1 -> (1, int)
v2 -> (2, int)
v3 -> (3, int)

Heap table:
1 -> 20
2 -> 30
3 -> 4

Output:
20
2

File table:

------------------------
ID: 1
Execution stack:
await(cnt)
print(100); countDown( cnt ); print(100)

Symbol table:
cnt -> 1
v1 -> (1, int)
v2 -> (2, int)
v3 -> (3, int)

Heap table:
1 -> 20
2 -> 30
3 -> 40

Output:
20
2
30

File table:

------------------------
ID: 3
Execution stack:
countDown( cnt )

Symbol table:
cnt -> 1
v1 -> (1, int)
v2 -> (2, int)
v3 -> (3, int)

Heap table:
1 -> 20
2 -> 30
3 -> 40

Output:
20
2
30

File table:

------------------------
ID: 4
Execution stack:
print(readHeap(v3)); countDown( cnt )

Symbol table:
cnt -> 1
v1 -> (1, int)
v2 -> (2, int)
v3 -> (3, int)

Heap table:
1 -> 20
2 -> 30
3 -> 40

Output:
20
2
30

File table:

------------------------
ID: 1
Execution stack:
await(cnt)
print(100); countDown( cnt ); print(100)

Symbol table:
cnt -> 1
v1 -> (1, int)
v2 -> (2, int)
v3 -> (3, int)

Heap table:
1 -> 20
2 -> 30
3 -> 40

Output:
20
2
30

File table:

------------------------
ID: 3
Execution stack:
countDown( cnt )

Symbol table:
cnt -> 1
v1 -> (1, int)
v2 -> (2, int)
v3 -> (3, int)

Heap table:
1 -> 20
2 -> 30
3 -> 40

Output:
20
2
30

File table:

------------------------
ID: 4
Execution stack:
print(readHeap(v3)); countDown( cnt )

Symbol table:
cnt -> 1
v1 -> (1, int)
v2 -> (2, int)
v3 -> (3, int)

Heap table:
1 -> 20
2 -> 30
3 -> 40

Output:
20
2
30

File table:

------------------------
ID: 1
Execution stack:
await(cnt)
print(100); countDown( cnt ); print(100)

Symbol table:
cnt -> 1
v1 -> (1, int)
v2 -> (2, int)
v3 -> (3, int)

Heap table:
1 -> 20
2 -> 30
3 -> 40

Output:
20
2
30
3

File table:

------------------------
ID: 3
Execution stack:

Symbol table:
cnt -> 1
v1 -> (1, int)
v2 -> (2, int)
v3 -> (3, int)

Heap table:
1 -> 20
2 -> 30
3 -> 40

Output:
20
2
30
3

File table:

------------------------
ID: 4
Execution stack:
print(readHeap(v3))
countDown( cnt )

Symbol table:
cnt -> 1
v1 -> (1, int)
v2 -> (2, int)
v3 -> (3, int)

Heap table:
1 -> 20
2 -> 30
3 -> 40

Output:
20
2
30
3

File table:

------------------------
ID: 1
Execution stack:
await(cnt)
print(100); countDown( cnt ); print(100)

Symbol table:
cnt -> 1
v1 -> (1, int)
v2 -> (2, int)
v3 -> (3, int)

Heap table:
1 -> 20
2 -> 30
3 -> 40

Output:
20
2
30
3

File table:

------------------------
ID: 4
Execution stack:
print(readHeap(v3))
countDown( cnt )

Symbol table:
cnt -> 1
v1 -> (1, int)
v2 -> (2, int)
v3 -> (3, int)

Heap table:
1 -> 20
2 -> 30
3 -> 40

Output:
20
2
30
3

File table:

------------------------
ID: 1
Execution stack:
await(cnt)
print(100); countDown( cnt ); print(100)

Symbol table:
cnt -> 1
v1 -> (1, int)
v2 -> (2, int)
v3 -> (3, int)

Heap table:
1 -> 20
2 -> 30
3 -> 40

Output:
20
2
30
3
40

File table:

------------------------
ID: 4
Execution stack:
countDown( cnt )

Symbol table:
cnt -> 1
v1 -> (1, int)
v2 -> (2, int)
v3 -> (3, int)

Heap table:
1 -> 20
2 -> 30
3 -> 40

Output:
20
2
30
3
40

File table:

------------------------
ID: 1
Execution stack:
await(cnt)
print(100); countDown( cnt ); print(100)

Symbol table:
cnt -> 1
v1 -> (1, int)
v2 -> (2, int)
v3 -> (3, int)

Heap table:
1 -> 20
2 -> 30
3 -> 40

Output:
20
2
30
3
40

File table:

------------------------
ID: 4
Execution stack:
countDown( cnt )

Symbol table:
cnt -> 1
v1 -> (1, int)
v2 -> (2, int)
v3 -> (3, int)

Heap table:
1 -> 20
2 -> 30
3 -> 40

Output:
20
2
30
3
40

File table:

------------------------
ID: 1
Execution stack:
await(cnt)
print(100); countDown( cnt ); print(100)

Symbol table:
cnt -> 1
v1 -> (1, int)
v2 -> (2, int)
v3 -> (3, int)

Heap table:
1 -> 20
2 -> 30
3 -> 40

Output:
20
2
30
3
40
4

File table:

------------------------
ID: 4
Execution stack:

Symbol table:
cnt -> 1
v1 -> (1, int)
v2 -> (2, int)
v3 -> (3, int)

Heap table:
1 -> 20
2 -> 30
3 -> 40

Output:
20
2
30
3
40
4

File table:

------------------------
ID: 1
Execution stack:
await(cnt)
print(100); countDown( cnt ); print(100)

Symbol table:
cnt -> 1
v1 -> (1, int)
v2 -> (2, int)
v3 -> (3, int)

Heap table:
1 -> 20
2 -> 30
3 -> 40

Output:
20
2
30
3
40
4

File table:

------------------------
ID: 1
Execution stack:
print(100); countDown( cnt ); print(100)

Symbol table:
cnt -> 1
v1 -> (1, int)
v2 -> (2, int)
v3 -> (3, int)

Heap table:
1 -> 20
2 -> 30
3 -> 40

Output:
20
2
30
3
40
4

File table:

------------------------
ID: 1
Execution stack:
print(100); countDown( cnt ); print(100)

Symbol table:
cnt -> 1
v1 -> (1, int)
v2 -> (2, int)
v3 -> (3, int)

Heap table:
1 -> 20
2 -> 30
3 -> 40

Output:
20
2
30
3
40
4

File table:

------------------------
ID: 1
Execution stack:
print(100)
countDown( cnt ); print(100)

Symbol table:
cnt -> 1
v1 -> (1, int)
v2 -> (2, int)
v3 -> (3, int)

Heap table:
1 -> 20
2 -> 30
3 -> 40

Output:
20
2
30
3
40
4

File table:

------------------------
ID: 1
Execution stack:
print(100)
countDown( cnt ); print(100)

Symbol table:
cnt -> 1
v1 -> (1, int)
v2 -> (2, int)
v3 -> (3, int)

Heap table:
1 -> 20
2 -> 30
3 -> 40

Output:
20
2
30
3
40
4

File table:

------------------------
ID: 1
Execution stack:
countDown( cnt ); print(100)

Symbol table:
cnt -> 1
v1 -> (1, int)
v2 -> (2, int)
v3 -> (3, int)

Heap table:
1 -> 20
2 -> 30
3 -> 40

Output:
20
2
30
3
40
4
100

File table:

------------------------
ID: 1
Execution stack:
countDown( cnt ); print(100)

Symbol table:
cnt -> 1
v1 -> (1, int)
v2 -> (2, int)
v3 -> (3, int)

Heap table:
1 -> 20
2 -> 30
3 -> 40

Output:
20
2
30
3
40
4
100

File table:

------------------------
ID: 1
Execution stack:
countDown( cnt )
print(100)

Symbol table:
cnt -> 1
v1 -> (1, int)
v2 -> (2, int)
v3 -> (3, int)

Heap table:
1 -> 20
2 -> 30
3 -> 40

Output:
20
2
30
3
40
4
100

File table:

------------------------
ID: 1
Execution stack:
countDown( cnt )
print(100)

Symbol table:
cnt -> 1
v1 -> (1, int)
v2 -> (2, int)
v3 -> (3, int)

Heap table:
1 -> 20
2 -> 30
3 -> 40

Output:
20
2
30
3
40
4
100

File table:

------------------------
ID: 1
Execution stack:
print(100)

Symbol table:
cnt -> 1
v1 -> (1, int)
v2 -> (2, int)
v3 -> (3, int)

Heap table:
1 -> 20
2 -> 30
3 -> 40

Output:
20
2
30
3
40
4
100
1

File table:

------------------------
ID: 1
Execution stack:
print(100)

Symbol table:
cnt -> 1
v1 -> (1, int)
v2 -> (2, int)
v3 -> (3, int)

Heap table:
1 -> 20
2 -> 30
3 -> 40

Output:
20
2
30
3
40
4
100
1

File table:

------------------------
ID: 1
Execution stack:

Symbol table:
cnt -> 1
v1 -> (1, int)
v2 -> (2, int)
v3 -> (3, int)

Heap table:
1 -> 20
2 -> 30
3 -> 40

Output:
20
2
30
3
40
4
100
1
100

File table:

------------------------
ID: 1
Execution stack:
int cnt; Ref(int) v1; Ref(int) v2; Ref(int) v3; new(v1, 2); new(v2, 3); new(v3, 4); newLatch(cnt, readHeap(v2)); fork(writeHeap(v1, readHeap(v1) * 10); print(readHeap(v1)); countDown( cnt )); fork(writeHeap(v2, readHeap(v2) * 10); print(readHeap(v2)); countDown( cnt )); fork(writeHeap(v3, readHeap(v3) * 10); print(readHeap(v3)); countDown( cnt )); await(cnt); print(100); countDown( cnt ); print(100)

Symbol table:

Heap table:

Output:

File table:

------------------------
ID: 1
Execution stack:
int cnt
Ref(int) v1; Ref(int) v2; Ref(int) v3; new(v1, 2); new(v2, 3); new(v3, 4); newLatch(cnt, readHeap(v2)); fork(writeHeap(v1, readHeap(v1) * 10); print(readHeap(v1)); countDown( cnt )); fork(writeHeap(v2, readHeap(v2) * 10); print(readHeap(v2)); countDown( cnt )); fork(writeHeap(v3, readHeap(v3) * 10); print(readHeap(v3)); countDown( cnt )); await(cnt); print(100); countDown( cnt ); print(100)

Symbol table:

Heap table:

Output:

File table:

------------------------
ID: 1
Execution stack:
int cnt
Ref(int) v1; Ref(int) v2; Ref(int) v3; new(v1, 2); new(v2, 3); new(v3, 4); newLatch(cnt, readHeap(v2)); fork(writeHeap(v1, readHeap(v1) * 10); print(readHeap(v1)); countDown( cnt )); fork(writeHeap(v2, readHeap(v2) * 10); print(readHeap(v2)); countDown( cnt )); fork(writeHeap(v3, readHeap(v3) * 10); print(readHeap(v3)); countDown( cnt )); await(cnt); print(100); countDown( cnt ); print(100)

Symbol table:

Heap table:

Output:

File table:

------------------------
ID: 1
Execution stack:
Ref(int) v1; Ref(int) v2; Ref(int) v3; new(v1, 2); new(v2, 3); new(v3, 4); newLatch(cnt, readHeap(v2)); fork(writeHeap(v1, readHeap(v1) * 10); print(readHeap(v1)); countDown( cnt )); fork(writeHeap(v2, readHeap(v2) * 10); print(readHeap(v2)); countDown( cnt )); fork(writeHeap(v3, readHeap(v3) * 10); print(readHeap(v3)); countDown( cnt )); await(cnt); print(100); countDown( cnt ); print(100)

Symbol table:
cnt -> 0

Heap table:

Output:

File table:

------------------------
ID: 1
Execution stack:
Ref(int) v1; Ref(int) v2; Ref(int) v3; new(v1, 2); new(v2, 3); new(v3, 4); newLatch(cnt, readHeap(v2)); fork(writeHeap(v1, readHeap(v1) * 10); print(readHeap(v1)); countDown( cnt )); fork(writeHeap(v2, readHeap(v2) * 10); print(readHeap(v2)); countDown( cnt )); fork(writeHeap(v3, readHeap(v3) * 10); print(readHeap(v3)); countDown( cnt )); await(cnt); print(100); countDown( cnt ); print(100)

Symbol table:
cnt -> 0

Heap table:

Output:

File table:

------------------------
ID: 1
Execution stack:
Ref(int) v1
Ref(int) v2; Ref(int) v3; new(v1, 2); new(v2, 3); new(v3, 4); newLatch(cnt, readHeap(v2)); fork(writeHeap(v1, readHeap(v1) * 10); print(readHeap(v1)); countDown( cnt )); fork(writeHeap(v2, readHeap(v2) * 10); print(readHeap(v2)); countDown( cnt )); fork(writeHeap(v3, readHeap(v3) * 10); print(readHeap(v3)); countDown( cnt )); await(cnt); print(100); countDown( cnt ); print(100)

Symbol table:
cnt -> 0

Heap table:

Output:

File table:

------------------------
ID: 1
Execution stack:
Ref(int) v1
Ref(int) v2; Ref(int) v3; new(v1, 2); new(v2, 3); new(v3, 4); newLatch(cnt, readHeap(v2)); fork(writeHeap(v1, readHeap(v1) * 10); print(readHeap(v1)); countDown( cnt )); fork(writeHeap(v2, readHeap(v2) * 10); print(readHeap(v2)); countDown( cnt )); fork(writeHeap(v3, readHeap(v3) * 10); print(readHeap(v3)); countDown( cnt )); await(cnt); print(100); countDown( cnt ); print(100)

Symbol table:
cnt -> 0

Heap table:

Output:

File table:

------------------------
ID: 1
Execution stack:
Ref(int) v2; Ref(int) v3; new(v1, 2); new(v2, 3); new(v3, 4); newLatch(cnt, readHeap(v2)); fork(writeHeap(v1, readHeap(v1) * 10); print(readHeap(v1)); countDown( cnt )); fork(writeHeap(v2, readHeap(v2) * 10); print(readHeap(v2)); countDown( cnt )); fork(writeHeap(v3, readHeap(v3) * 10); print(readHeap(v3)); countDown( cnt )); await(cnt); print(100); countDown( cnt ); print(100)

Symbol table:
cnt -> 0
v1 -> (1, int)

Heap table:

Output:

File table:

------------------------
ID: 1
Execution stack:
Ref(int) v2; Ref(int) v3; new(v1, 2); new(v2, 3); new(v3, 4); newLatch(cnt, readHeap(v2)); fork(writeHeap(v1, readHeap(v1) * 10); print(readHeap(v1)); countDown( cnt )); fork(writeHeap(v2, readHeap(v2) * 10); print(readHeap(v2)); countDown( cnt )); fork(writeHeap(v3, readHeap(v3) * 10); print(readHeap(v3)); countDown( cnt )); await(cnt); print(100); countDown( cnt ); print(100)

Symbol table:
cnt -> 0
v1 -> (1, int)

Heap table:

Output:

File table:

------------------------
ID: 1
Execution stack:
Ref(int) v2
Ref(int) v3; new(v1, 2); new(v2, 3); new(v3, 4); newLatch(cnt, readHeap(v2)); fork(writeHeap(v1, readHeap(v1) * 10); print(readHeap(v1)); countDown( cnt )); fork(writeHeap(v2, readHeap(v2) * 10); print(readHeap(v2)); countDown( cnt )); fork(writeHeap(v3, readHeap(v3) * 10); print(readHeap(v3)); countDown( cnt )); await(cnt); print(100); countDown( cnt ); print(100)

Symbol table:
cnt -> 0
v1 -> (1, int)

Heap table:

Output:

File table:

------------------------
ID: 1
Execution stack:
Ref(int) v2
Ref(int) v3; new(v1, 2); new(v2, 3); new(v3, 4); newLatch(cnt, readHeap(v2)); fork(writeHeap(v1, readHeap(v1) * 10); print(readHeap(v1)); countDown( cnt )); fork(writeHeap(v2, readHeap(v2) * 10); print(readHeap(v2)); countDown( cnt )); fork(writeHeap(v3, readHeap(v3) * 10); print(readHeap(v3)); countDown( cnt )); await(cnt); print(100); countDown( cnt ); print(100)

Symbol table:
cnt -> 0
v1 -> (1, int)

Heap table:

Output:

File table:

------------------------
ID: 1
Execution stack:
Ref(int) v3; new(v1, 2); new(v2, 3); new(v3, 4); newLatch(cnt, readHeap(v2)); fork(writeHeap(v1, readHeap(v1) * 10); print(readHeap(v1)); countDown( cnt )); fork(writeHeap(v2, readHeap(v2) * 10); print(readHeap(v2)); countDown( cnt )); fork(writeHeap(v3, readHeap(v3) * 10); print(readHeap(v3)); countDown( cnt )); await(cnt); print(100); countDown( cnt ); print(100)

Symbol table:
cnt -> 0
v1 -> (1, int)
v2 -> (1, int)

Heap table:

Output:

File table:

------------------------
ID: 1
Execution stack:
Ref(int) v3; new(v1, 2); new(v2, 3); new(v3, 4); newLatch(cnt, readHeap(v2)); fork(writeHeap(v1, readHeap(v1) * 10); print(readHeap(v1)); countDown( cnt )); fork(writeHeap(v2, readHeap(v2) * 10); print(readHeap(v2)); countDown( cnt )); fork(writeHeap(v3, readHeap(v3) * 10); print(readHeap(v3)); countDown( cnt )); await(cnt); print(100); countDown( cnt ); print(100)

Symbol table:
cnt -> 0
v1 -> (1, int)
v2 -> (1, int)

Heap table:

Output:

File table:

------------------------
ID: 1
Execution stack:
Ref(int) v3
new(v1, 2); new(v2, 3); new(v3, 4); newLatch(cnt, readHeap(v2)); fork(writeHeap(v1, readHeap(v1) * 10); print(readHeap(v1)); countDown( cnt )); fork(writeHeap(v2, readHeap(v2) * 10); print(readHeap(v2)); countDown( cnt )); fork(writeHeap(v3, readHeap(v3) * 10); print(readHeap(v3)); countDown( cnt )); await(cnt); print(100); countDown( cnt ); print(100)

Symbol table:
cnt -> 0
v1 -> (1, int)
v2 -> (1, int)

Heap table:

Output:

File table:

------------------------
ID: 1
Execution stack:
Ref(int) v3
new(v1, 2); new(v2, 3); new(v3, 4); newLatch(cnt, readHeap(v2)); fork(writeHeap(v1, readHeap(v1) * 10); print(readHeap(v1)); countDown( cnt )); fork(writeHeap(v2, readHeap(v2) * 10); print(readHeap(v2)); countDown( cnt )); fork(writeHeap(v3, readHeap(v3) * 10); print(readHeap(v3)); countDown( cnt )); await(cnt); print(100); countDown( cnt ); print(100)

Symbol table:
cnt -> 0
v1 -> (1, int)
v2 -> (1, int)

Heap table:

Output:

File table:

------------------------
ID: 1
Execution stack:
new(v1, 2); new(v2, 3); new(v3, 4); newLatch(cnt, readHeap(v2)); fork(writeHeap(v1, readHeap(v1) * 10); print(readHeap(v1)); countDown( cnt )); fork(writeHeap(v2, readHeap(v2) * 10); print(readHeap(v2)); countDown( cnt )); fork(writeHeap(v3, readHeap(v3) * 10); print(readHeap(v3)); countDown( cnt )); await(cnt); print(100); countDown( cnt ); print(100)

Symbol table:
cnt -> 0
v1 -> (1, int)
v2 -> (1, int)
v3 -> (1, int)

Heap table:

Output:

File table:

------------------------
ID: 1
Execution stack:
new(v1, 2); new(v2, 3); new(v3, 4); newLatch(cnt, readHeap(v2)); fork(writeHeap(v1, readHeap(v1) * 10); print(readHeap(v1)); countDown( cnt )); fork(writeHeap(v2, readHeap(v2) * 10); print(readHeap(v2)); countDown( cnt )); fork(writeHeap(v3, readHeap(v3) * 10); print(readHeap(v3)); countDown( cnt )); await(cnt); print(100); countDown( cnt ); print(100)

Symbol table:
cnt -> 0
v1 -> (1, int)
v2 -> (1, int)
v3 -> (1, int)

Heap table:

Output:

File table:

------------------------
ID: 1
Execution stack:
new(v1, 2)
new(v2, 3); new(v3, 4); newLatch(cnt, readHeap(v2)); fork(writeHeap(v1, readHeap(v1) * 10); print(readHeap(v1)); countDown( cnt )); fork(writeHeap(v2, readHeap(v2) * 10); print(readHeap(v2)); countDown( cnt )); fork(writeHeap(v3, readHeap(v3) * 10); print(readHeap(v3)); countDown( cnt )); await(cnt); print(100); countDown( cnt ); print(100)

Symbol table:
cnt -> 0
v1 -> (1, int)
v2 -> (1, int)
v3 -> (1, int)

Heap table:

Output:

File table:

------------------------
ID: 1
Execution stack:
new(v1, 2)
new(v2, 3); new(v3, 4); newLatch(cnt, readHeap(v2)); fork(writeHeap(v1, readHeap(v1) * 10); print(readHeap(v1)); countDown( cnt )); fork(writeHeap(v2, readHeap(v2) * 10); print(readHeap(v2)); countDown( cnt )); fork(writeHeap(v3, readHeap(v3) * 10); print(readHeap(v3)); countDown( cnt )); await(cnt); print(100); countDown( cnt ); print(100)

Symbol table:
cnt -> 0
v1 -> (1, int)
v2 -> (1, int)
v3 -> (1, int)

Heap table:

Output:

File table:

------------------------
ID: 1
Execution stack:
new(v2, 3); new(v3, 4); newLatch(cnt, readHeap(v2)); fork(writeHeap(v1, readHeap(v1) * 10); print(readHeap(v1)); countDown( cnt )); fork(writeHeap(v2, readHeap(v2) * 10); print(readHeap(v2)); countDown( cnt )); fork(writeHeap(v3, readHeap(v3) * 10); print(readHeap(v3)); countDown( cnt )); await(cnt); print(100); countDown( cnt ); print(100)

Symbol table:
cnt -> 0
v1 -> (1, int)
v2 -> (1, int)
v3 -> (1, int)

Heap table:
1 -> 2

Output:

File table:

------------------------
ID: 1
Execution stack:
new(v2, 3); new(v3, 4); newLatch(cnt, readHeap(v2)); fork(writeHeap(v1, readHeap(v1) * 10); print(readHeap(v1)); countDown( cnt )); fork(writeHeap(v2, readHeap(v2) * 10); print(readHeap(v2)); countDown( cnt )); fork(writeHeap(v3, readHeap(v3) * 10); print(readHeap(v3)); countDown( cnt )); await(cnt); print(100); countDown( cnt ); print(100)

Symbol table:
cnt -> 0
v1 -> (1, int)
v2 -> (1, int)
v3 -> (1, int)

Heap table:
1 -> 2

Output:

File table:

------------------------
ID: 1
Execution stack:
new(v2, 3)
new(v3, 4); newLatch(cnt, readHeap(v2)); fork(writeHeap(v1, readHeap(v1) * 10); print(readHeap(v1)); countDown( cnt )); fork(writeHeap(v2, readHeap(v2) * 10); print(readHeap(v2)); countDown( cnt )); fork(writeHeap(v3, readHeap(v3) * 10); print(readHeap(v3)); countDown( cnt )); await(cnt); print(100); countDown( cnt ); print(100)

Symbol table:
cnt -> 0
v1 -> (1, int)
v2 -> (1, int)
v3 -> (1, int)

Heap table:
1 -> 2

Output:

File table:

------------------------
ID: 1
Execution stack:
new(v2, 3)
new(v3, 4); newLatch(cnt, readHeap(v2)); fork(writeHeap(v1, readHeap(v1) * 10); print(readHeap(v1)); countDown( cnt )); fork(writeHeap(v2, readHeap(v2) * 10); print(readHeap(v2)); countDown( cnt )); fork(writeHeap(v3, readHeap(v3) * 10); print(readHeap(v3)); countDown( cnt )); await(cnt); print(100); countDown( cnt ); print(100)

Symbol table:
cnt -> 0
v1 -> (1, int)
v2 -> (1, int)
v3 -> (1, int)

Heap table:
1 -> 2

Output:

File table:

------------------------
ID: 1
Execution stack:
new(v3, 4); newLatch(cnt, readHeap(v2)); fork(writeHeap(v1, readHeap(v1) * 10); print(readHeap(v1)); countDown( cnt )); fork(writeHeap(v2, readHeap(v2) * 10); print(readHeap(v2)); countDown( cnt )); fork(writeHeap(v3, readHeap(v3) * 10); print(readHeap(v3)); countDown( cnt )); await(cnt); print(100); countDown( cnt ); print(100)

Symbol table:
cnt -> 0
v1 -> (1, int)
v2 -> (2, int)
v3 -> (1, int)

Heap table:
1 -> 2
2 -> 3

Output:

File table:

------------------------
ID: 1
Execution stack:
new(v3, 4); newLatch(cnt, readHeap(v2)); fork(writeHeap(v1, readHeap(v1) * 10); print(readHeap(v1)); countDown( cnt )); fork(writeHeap(v2, readHeap(v2) * 10); print(readHeap(v2)); countDown( cnt )); fork(writeHeap(v3, readHeap(v3) * 10); print(readHeap(v3)); countDown( cnt )); await(cnt); print(100); countDown( cnt ); print(100)

Symbol table:
cnt -> 0
v1 -> (1, int)
v2 -> (2, int)
v3 -> (1, int)

Heap table:
1 -> 2
2 -> 3

Output:

File table:

------------------------
ID: 1
Execution stack:
new(v3, 4)
newLatch(cnt, readHeap(v2)); fork(writeHeap(v1, readHeap(v1) * 10); print(readHeap(v1)); countDown( cnt )); fork(writeHeap(v2, readHeap(v2) * 10); print(readHeap(v2)); countDown( cnt )); fork(writeHeap(v3, readHeap(v3) * 10); print(readHeap(v3)); countDown( cnt )); await(cnt); print(100); countDown( cnt ); print(100)

Symbol table:
cnt -> 0
v1 -> (1, int)
v2 -> (2, int)
v3 -> (1, int)

Heap table:
1 -> 2
2 -> 3

Output:

File table:

------------------------
ID: 1
Execution stack:
new(v3, 4)
newLatch(cnt, readHeap(v2)); fork(writeHeap(v1, readHeap(v1) * 10); print(readHeap(v1)); countDown( cnt )); fork(writeHeap(v2, readHeap(v2) * 10); print(readHeap(v2)); countDown( cnt )); fork(writeHeap(v3, readHeap(v3) * 10); print(readHeap(v3)); countDown( cnt )); await(cnt); print(100); countDown( cnt ); print(100)

Symbol table:
cnt -> 0
v1 -> (1, int)
v2 -> (2, int)
v3 -> (1, int)

Heap table:
1 -> 2
2 -> 3

Output:

File table:

------------------------
ID: 1
Execution stack:
newLatch(cnt, readHeap(v2)); fork(writeHeap(v1, readHeap(v1) * 10); print(readHeap(v1)); countDown( cnt )); fork(writeHeap(v2, readHeap(v2) * 10); print(readHeap(v2)); countDown( cnt )); fork(writeHeap(v3, readHeap(v3) * 10); print(readHeap(v3)); countDown( cnt )); await(cnt); print(100); countDown( cnt ); print(100)

Symbol table:
cnt -> 0
v1 -> (1, int)
v2 -> (2, int)
v3 -> (3, int)

Heap table:
1 -> 2
2 -> 3
3 -> 4

Output:

File table:

------------------------
ID: 1
Execution stack:
newLatch(cnt, readHeap(v2)); fork(writeHeap(v1, readHeap(v1) * 10); print(readHeap(v1)); countDown( cnt )); fork(writeHeap(v2, readHeap(v2) * 10); print(readHeap(v2)); countDown( cnt )); fork(writeHeap(v3, readHeap(v3) * 10); print(readHeap(v3)); countDown( cnt )); await(cnt); print(100); countDown( cnt ); print(100)

Symbol table:
cnt -> 0
v1 -> (1, int)
v2 -> (2, int)
v3 -> (3, int)

Heap table:
1 -> 2
2 -> 3
3 -> 4

Output:

File table:

------------------------
ID: 1
Execution stack:
newLatch(cnt, readHeap(v2))
fork(writeHeap(v1, readHeap(v1) * 10); print(readHeap(v1)); countDown( cnt )); fork(writeHeap(v2, readHeap(v2) * 10); print(readHeap(v2)); countDown( cnt )); fork(writeHeap(v3, readHeap(v3) * 10); print(readHeap(v3)); countDown( cnt )); await(cnt); print(100); countDown( cnt ); print(100)

Symbol table:
cnt -> 0
v1 -> (1, int)
v2 -> (2, int)
v3 -> (3, int)

Heap table:
1 -> 2
2 -> 3
3 -> 4

Output:

File table:

------------------------
ID: 1
Execution stack:
newLatch(cnt, readHeap(v2))
fork(writeHeap(v1, readHeap(v1) * 10); print(readHeap(v1)); countDown( cnt )); fork(writeHeap(v2, readHeap(v2) * 10); print(readHeap(v2)); countDown( cnt )); fork(writeHeap(v3, readHeap(v3) * 10); print(readHeap(v3)); countDown( cnt )); await(cnt); print(100); countDown( cnt ); print(100)

Symbol table:
cnt -> 0
v1 -> (1, int)
v2 -> (2, int)
v3 -> (3, int)

Heap table:
1 -> 2
2 -> 3
3 -> 4

Output:

File table:

------------------------
ID: 1
Execution stack:
fork(writeHeap(v1, readHeap(v1) * 10); print(readHeap(v1)); countDown( cnt )); fork(writeHeap(v2, readHeap(v2) * 10); print(readHeap(v2)); countDown( cnt )); fork(writeHeap(v3, readHeap(v3) * 10); print(readHeap(v3)); countDown( cnt )); await(cnt); print(100); countDown( cnt ); print(100)

Symbol table:
cnt -> 1
v1 -> (1, int)
v2 -> (2, int)
v3 -> (3, int)

Heap table:
1 -> 2
2 -> 3
3 -> 4

Output:

File table:

------------------------
ID: 1
Execution stack:
fork(writeHeap(v1, readHeap(v1) * 10); print(readHeap(v1)); countDown( cnt )); fork(writeHeap(v2, readHeap(v2) * 10); print(readHeap(v2)); countDown( cnt )); fork(writeHeap(v3, readHeap(v3) * 10); print(readHeap(v3)); countDown( cnt )); await(cnt); print(100); countDown( cnt ); print(100)

Symbol table:
cnt -> 1
v1 -> (1, int)
v2 -> (2, int)
v3 -> (3, int)

Heap table:
1 -> 2
2 -> 3
3 -> 4

Output:

File table:

------------------------
ID: 1
Execution stack:
fork(writeHeap(v1, readHeap(v1) * 10); print(readHeap(v1)); countDown( cnt ))
fork(writeHeap(v2, readHeap(v2) * 10); print(readHeap(v2)); countDown( cnt )); fork(writeHeap(v3, readHeap(v3) * 10); print(readHeap(v3)); countDown( cnt )); await(cnt); print(100); countDown( cnt ); print(100)

Symbol table:
cnt -> 1
v1 -> (1, int)
v2 -> (2, int)
v3 -> (3, int)

Heap table:
1 -> 2
2 -> 3
3 -> 4

Output:

File table:

------------------------
ID: 1
Execution stack:
fork(writeHeap(v1, readHeap(v1) * 10); print(readHeap(v1)); countDown( cnt ))
fork(writeHeap(v2, readHeap(v2) * 10); print(readHeap(v2)); countDown( cnt )); fork(writeHeap(v3, readHeap(v3) * 10); print(readHeap(v3)); countDown( cnt )); await(cnt); print(100); countDown( cnt ); print(100)

Symbol table:
cnt -> 1
v1 -> (1, int)
v2 -> (2, int)
v3 -> (3, int)

Heap table:
1 -> 2
2 -> 3
3 -> 4

Output:

File table:

------------------------
ID: 1
Execution stack:
fork(writeHeap(v2, readHeap(v2) * 10); print(readHeap(v2)); countDown( cnt )); fork(writeHeap(v3, readHeap(v3) * 10); print(readHeap(v3)); countDown( cnt )); await(cnt); print(100); countDown( cnt ); print(100)

Symbol table:
cnt -> 1
v1 -> (1, int)
v2 -> (2, int)
v3 -> (3, int)

Heap table:
1 -> 2
2 -> 3
3 -> 4

Output:

File table:

------------------------
ID: 2
Execution stack:
writeHeap(v1, readHeap(v1) * 10); print(readHeap(v1)); countDown( cnt )

Symbol table:
cnt -> 1
v1 -> (1, int)
v2 -> (2, int)
v3 -> (3, int)

Heap table:
1 -> 2
2 -> 3
3 -> 4

Output:

File table:

------------------------
ID: 1
Execution stack:
fork(writeHeap(v2, readHeap(v2) * 10); print(readHeap(v2)); countDown( cnt )); fork(writeHeap(v3, readHeap(v3) * 10); print(readHeap(v3)); countDown( cnt )); await(cnt); print(100); countDown( cnt ); print(100)

Symbol table:
cnt -> 1
v1 -> (1, int)
v2 -> (2, int)
v3 -> (3, int)

Heap table:
1 -> 2
2 -> 3
3 -> 4

Output:

File table:

------------------------
ID: 2
Execution stack:
writeHeap(v1, readHeap(v1) * 10); print(readHeap(v1)); countDown( cnt )

Symbol table:
cnt -> 1
v1 -> (1, int)
v2 -> (2, int)
v3 -> (3, int)

Heap table:
1 -> 2
2 -> 3
3 -> 4

Output:

File table:

------------------------
ID: 1
Execution stack:
fork(writeHeap(v2, readHeap(v2) * 10); print(readHeap(v2)); countDown( cnt ))
fork(writeHeap(v3, readHeap(v3) * 10); print(readHeap(v3)); countDown( cnt )); await(cnt); print(100); countDown( cnt ); print(100)

Symbol table:
cnt -> 1
v1 -> (1, int)
v2 -> (2, int)
v3 -> (3, int)

Heap table:
1 -> 2
2 -> 3
3 -> 4

Output:

File table:

------------------------
ID: 2
Execution stack:
writeHeap(v1, readHeap(v1) * 10)
print(readHeap(v1)); countDown( cnt )

Symbol table:
cnt -> 1
v1 -> (1, int)
v2 -> (2, int)
v3 -> (3, int)

Heap table:
1 -> 2
2 -> 3
3 -> 4

Output:

File table:

------------------------
ID: 1
Execution stack:
fork(writeHeap(v2, readHeap(v2) * 10); print(readHeap(v2)); countDown( cnt ))
fork(writeHeap(v3, readHeap(v3) * 10); print(readHeap(v3)); countDown( cnt )); await(cnt); print(100); countDown( cnt ); print(100)

Symbol table:
cnt -> 1
v1 -> (1, int)
v2 -> (2, int)
v3 -> (3, int)

Heap table:
1 -> 2
2 -> 3
3 -> 4

Output:

File table:

------------------------
ID: 2
Execution stack:
writeHeap(v1, readHeap(v1) * 10)
print(readHeap(v1)); countDown( cnt )

Symbol table:
cnt -> 1
v1 -> (1, int)
v2 -> (2, int)
v3 -> (3, int)

Heap table:
1 -> 2
2 -> 3
3 -> 4

Output:

File table:

------------------------
ID: 1
Execution stack:
fork(writeHeap(v3, readHeap(v3) * 10); print(readHeap(v3)); countDown( cnt )); await(cnt); print(100); countDown( cnt ); print(100)

Symbol table:
cnt -> 1
v1 -> (1, int)
v2 -> (2, int)
v3 -> (3, int)

Heap table:
1 -> 20
2 -> 3
3 -> 4

Output:

File table:

------------------------
ID: 2
Execution stack:
print(readHeap(v1)); countDown( cnt )

Symbol table:
cnt -> 1
v1 -> (1, int)
v2 -> (2, int)
v3 -> (3, int)

Heap table:
1 -> 20
2 -> 3
3 -> 4

Output:

File table:

------------------------
ID: 3
Execution stack:
writeHeap(v2, readHeap(v2) * 10); print(readHeap(v2)); countDown( cnt )

Symbol table:
cnt -> 1
v1 -> (1, int)
v2 -> (2, int)
v3 -> (3, int)

Heap table:
1 -> 20
2 -> 3
3 -> 4

Output:

File table:

------------------------
ID: 1
Execution stack:
fork(writeHeap(v3, readHeap(v3) * 10); print(readHeap(v3)); countDown( cnt )); await(cnt); print(100); countDown( cnt ); print(100)

Symbol table:
cnt -> 1
v1 -> (1, int)
v2 -> (2, int)
v3 -> (3, int)

Heap table:
1 -> 20
2 -> 3
3 -> 4

Output:

File table:

------------------------
ID: 2
Execution stack:
print(readHeap(v1)); countDown( cnt )

Symbol table:
cnt -> 1
v1 -> (1, int)
v2 -> (2, int)
v3 -> (3, int)

Heap table:
1 -> 20
2 -> 3
3 -> 4

Output:

File table:

------------------------
ID: 3
Execution stack:
writeHeap(v2, readHeap(v2) * 10); print(readHeap(v2)); countDown( cnt )

Symbol table:
cnt -> 1
v1 -> (1, int)
v2 -> (2, int)
v3 -> (3, int)

Heap table:
1 -> 20
2 -> 3
3 -> 4

Output:

File table:

------------------------
ID: 1
Execution stack:
fork(writeHeap(v3, readHeap(v3) * 10); print(readHeap(v3)); countDown( cnt ))
await(cnt); print(100); countDown( cnt ); print(100)

Symbol table:
cnt -> 1
v1 -> (1, int)
v2 -> (2, int)
v3 -> (3, int)

Heap table:
1 -> 20
2 -> 3
3 -> 4

Output:

File table:

------------------------
ID: 2
Execution stack:
print(readHeap(v1))
countDown( cnt )

Symbol table:
cnt -> 1
v1 -> (1, int)
v2 -> (2, int)
v3 -> (3, int)

Heap table:
1 -> 20
2 -> 3
3 -> 4

Output:

File table:

------------------------
ID: 3
Execution stack:
writeHeap(v2, readHeap(v2) * 10)
print(readHeap(v2)); countDown( cnt )

Symbol table:
cnt -> 1
v1 -> (1, int)
v2 -> (2, int)
v3 -> (3, int)

Heap table:
1 -> 20
2 -> 3
3 -> 4

Output:

File table:

------------------------
ID: 1
Execution stack:
fork(writeHeap(v3, readHeap(v3) * 10); print(readHeap(v3)); countDown( cnt ))
await(cnt); print(100); countDown( cnt ); print(100)

Symbol table:
cnt -> 1
v1 -> (1, int)
v2 -> (2, int)
v3 -> (3, int)

Heap table:
1 -> 20
2 -> 3
3 -> 4

Output:

File table:

------------------------
ID: 2
Execution stack:
print(readHeap(v1))
countDown( cnt )

Symbol table:
cnt -> 1
v1 -> (1, int)
v2 -> (2, int)
v3 -> (3, int)

Heap table:
1 -> 20
2 -> 3
3 -> 4

Output:

File table:

------------------------
ID: 3
Execution stack:
writeHeap(v2, readHeap(v2) * 10)
print(readHeap(v2)); countDown( cnt )

Symbol table:
cnt -> 1
v1 -> (1, int)
v2 -> (2, int)
v3 -> (3, int)

Heap table:
1 -> 20
2 -> 3
3 -> 4

Output:

File table:

------------------------
ID: 1
Execution stack:
await(cnt); print(100); countDown( cnt ); print(100)

Symbol table:
cnt -> 1
v1 -> (1, int)
v2 -> (2, int)
v3 -> (3, int)

Heap table:
1 -> 20
2 -> 30
3 -> 4

Output:
20

File table:

------------------------
ID: 2
Execution stack:
countDown( cnt )

Symbol table:
cnt -> 1
v1 -> (1, int)
v2 -> (2, int)
v3 -> (3, int)

Heap table:
1 -> 20
2 -> 30
3 -> 4

Output:
20

File table:

------------------------
ID: 3
Execution stack:
print(readHeap(v2)); countDown( cnt )

Symbol table:
cnt -> 1
v1 -> (1, int)
v2 -> (2, int)
v3 -> (3, int)

Heap table:
1 -> 20
2 -> 30
3 -> 4

Output:
20

File table:

------------------------
ID: 4
Execution stack:
writeHeap(v3, readHeap(v3) * 10); print(readHeap(v3)); countDown( cnt )

Symbol table:
cnt -> 1
v1 -> (1, int)
v2 -> (2, int)
v3 -> (3, int)

Heap table:
1 -> 20
2 -> 30
3 -> 4

Output:
20

File table:

------------------------
ID: 1
Execution stack:
await(cnt); print(100); countDown( cnt ); print(100)

Symbol table:
cnt -> 1
v1 -> (1, int)
v2 -> (2, int)
v3 -> (3, int)

Heap table:
1 -> 20
2 -> 30
3 -> 4

Output:
20

File table:

------------------------
ID: 2
Execution stack:
countDown( cnt )

Symbol table:
cnt -> 1
v1 -> (1, int)
v2 -> (2, int)
v3 -> (3, int)

Heap table:
1 -> 20
2 -> 30
3 -> 4

Output:
20

File table:

------------------------
ID: 3
Execution stack:
print(readHeap(v2)); countDown( cnt )

Symbol table:
cnt -> 1
v1 -> (1, int)
v2 -> (2, int)
v3 -> (3, int)

Heap table:
1 -> 20
2 -> 30
3 -> 4

Output:
20

File table:

------------------------
ID: 4
Execution stack:
writeHeap(v3, readHeap(v3) * 10); print(readHeap(v3)); countDown( cnt )

Symbol table:
cnt -> 1
v1 -> (1, int)
v2 -> (2, int)
v3 -> (3, int)

Heap table:
1 -> 20
2 -> 30
3 -> 4

Output:
20

File table:

------------------------
ID: 1
Execution stack:
await(cnt)
print(100); countDown( cnt ); print(100)

Symbol table:
cnt -> 1
v1 -> (1, int)
v2 -> (2, int)
v3 -> (3, int)

Heap table:
1 -> 20
2 -> 30
3 -> 4

Output:
20
2

File table:

------------------------
ID: 2
Execution stack:

Symbol table:
cnt -> 1
v1 -> (1, int)
v2 -> (2, int)
v3 -> (3, int)

Heap table:
1 -> 20
2 -> 30
3 -> 4

Output:
20
2

File table:

------------------------
ID: 3
Execution stack:
print(readHeap(v2))
countDown( cnt )

Symbol table:
cnt -> 1
v1 -> (1, int)
v2 -> (2, int)
v3 -> (3, int)

Heap table:
1 -> 20
2 -> 30
3 -> 4

Output:
20
2

File table:

------------------------
ID: 4
Execution stack:
writeHeap(v3, readHeap(v3) * 10)
print(readHeap(v3)); countDown( cnt )

Symbol table:
cnt -> 1
v1 -> (1, int)
v2 -> (2, int)
v3 -> (3, int)

Heap table:
1 -> 20
2 -> 30
3 -> 4

Output:
20
2

File table:

------------------------
ID: 1
Execution stack:
await(cnt)
print(100); countDown( cnt ); print(100)

Symbol table:
cnt -> 1
v1 -> (1, int)
v2 -> (2, int)
v3 -> (3, int)

Heap table:
1 -> 20
2 -> 30
3 -> 4

Output:
20
2

File table:

------------------------
ID: 3
Execution stack:
print(readHeap(v2))
countDown( cnt )

Symbol table:
cnt -> 1
v1 -> (1, int)
v2 -> (2, int)
v3 -> (3, int)

Heap table:
1 -> 20
2 -> 30
3 -> 4

Output:
20
2

File table:

------------------------
ID: 4
Execution stack:
writeHeap(v3, readHeap(v3) * 10)
print(readHeap(v3)); countDown( cnt )

Symbol table:
cnt -> 1
v1 -> (1, int)
v2 -> (2, int)
v3 -> (3, int)

Heap table:
1 -> 20
2 -> 30
3 -> 4

Output:
20
2

File table:

------------------------
ID: 1
Execution stack:
await(cnt)
print(100); countDown( cnt ); print(100)

Symbol table:
cnt -> 1
v1 -> (1, int)
v2 -> (2, int)
v3 -> (3, int)

Heap table:
1 -> 20
2 -> 30
3 -> 40

Output:
20
2
30

File table:

------------------------
ID: 3
Execution stack:
countDown( cnt )

Symbol table:
cnt -> 1
v1 -> (1, int)
v2 -> (2, int)
v3 -> (3, int)

Heap table:
1 -> 20
2 -> 30
3 -> 40

Output:
20
2
30

File table:

------------------------
ID: 4
Execution stack:
print(readHeap(v3)); countDown( cnt )

Symbol table:
cnt -> 1
v1 -> (1, int)
v2 -> (2, int)
v3 -> (3, int)

Heap table:
1 -> 20
2 -> 30
3 -> 40

Output:
20
2
30

File table:

------------------------
ID: 1
Execution stack:
await(cnt)
print(100); countDown( cnt ); print(100)

Symbol table:
cnt -> 1
v1 -> (1, int)
v2 -> (2, int)
v3 -> (3, int)

Heap table:
1 -> 20
2 -> 30
3 -> 40

Output:
20
2
30

File table:

------------------------
ID: 3
Execution stack:
countDown( cnt )

Symbol table:
cnt -> 1
v1 -> (1, int)
v2 -> (2, int)
v3 -> (3, int)

Heap table:
1 -> 20
2 -> 30
3 -> 40

Output:
20
2
30

File table:

------------------------
ID: 4
Execution stack:
print(readHeap(v3)); countDown( cnt )

Symbol table:
cnt -> 1
v1 -> (1, int)
v2 -> (2, int)
v3 -> (3, int)

Heap table:
1 -> 20
2 -> 30
3 -> 40

Output:
20
2
30

File table:

------------------------
ID: 1
Execution stack:
await(cnt)
print(100); countDown( cnt ); print(100)

Symbol table:
cnt -> 1
v1 -> (1, int)
v2 -> (2, int)
v3 -> (3, int)

Heap table:
1 -> 20
2 -> 30
3 -> 40

Output:
20
2
30
3

File table:

------------------------
ID: 3
Execution stack:

Symbol table:
cnt -> 1
v1 -> (1, int)
v2 -> (2, int)
v3 -> (3, int)

Heap table:
1 -> 20
2 -> 30
3 -> 40

Output:
20
2
30
3

File table:

------------------------
ID: 4
Execution stack:
print(readHeap(v3))
countDown( cnt )

Symbol table:
cnt -> 1
v1 -> (1, int)
v2 -> (2, int)
v3 -> (3, int)

Heap table:
1 -> 20
2 -> 30
3 -> 40

Output:
20
2
30
3

File table:

------------------------
ID: 1
Execution stack:
await(cnt)
print(100); countDown( cnt ); print(100)

Symbol table:
cnt -> 1
v1 -> (1, int)
v2 -> (2, int)
v3 -> (3, int)

Heap table:
1 -> 20
2 -> 30
3 -> 40

Output:
20
2
30
3

File table:

------------------------
ID: 4
Execution stack:
print(readHeap(v3))
countDown( cnt )

Symbol table:
cnt -> 1
v1 -> (1, int)
v2 -> (2, int)
v3 -> (3, int)

Heap table:
1 -> 20
2 -> 30
3 -> 40

Output:
20
2
30
3

File table:

------------------------
ID: 1
Execution stack:
await(cnt)
print(100); countDown( cnt ); print(100)

Symbol table:
cnt -> 1
v1 -> (1, int)
v2 -> (2, int)
v3 -> (3, int)

Heap table:
1 -> 20
2 -> 30
3 -> 40

Output:
20
2
30
3
40

File table:

------------------------
ID: 4
Execution stack:
countDown( cnt )

Symbol table:
cnt -> 1
v1 -> (1, int)
v2 -> (2, int)
v3 -> (3, int)

Heap table:
1 -> 20
2 -> 30
3 -> 40

Output:
20
2
30
3
40

File table:

------------------------
ID: 1
Execution stack:
await(cnt)
print(100); countDown( cnt ); print(100)

Symbol table:
cnt -> 1
v1 -> (1, int)
v2 -> (2, int)
v3 -> (3, int)

Heap table:
1 -> 20
2 -> 30
3 -> 40

Output:
20
2
30
3
40

File table:

------------------------
ID: 4
Execution stack:
countDown( cnt )

Symbol table:
cnt -> 1
v1 -> (1, int)
v2 -> (2, int)
v3 -> (3, int)

Heap table:
1 -> 20
2 -> 30
3 -> 40

Output:
20
2
30
3
40

File table:

------------------------
ID: 1
Execution stack:
await(cnt)
print(100); countDown( cnt ); print(100)

Symbol table:
cnt -> 1
v1 -> (1, int)
v2 -> (2, int)
v3 -> (3, int)

Heap table:
1 -> 20
2 -> 30
3 -> 40

Output:
20
2
30
3
40
4

File table:

------------------------
ID: 4
Execution stack:

Symbol table:
cnt -> 1
v1 -> (1, int)
v2 -> (2, int)
v3 -> (3, int)

Heap table:
1 -> 20
2 -> 30
3 -> 40

Output:
20
2
30
3
40
4

File table:

------------------------
ID: 1
Execution stack:
await(cnt)
print(100); countDown( cnt ); print(100)

Symbol table:
cnt -> 1
v1 -> (1, int)
v2 -> (2, int)
v3 -> (3, int)

Heap table:
1 -> 20
2 -> 30
3 -> 40

Output:
20
2
30
3
40
4

File table:

------------------------
ID: 1
Execution stack:
print(100); countDown( cnt ); print(100)

Symbol table:
cnt -> 1
v1 -> (1, int)
v2 -> (2, int)
v3 -> (3, int)

Heap table:
1 -> 20
2 -> 30
3 -> 40

Output:
20
2
30
3
40
4

File table:

------------------------
ID: 1
Execution stack:
print(100); countDown( cnt ); print(100)

Symbol table:
cnt -> 1
v1 -> (1, int)
v2 -> (2, int)
v3 -> (3, int)

Heap table:
1 -> 20
2 -> 30
3 -> 40

Output:
20
2
30
3
40
4

File table:

------------------------
ID: 1
Execution stack:
print(100)
countDown( cnt ); print(100)

Symbol table:
cnt -> 1
v1 -> (1, int)
v2 -> (2, int)
v3 -> (3, int)

Heap table:
1 -> 20
2 -> 30
3 -> 40

Output:
20
2
30
3
40
4

File table:

------------------------
ID: 1
Execution stack:
print(100)
countDown( cnt ); print(100)

Symbol table:
cnt -> 1
v1 -> (1, int)
v2 -> (2, int)
v3 -> (3, int)

Heap table:
1 -> 20
2 -> 30
3 -> 40

Output:
20
2
30
3
40
4

File table:

------------------------
ID: 1
Execution stack:
countDown( cnt ); print(100)

Symbol table:
cnt -> 1
v1 -> (1, int)
v2 -> (2, int)
v3 -> (3, int)

Heap table:
1 -> 20
2 -> 30
3 -> 40

Output:
20
2
30
3
40
4
100

File table:

------------------------
ID: 1
Execution stack:
countDown( cnt ); print(100)

Symbol table:
cnt -> 1
v1 -> (1, int)
v2 -> (2, int)
v3 -> (3, int)

Heap table:
1 -> 20
2 -> 30
3 -> 40

Output:
20
2
30
3
40
4
100

File table:

------------------------
ID: 1
Execution stack:
countDown( cnt )
print(100)

Symbol table:
cnt -> 1
v1 -> (1, int)
v2 -> (2, int)
v3 -> (3, int)

Heap table:
1 -> 20
2 -> 30
3 -> 40

Output:
20
2
30
3
40
4
100

File table:

------------------------
ID: 1
Execution stack:
countDown( cnt )
print(100)

Symbol table:
cnt -> 1
v1 -> (1, int)
v2 -> (2, int)
v3 -> (3, int)

Heap table:
1 -> 20
2 -> 30
3 -> 40

Output:
20
2
30
3
40
4
100

File table:

------------------------
ID: 1
Execution stack:
print(100)

Symbol table:
cnt -> 1
v1 -> (1, int)
v2 -> (2, int)
v3 -> (3, int)

Heap table:
1 -> 20
2 -> 30
3 -> 40

Output:
20
2
30
3
40
4
100
1

File table:

------------------------
ID: 1
Execution stack:
print(100)

Symbol table:
cnt -> 1
v1 -> (1, int)
v2 -> (2, int)
v3 -> (3, int)

Heap table:
1 -> 20
2 -> 30
3 -> 40

Output:
20
2
30
3
40
4
100
1

File table:

------------------------
ID: 1
Execution stack:

Symbol table:
cnt -> 1
v1 -> (1, int)
v2 -> (2, int)
v3 -> (3, int)

Heap table:
1 -> 20
2 -> 30
3 -> 40

Output:
20
2
30
3
40
4
100
1
100

File table:

------------------------
