ID: 1
Execution stack:
Ref(int) v; new(v, 20); Ref(Ref(int)) a; new(a, v); print(v); print(a)

Symbol table:

Heap table:

Output:

File table:

------------------------
ID: 1
Execution stack:
Ref(int) v
new(v, 20); Ref(Ref(int)) a; new(a, v); print(v); print(a)

Symbol table:

Heap table:

Output:

File table:

------------------------
ID: 1
Execution stack:
Ref(int) v
new(v, 20); Ref(Ref(int)) a; new(a, v); print(v); print(a)

Symbol table:

Heap table:

Output:

File table:

------------------------
ID: 1
Execution stack:
new(v, 20); Ref(Ref(int)) a; new(a, v); print(v); print(a)

Symbol table:
v -> (1, int)

Heap table:

Output:

File table:

------------------------
ID: 1
Execution stack:
new(v, 20); Ref(Ref(int)) a; new(a, v); print(v); print(a)

Symbol table:
v -> (1, int)

Heap table:

Output:

File table:

------------------------
ID: 1
Execution stack:
new(v, 20)
Ref(Ref(int)) a; new(a, v); print(v); print(a)

Symbol table:
v -> (1, int)

Heap table:

Output:

File table:

------------------------
ID: 1
Execution stack:
new(v, 20)
Ref(Ref(int)) a; new(a, v); print(v); print(a)

Symbol table:
v -> (1, int)

Heap table:

Output:

File table:

------------------------
ID: 1
Execution stack:
Ref(Ref(int)) a; new(a, v); print(v); print(a)

Symbol table:
v -> (1, int)

Heap table:
1 -> 20

Output:

File table:

------------------------
ID: 1
Execution stack:
Ref(Ref(int)) a; new(a, v); print(v); print(a)

Symbol table:
v -> (1, int)

Heap table:
1 -> 20

Output:

File table:

------------------------
ID: 1
Execution stack:
Ref(Ref(int)) a
new(a, v); print(v); print(a)

Symbol table:
v -> (1, int)

Heap table:
1 -> 20

Output:

File table:

------------------------
ID: 1
Execution stack:
Ref(Ref(int)) a
new(a, v); print(v); print(a)

Symbol table:
v -> (1, int)

Heap table:
1 -> 20

Output:

File table:

------------------------
ID: 1
Execution stack:
new(a, v); print(v); print(a)

Symbol table:
a -> (1, Ref(int))
v -> (1, int)

Heap table:
1 -> 20

Output:

File table:

------------------------
ID: 1
Execution stack:
new(a, v); print(v); print(a)

Symbol table:
a -> (1, Ref(int))
v -> (1, int)

Heap table:
1 -> 20

Output:

File table:

------------------------
ID: 1
Execution stack:
new(a, v)
print(v); print(a)

Symbol table:
a -> (1, Ref(int))
v -> (1, int)

Heap table:
1 -> 20

Output:

File table:

------------------------
ID: 1
Execution stack:
new(a, v)
print(v); print(a)

Symbol table:
a -> (1, Ref(int))
v -> (1, int)

Heap table:
1 -> 20

Output:

File table:

------------------------
ID: 1
Execution stack:
print(v); print(a)

Symbol table:
a -> (2, Ref(int))
v -> (1, int)

Heap table:
1 -> 20
2 -> (1, int)

Output:

File table:

------------------------
ID: 1
Execution stack:
print(v); print(a)

Symbol table:
a -> (2, Ref(int))
v -> (1, int)

Heap table:
1 -> 20
2 -> (1, int)

Output:

File table:

------------------------
ID: 1
Execution stack:
print(v)
print(a)

Symbol table:
a -> (2, Ref(int))
v -> (1, int)

Heap table:
1 -> 20
2 -> (1, int)

Output:

File table:

------------------------
ID: 1
Execution stack:
print(v)
print(a)

Symbol table:
a -> (2, Ref(int))
v -> (1, int)

Heap table:
1 -> 20
2 -> (1, int)

Output:

File table:

------------------------
ID: 1
Execution stack:
print(a)

Symbol table:
a -> (2, Ref(int))
v -> (1, int)

Heap table:
1 -> 20
2 -> (1, int)

Output:
(1, int)

File table:

------------------------
ID: 1
Execution stack:
print(a)

Symbol table:
a -> (2, Ref(int))
v -> (1, int)

Heap table:
1 -> 20
2 -> (1, int)

Output:
(1, int)

File table:

------------------------
ID: 1
Execution stack:

Symbol table:
a -> (2, Ref(int))
v -> (1, int)

Heap table:
1 -> 20
2 -> (1, int)

Output:
(1, int)
(2, Ref(int))

File table:

------------------------
