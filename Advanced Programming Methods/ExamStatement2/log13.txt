ID: 1
Execution stack:
Ref(int) v1; int cnt; new(v1, 1); newSemaphore( cnt, readHeap(v1)); fork(acquire( cnt ); writeHeap(v1, readHeap(v1) * 10); print(readHeap(v1)); release( cnt )); fork(acquire( cnt ); writeHeap(v1, readHeap(v1) * 10); writeHeap(v1, readHeap(v1) * 2); print(readHeap(v1)); release( cnt )); acquire( cnt ); print(readHeap(v1) - 1); release( cnt )

Symbol table:

Heap table:

Output:

File table:

------------------------
ID: 1
Execution stack:
Ref(int) v1
int cnt; new(v1, 1); newSemaphore( cnt, readHeap(v1)); fork(acquire( cnt ); writeHeap(v1, readHeap(v1) * 10); print(readHeap(v1)); release( cnt )); fork(acquire( cnt ); writeHeap(v1, readHeap(v1) * 10); writeHeap(v1, readHeap(v1) * 2); print(readHeap(v1)); release( cnt )); acquire( cnt ); print(readHeap(v1) - 1); release( cnt )

Symbol table:

Heap table:

Output:

File table:

------------------------
ID: 1
Execution stack:
Ref(int) v1
int cnt; new(v1, 1); newSemaphore( cnt, readHeap(v1)); fork(acquire( cnt ); writeHeap(v1, readHeap(v1) * 10); print(readHeap(v1)); release( cnt )); fork(acquire( cnt ); writeHeap(v1, readHeap(v1) * 10); writeHeap(v1, readHeap(v1) * 2); print(readHeap(v1)); release( cnt )); acquire( cnt ); print(readHeap(v1) - 1); release( cnt )

Symbol table:

Heap table:

Output:

File table:

------------------------
ID: 1
Execution stack:
int cnt; new(v1, 1); newSemaphore( cnt, readHeap(v1)); fork(acquire( cnt ); writeHeap(v1, readHeap(v1) * 10); print(readHeap(v1)); release( cnt )); fork(acquire( cnt ); writeHeap(v1, readHeap(v1) * 10); writeHeap(v1, readHeap(v1) * 2); print(readHeap(v1)); release( cnt )); acquire( cnt ); print(readHeap(v1) - 1); release( cnt )

Symbol table:
v1 -> (1, int)

Heap table:

Output:

File table:

------------------------
ID: 1
Execution stack:
int cnt; new(v1, 1); newSemaphore( cnt, readHeap(v1)); fork(acquire( cnt ); writeHeap(v1, readHeap(v1) * 10); print(readHeap(v1)); release( cnt )); fork(acquire( cnt ); writeHeap(v1, readHeap(v1) * 10); writeHeap(v1, readHeap(v1) * 2); print(readHeap(v1)); release( cnt )); acquire( cnt ); print(readHeap(v1) - 1); release( cnt )

Symbol table:
v1 -> (1, int)

Heap table:

Output:

File table:

------------------------
ID: 1
Execution stack:
int cnt
new(v1, 1); newSemaphore( cnt, readHeap(v1)); fork(acquire( cnt ); writeHeap(v1, readHeap(v1) * 10); print(readHeap(v1)); release( cnt )); fork(acquire( cnt ); writeHeap(v1, readHeap(v1) * 10); writeHeap(v1, readHeap(v1) * 2); print(readHeap(v1)); release( cnt )); acquire( cnt ); print(readHeap(v1) - 1); release( cnt )

Symbol table:
v1 -> (1, int)

Heap table:

Output:

File table:

------------------------
ID: 1
Execution stack:
int cnt
new(v1, 1); newSemaphore( cnt, readHeap(v1)); fork(acquire( cnt ); writeHeap(v1, readHeap(v1) * 10); print(readHeap(v1)); release( cnt )); fork(acquire( cnt ); writeHeap(v1, readHeap(v1) * 10); writeHeap(v1, readHeap(v1) * 2); print(readHeap(v1)); release( cnt )); acquire( cnt ); print(readHeap(v1) - 1); release( cnt )

Symbol table:
v1 -> (1, int)

Heap table:

Output:

File table:

------------------------
ID: 1
Execution stack:
new(v1, 1); newSemaphore( cnt, readHeap(v1)); fork(acquire( cnt ); writeHeap(v1, readHeap(v1) * 10); print(readHeap(v1)); release( cnt )); fork(acquire( cnt ); writeHeap(v1, readHeap(v1) * 10); writeHeap(v1, readHeap(v1) * 2); print(readHeap(v1)); release( cnt )); acquire( cnt ); print(readHeap(v1) - 1); release( cnt )

Symbol table:
cnt -> 0
v1 -> (1, int)

Heap table:

Output:

File table:

------------------------
ID: 1
Execution stack:
new(v1, 1); newSemaphore( cnt, readHeap(v1)); fork(acquire( cnt ); writeHeap(v1, readHeap(v1) * 10); print(readHeap(v1)); release( cnt )); fork(acquire( cnt ); writeHeap(v1, readHeap(v1) * 10); writeHeap(v1, readHeap(v1) * 2); print(readHeap(v1)); release( cnt )); acquire( cnt ); print(readHeap(v1) - 1); release( cnt )

Symbol table:
cnt -> 0
v1 -> (1, int)

Heap table:

Output:

File table:

------------------------
ID: 1
Execution stack:
new(v1, 1)
newSemaphore( cnt, readHeap(v1)); fork(acquire( cnt ); writeHeap(v1, readHeap(v1) * 10); print(readHeap(v1)); release( cnt )); fork(acquire( cnt ); writeHeap(v1, readHeap(v1) * 10); writeHeap(v1, readHeap(v1) * 2); print(readHeap(v1)); release( cnt )); acquire( cnt ); print(readHeap(v1) - 1); release( cnt )

Symbol table:
cnt -> 0
v1 -> (1, int)

Heap table:

Output:

File table:

------------------------
ID: 1
Execution stack:
new(v1, 1)
newSemaphore( cnt, readHeap(v1)); fork(acquire( cnt ); writeHeap(v1, readHeap(v1) * 10); print(readHeap(v1)); release( cnt )); fork(acquire( cnt ); writeHeap(v1, readHeap(v1) * 10); writeHeap(v1, readHeap(v1) * 2); print(readHeap(v1)); release( cnt )); acquire( cnt ); print(readHeap(v1) - 1); release( cnt )

Symbol table:
cnt -> 0
v1 -> (1, int)

Heap table:

Output:

File table:

------------------------
ID: 1
Execution stack:
newSemaphore( cnt, readHeap(v1)); fork(acquire( cnt ); writeHeap(v1, readHeap(v1) * 10); print(readHeap(v1)); release( cnt )); fork(acquire( cnt ); writeHeap(v1, readHeap(v1) * 10); writeHeap(v1, readHeap(v1) * 2); print(readHeap(v1)); release( cnt )); acquire( cnt ); print(readHeap(v1) - 1); release( cnt )

Symbol table:
cnt -> 0
v1 -> (1, int)

Heap table:
1 -> 1

Output:

File table:

------------------------
ID: 1
Execution stack:
newSemaphore( cnt, readHeap(v1)); fork(acquire( cnt ); writeHeap(v1, readHeap(v1) * 10); print(readHeap(v1)); release( cnt )); fork(acquire( cnt ); writeHeap(v1, readHeap(v1) * 10); writeHeap(v1, readHeap(v1) * 2); print(readHeap(v1)); release( cnt )); acquire( cnt ); print(readHeap(v1) - 1); release( cnt )

Symbol table:
cnt -> 0
v1 -> (1, int)

Heap table:
1 -> 1

Output:

File table:

------------------------
ID: 1
Execution stack:
newSemaphore( cnt, readHeap(v1))
fork(acquire( cnt ); writeHeap(v1, readHeap(v1) * 10); print(readHeap(v1)); release( cnt )); fork(acquire( cnt ); writeHeap(v1, readHeap(v1) * 10); writeHeap(v1, readHeap(v1) * 2); print(readHeap(v1)); release( cnt )); acquire( cnt ); print(readHeap(v1) - 1); release( cnt )

Symbol table:
cnt -> 0
v1 -> (1, int)

Heap table:
1 -> 1

Output:

File table:

------------------------
ID: 1
Execution stack:
newSemaphore( cnt, readHeap(v1))
fork(acquire( cnt ); writeHeap(v1, readHeap(v1) * 10); print(readHeap(v1)); release( cnt )); fork(acquire( cnt ); writeHeap(v1, readHeap(v1) * 10); writeHeap(v1, readHeap(v1) * 2); print(readHeap(v1)); release( cnt )); acquire( cnt ); print(readHeap(v1) - 1); release( cnt )

Symbol table:
cnt -> 0
v1 -> (1, int)

Heap table:
1 -> 1

Output:

File table:

------------------------
ID: 1
Execution stack:
fork(acquire( cnt ); writeHeap(v1, readHeap(v1) * 10); print(readHeap(v1)); release( cnt )); fork(acquire( cnt ); writeHeap(v1, readHeap(v1) * 10); writeHeap(v1, readHeap(v1) * 2); print(readHeap(v1)); release( cnt )); acquire( cnt ); print(readHeap(v1) - 1); release( cnt )

Symbol table:
cnt -> 1
v1 -> (1, int)

Heap table:
1 -> 1

Output:

File table:

------------------------
ID: 1
Execution stack:
fork(acquire( cnt ); writeHeap(v1, readHeap(v1) * 10); print(readHeap(v1)); release( cnt )); fork(acquire( cnt ); writeHeap(v1, readHeap(v1) * 10); writeHeap(v1, readHeap(v1) * 2); print(readHeap(v1)); release( cnt )); acquire( cnt ); print(readHeap(v1) - 1); release( cnt )

Symbol table:
cnt -> 1
v1 -> (1, int)

Heap table:
1 -> 1

Output:

File table:

------------------------
ID: 1
Execution stack:
fork(acquire( cnt ); writeHeap(v1, readHeap(v1) * 10); print(readHeap(v1)); release( cnt ))
fork(acquire( cnt ); writeHeap(v1, readHeap(v1) * 10); writeHeap(v1, readHeap(v1) * 2); print(readHeap(v1)); release( cnt )); acquire( cnt ); print(readHeap(v1) - 1); release( cnt )

Symbol table:
cnt -> 1
v1 -> (1, int)

Heap table:
1 -> 1

Output:

File table:

------------------------
ID: 1
Execution stack:
fork(acquire( cnt ); writeHeap(v1, readHeap(v1) * 10); print(readHeap(v1)); release( cnt ))
fork(acquire( cnt ); writeHeap(v1, readHeap(v1) * 10); writeHeap(v1, readHeap(v1) * 2); print(readHeap(v1)); release( cnt )); acquire( cnt ); print(readHeap(v1) - 1); release( cnt )

Symbol table:
cnt -> 1
v1 -> (1, int)

Heap table:
1 -> 1

Output:

File table:

------------------------
ID: 1
Execution stack:
fork(acquire( cnt ); writeHeap(v1, readHeap(v1) * 10); writeHeap(v1, readHeap(v1) * 2); print(readHeap(v1)); release( cnt )); acquire( cnt ); print(readHeap(v1) - 1); release( cnt )

Symbol table:
cnt -> 1
v1 -> (1, int)

Heap table:
1 -> 1

Output:

File table:

------------------------
ID: 2
Execution stack:
acquire( cnt ); writeHeap(v1, readHeap(v1) * 10); print(readHeap(v1)); release( cnt )

Symbol table:
cnt -> 1
v1 -> (1, int)

Heap table:
1 -> 1

Output:

File table:

------------------------
ID: 1
Execution stack:
fork(acquire( cnt ); writeHeap(v1, readHeap(v1) * 10); writeHeap(v1, readHeap(v1) * 2); print(readHeap(v1)); release( cnt )); acquire( cnt ); print(readHeap(v1) - 1); release( cnt )

Symbol table:
cnt -> 1
v1 -> (1, int)

Heap table:
1 -> 1

Output:

File table:

------------------------
ID: 2
Execution stack:
acquire( cnt ); writeHeap(v1, readHeap(v1) * 10); print(readHeap(v1)); release( cnt )

Symbol table:
cnt -> 1
v1 -> (1, int)

Heap table:
1 -> 1

Output:

File table:

------------------------
ID: 1
Execution stack:
fork(acquire( cnt ); writeHeap(v1, readHeap(v1) * 10); writeHeap(v1, readHeap(v1) * 2); print(readHeap(v1)); release( cnt ))
acquire( cnt ); print(readHeap(v1) - 1); release( cnt )

Symbol table:
cnt -> 1
v1 -> (1, int)

Heap table:
1 -> 1

Output:

File table:

------------------------
ID: 2
Execution stack:
acquire( cnt )
writeHeap(v1, readHeap(v1) * 10); print(readHeap(v1)); release( cnt )

Symbol table:
cnt -> 1
v1 -> (1, int)

Heap table:
1 -> 1

Output:

File table:

------------------------
ID: 1
Execution stack:
fork(acquire( cnt ); writeHeap(v1, readHeap(v1) * 10); writeHeap(v1, readHeap(v1) * 2); print(readHeap(v1)); release( cnt ))
acquire( cnt ); print(readHeap(v1) - 1); release( cnt )

Symbol table:
cnt -> 1
v1 -> (1, int)

Heap table:
1 -> 1

Output:

File table:

------------------------
ID: 2
Execution stack:
acquire( cnt )
writeHeap(v1, readHeap(v1) * 10); print(readHeap(v1)); release( cnt )

Symbol table:
cnt -> 1
v1 -> (1, int)

Heap table:
1 -> 1

Output:

File table:

------------------------
ID: 1
Execution stack:
acquire( cnt ); print(readHeap(v1) - 1); release( cnt )

Symbol table:
cnt -> 1
v1 -> (1, int)

Heap table:
1 -> 1

Output:

File table:

------------------------
ID: 2
Execution stack:
writeHeap(v1, readHeap(v1) * 10); print(readHeap(v1)); release( cnt )

Symbol table:
cnt -> 1
v1 -> (1, int)

Heap table:
1 -> 1

Output:

File table:

------------------------
ID: 3
Execution stack:
acquire( cnt ); writeHeap(v1, readHeap(v1) * 10); writeHeap(v1, readHeap(v1) * 2); print(readHeap(v1)); release( cnt )

Symbol table:
cnt -> 1
v1 -> (1, int)

Heap table:
1 -> 1

Output:

File table:

------------------------
ID: 1
Execution stack:
acquire( cnt ); print(readHeap(v1) - 1); release( cnt )

Symbol table:
cnt -> 1
v1 -> (1, int)

Heap table:
1 -> 1

Output:

File table:

------------------------
ID: 2
Execution stack:
writeHeap(v1, readHeap(v1) * 10); print(readHeap(v1)); release( cnt )

Symbol table:
cnt -> 1
v1 -> (1, int)

Heap table:
1 -> 1

Output:

File table:

------------------------
ID: 3
Execution stack:
acquire( cnt ); writeHeap(v1, readHeap(v1) * 10); writeHeap(v1, readHeap(v1) * 2); print(readHeap(v1)); release( cnt )

Symbol table:
cnt -> 1
v1 -> (1, int)

Heap table:
1 -> 1

Output:

File table:

------------------------
ID: 1
Execution stack:
acquire( cnt )
print(readHeap(v1) - 1); release( cnt )

Symbol table:
cnt -> 1
v1 -> (1, int)

Heap table:
1 -> 1

Output:

File table:

------------------------
ID: 2
Execution stack:
writeHeap(v1, readHeap(v1) * 10)
print(readHeap(v1)); release( cnt )

Symbol table:
cnt -> 1
v1 -> (1, int)

Heap table:
1 -> 1

Output:

File table:

------------------------
ID: 3
Execution stack:
acquire( cnt )
writeHeap(v1, readHeap(v1) * 10); writeHeap(v1, readHeap(v1) * 2); print(readHeap(v1)); release( cnt )

Symbol table:
cnt -> 1
v1 -> (1, int)

Heap table:
1 -> 1

Output:

File table:

------------------------
ID: 1
Execution stack:
acquire( cnt )
print(readHeap(v1) - 1); release( cnt )

Symbol table:
cnt -> 1
v1 -> (1, int)

Heap table:
1 -> 1

Output:

File table:

------------------------
ID: 2
Execution stack:
writeHeap(v1, readHeap(v1) * 10)
print(readHeap(v1)); release( cnt )

Symbol table:
cnt -> 1
v1 -> (1, int)

Heap table:
1 -> 1

Output:

File table:

------------------------
ID: 3
Execution stack:
acquire( cnt )
writeHeap(v1, readHeap(v1) * 10); writeHeap(v1, readHeap(v1) * 2); print(readHeap(v1)); release( cnt )

Symbol table:
cnt -> 1
v1 -> (1, int)

Heap table:
1 -> 1

Output:

File table:

------------------------
ID: 1
Execution stack:
acquire( cnt )
print(readHeap(v1) - 1); release( cnt )

Symbol table:
cnt -> 1
v1 -> (1, int)

Heap table:
1 -> 10

Output:

File table:

------------------------
ID: 2
Execution stack:
print(readHeap(v1)); release( cnt )

Symbol table:
cnt -> 1
v1 -> (1, int)

Heap table:
1 -> 10

Output:

File table:

------------------------
ID: 3
Execution stack:
acquire( cnt )
writeHeap(v1, readHeap(v1) * 10); writeHeap(v1, readHeap(v1) * 2); print(readHeap(v1)); release( cnt )

Symbol table:
cnt -> 1
v1 -> (1, int)

Heap table:
1 -> 10

Output:

File table:

------------------------
ID: 1
Execution stack:
acquire( cnt )
print(readHeap(v1) - 1); release( cnt )

Symbol table:
cnt -> 1
v1 -> (1, int)

Heap table:
1 -> 10

Output:

File table:

------------------------
ID: 2
Execution stack:
print(readHeap(v1)); release( cnt )

Symbol table:
cnt -> 1
v1 -> (1, int)

Heap table:
1 -> 10

Output:

File table:

------------------------
ID: 3
Execution stack:
acquire( cnt )
writeHeap(v1, readHeap(v1) * 10); writeHeap(v1, readHeap(v1) * 2); print(readHeap(v1)); release( cnt )

Symbol table:
cnt -> 1
v1 -> (1, int)

Heap table:
1 -> 10

Output:

File table:

------------------------
ID: 1
Execution stack:
acquire( cnt )
print(readHeap(v1) - 1); release( cnt )

Symbol table:
cnt -> 1
v1 -> (1, int)

Heap table:
1 -> 10

Output:

File table:

------------------------
ID: 2
Execution stack:
print(readHeap(v1))
release( cnt )

Symbol table:
cnt -> 1
v1 -> (1, int)

Heap table:
1 -> 10

Output:

File table:

------------------------
ID: 3
Execution stack:
acquire( cnt )
writeHeap(v1, readHeap(v1) * 10); writeHeap(v1, readHeap(v1) * 2); print(readHeap(v1)); release( cnt )

Symbol table:
cnt -> 1
v1 -> (1, int)

Heap table:
1 -> 10

Output:

File table:

------------------------
ID: 1
Execution stack:
acquire( cnt )
print(readHeap(v1) - 1); release( cnt )

Symbol table:
cnt -> 1
v1 -> (1, int)

Heap table:
1 -> 10

Output:

File table:

------------------------
ID: 2
Execution stack:
print(readHeap(v1))
release( cnt )

Symbol table:
cnt -> 1
v1 -> (1, int)

Heap table:
1 -> 10

Output:

File table:

------------------------
ID: 3
Execution stack:
acquire( cnt )
writeHeap(v1, readHeap(v1) * 10); writeHeap(v1, readHeap(v1) * 2); print(readHeap(v1)); release( cnt )

Symbol table:
cnt -> 1
v1 -> (1, int)

Heap table:
1 -> 10

Output:

File table:

------------------------
ID: 1
Execution stack:
acquire( cnt )
print(readHeap(v1) - 1); release( cnt )

Symbol table:
cnt -> 1
v1 -> (1, int)

Heap table:
1 -> 10

Output:
10

File table:

------------------------
ID: 2
Execution stack:
release( cnt )

Symbol table:
cnt -> 1
v1 -> (1, int)

Heap table:
1 -> 10

Output:
10

File table:

------------------------
ID: 3
Execution stack:
acquire( cnt )
writeHeap(v1, readHeap(v1) * 10); writeHeap(v1, readHeap(v1) * 2); print(readHeap(v1)); release( cnt )

Symbol table:
cnt -> 1
v1 -> (1, int)

Heap table:
1 -> 10

Output:
10

File table:

------------------------
ID: 1
Execution stack:
acquire( cnt )
print(readHeap(v1) - 1); release( cnt )

Symbol table:
cnt -> 1
v1 -> (1, int)

Heap table:
1 -> 10

Output:
10

File table:

------------------------
ID: 2
Execution stack:
release( cnt )

Symbol table:
cnt -> 1
v1 -> (1, int)

Heap table:
1 -> 10

Output:
10

File table:

------------------------
ID: 3
Execution stack:
acquire( cnt )
writeHeap(v1, readHeap(v1) * 10); writeHeap(v1, readHeap(v1) * 2); print(readHeap(v1)); release( cnt )

Symbol table:
cnt -> 1
v1 -> (1, int)

Heap table:
1 -> 10

Output:
10

File table:

------------------------
ID: 1
Execution stack:
acquire( cnt )
print(readHeap(v1) - 1); release( cnt )

Symbol table:
cnt -> 1
v1 -> (1, int)

Heap table:
1 -> 10

Output:
10

File table:

------------------------
ID: 2
Execution stack:

Symbol table:
cnt -> 1
v1 -> (1, int)

Heap table:
1 -> 10

Output:
10

File table:

------------------------
ID: 3
Execution stack:
acquire( cnt )
writeHeap(v1, readHeap(v1) * 10); writeHeap(v1, readHeap(v1) * 2); print(readHeap(v1)); release( cnt )

Symbol table:
cnt -> 1
v1 -> (1, int)

Heap table:
1 -> 10

Output:
10

File table:

------------------------
ID: 1
Execution stack:
acquire( cnt )
print(readHeap(v1) - 1); release( cnt )

Symbol table:
cnt -> 1
v1 -> (1, int)

Heap table:
1 -> 10

Output:
10

File table:

------------------------
ID: 3
Execution stack:
acquire( cnt )
writeHeap(v1, readHeap(v1) * 10); writeHeap(v1, readHeap(v1) * 2); print(readHeap(v1)); release( cnt )

Symbol table:
cnt -> 1
v1 -> (1, int)

Heap table:
1 -> 10

Output:
10

File table:

------------------------
ID: 1
Execution stack:
print(readHeap(v1) - 1); release( cnt )

Symbol table:
cnt -> 1
v1 -> (1, int)

Heap table:
1 -> 10

Output:
10

File table:

------------------------
ID: 3
Execution stack:
acquire( cnt )
writeHeap(v1, readHeap(v1) * 10); writeHeap(v1, readHeap(v1) * 2); print(readHeap(v1)); release( cnt )

Symbol table:
cnt -> 1
v1 -> (1, int)

Heap table:
1 -> 10

Output:
10

File table:

------------------------
ID: 1
Execution stack:
print(readHeap(v1) - 1); release( cnt )

Symbol table:
cnt -> 1
v1 -> (1, int)

Heap table:
1 -> 10

Output:
10

File table:

------------------------
ID: 3
Execution stack:
acquire( cnt )
writeHeap(v1, readHeap(v1) * 10); writeHeap(v1, readHeap(v1) * 2); print(readHeap(v1)); release( cnt )

Symbol table:
cnt -> 1
v1 -> (1, int)

Heap table:
1 -> 10

Output:
10

File table:

------------------------
ID: 1
Execution stack:
print(readHeap(v1) - 1)
release( cnt )

Symbol table:
cnt -> 1
v1 -> (1, int)

Heap table:
1 -> 10

Output:
10

File table:

------------------------
ID: 3
Execution stack:
acquire( cnt )
writeHeap(v1, readHeap(v1) * 10); writeHeap(v1, readHeap(v1) * 2); print(readHeap(v1)); release( cnt )

Symbol table:
cnt -> 1
v1 -> (1, int)

Heap table:
1 -> 10

Output:
10

File table:

------------------------
ID: 1
Execution stack:
print(readHeap(v1) - 1)
release( cnt )

Symbol table:
cnt -> 1
v1 -> (1, int)

Heap table:
1 -> 10

Output:
10

File table:

------------------------
ID: 3
Execution stack:
acquire( cnt )
writeHeap(v1, readHeap(v1) * 10); writeHeap(v1, readHeap(v1) * 2); print(readHeap(v1)); release( cnt )

Symbol table:
cnt -> 1
v1 -> (1, int)

Heap table:
1 -> 10

Output:
10

File table:

------------------------
ID: 1
Execution stack:
release( cnt )

Symbol table:
cnt -> 1
v1 -> (1, int)

Heap table:
1 -> 10

Output:
10
9

File table:

------------------------
ID: 3
Execution stack:
acquire( cnt )
writeHeap(v1, readHeap(v1) * 10); writeHeap(v1, readHeap(v1) * 2); print(readHeap(v1)); release( cnt )

Symbol table:
cnt -> 1
v1 -> (1, int)

Heap table:
1 -> 10

Output:
10
9

File table:

------------------------
ID: 1
Execution stack:
release( cnt )

Symbol table:
cnt -> 1
v1 -> (1, int)

Heap table:
1 -> 10

Output:
10
9

File table:

------------------------
ID: 3
Execution stack:
acquire( cnt )
writeHeap(v1, readHeap(v1) * 10); writeHeap(v1, readHeap(v1) * 2); print(readHeap(v1)); release( cnt )

Symbol table:
cnt -> 1
v1 -> (1, int)

Heap table:
1 -> 10

Output:
10
9

File table:

------------------------
ID: 1
Execution stack:

Symbol table:
cnt -> 1
v1 -> (1, int)

Heap table:
1 -> 10

Output:
10
9

File table:

------------------------
ID: 3
Execution stack:
writeHeap(v1, readHeap(v1) * 10); writeHeap(v1, readHeap(v1) * 2); print(readHeap(v1)); release( cnt )

Symbol table:
cnt -> 1
v1 -> (1, int)

Heap table:
1 -> 10

Output:
10
9

File table:

------------------------
ID: 3
Execution stack:
writeHeap(v1, readHeap(v1) * 10); writeHeap(v1, readHeap(v1) * 2); print(readHeap(v1)); release( cnt )

Symbol table:
cnt -> 1
v1 -> (1, int)

Heap table:
1 -> 10

Output:
10
9

File table:

------------------------
ID: 3
Execution stack:
writeHeap(v1, readHeap(v1) * 10)
writeHeap(v1, readHeap(v1) * 2); print(readHeap(v1)); release( cnt )

Symbol table:
cnt -> 1
v1 -> (1, int)

Heap table:
1 -> 10

Output:
10
9

File table:

------------------------
ID: 3
Execution stack:
writeHeap(v1, readHeap(v1) * 10)
writeHeap(v1, readHeap(v1) * 2); print(readHeap(v1)); release( cnt )

Symbol table:
cnt -> 1
v1 -> (1, int)

Heap table:
1 -> 10

Output:
10
9

File table:

------------------------
ID: 3
Execution stack:
writeHeap(v1, readHeap(v1) * 2); print(readHeap(v1)); release( cnt )

Symbol table:
cnt -> 1
v1 -> (1, int)

Heap table:
1 -> 100

Output:
10
9

File table:

------------------------
ID: 3
Execution stack:
writeHeap(v1, readHeap(v1) * 2); print(readHeap(v1)); release( cnt )

Symbol table:
cnt -> 1
v1 -> (1, int)

Heap table:
1 -> 100

Output:
10
9

File table:

------------------------
ID: 3
Execution stack:
writeHeap(v1, readHeap(v1) * 2)
print(readHeap(v1)); release( cnt )

Symbol table:
cnt -> 1
v1 -> (1, int)

Heap table:
1 -> 100

Output:
10
9

File table:

------------------------
ID: 3
Execution stack:
writeHeap(v1, readHeap(v1) * 2)
print(readHeap(v1)); release( cnt )

Symbol table:
cnt -> 1
v1 -> (1, int)

Heap table:
1 -> 100

Output:
10
9

File table:

------------------------
ID: 3
Execution stack:
print(readHeap(v1)); release( cnt )

Symbol table:
cnt -> 1
v1 -> (1, int)

Heap table:
1 -> 200

Output:
10
9

File table:

------------------------
ID: 3
Execution stack:
print(readHeap(v1)); release( cnt )

Symbol table:
cnt -> 1
v1 -> (1, int)

Heap table:
1 -> 200

Output:
10
9

File table:

------------------------
ID: 3
Execution stack:
print(readHeap(v1))
release( cnt )

Symbol table:
cnt -> 1
v1 -> (1, int)

Heap table:
1 -> 200

Output:
10
9

File table:

------------------------
ID: 3
Execution stack:
print(readHeap(v1))
release( cnt )

Symbol table:
cnt -> 1
v1 -> (1, int)

Heap table:
1 -> 200

Output:
10
9

File table:

------------------------
ID: 3
Execution stack:
release( cnt )

Symbol table:
cnt -> 1
v1 -> (1, int)

Heap table:
1 -> 200

Output:
10
9
200

File table:

------------------------
ID: 3
Execution stack:
release( cnt )

Symbol table:
cnt -> 1
v1 -> (1, int)

Heap table:
1 -> 200

Output:
10
9
200

File table:

------------------------
ID: 3
Execution stack:

Symbol table:
cnt -> 1
v1 -> (1, int)

Heap table:
1 -> 200

Output:
10
9
200

File table:

------------------------
ID: 1
Execution stack:
Ref(int) v1; int cnt; new(v1, 1); newSemaphore( cnt, readHeap(v1)); fork(acquire( cnt ); writeHeap(v1, readHeap(v1) * 10); print(readHeap(v1)); release( cnt )); fork(acquire( cnt ); writeHeap(v1, readHeap(v1) * 10); writeHeap(v1, readHeap(v1) * 2); print(readHeap(v1)); release( cnt )); acquire( cnt ); print(readHeap(v1) - 1); release( cnt )

Symbol table:

Heap table:

Output:

File table:

------------------------
ID: 1
Execution stack:
Ref(int) v1
int cnt; new(v1, 1); newSemaphore( cnt, readHeap(v1)); fork(acquire( cnt ); writeHeap(v1, readHeap(v1) * 10); print(readHeap(v1)); release( cnt )); fork(acquire( cnt ); writeHeap(v1, readHeap(v1) * 10); writeHeap(v1, readHeap(v1) * 2); print(readHeap(v1)); release( cnt )); acquire( cnt ); print(readHeap(v1) - 1); release( cnt )

Symbol table:

Heap table:

Output:

File table:

------------------------
ID: 1
Execution stack:
Ref(int) v1
int cnt; new(v1, 1); newSemaphore( cnt, readHeap(v1)); fork(acquire( cnt ); writeHeap(v1, readHeap(v1) * 10); print(readHeap(v1)); release( cnt )); fork(acquire( cnt ); writeHeap(v1, readHeap(v1) * 10); writeHeap(v1, readHeap(v1) * 2); print(readHeap(v1)); release( cnt )); acquire( cnt ); print(readHeap(v1) - 1); release( cnt )

Symbol table:

Heap table:

Output:

File table:

------------------------
ID: 1
Execution stack:
int cnt; new(v1, 1); newSemaphore( cnt, readHeap(v1)); fork(acquire( cnt ); writeHeap(v1, readHeap(v1) * 10); print(readHeap(v1)); release( cnt )); fork(acquire( cnt ); writeHeap(v1, readHeap(v1) * 10); writeHeap(v1, readHeap(v1) * 2); print(readHeap(v1)); release( cnt )); acquire( cnt ); print(readHeap(v1) - 1); release( cnt )

Symbol table:
v1 -> (1, int)

Heap table:

Output:

File table:

------------------------
ID: 1
Execution stack:
int cnt; new(v1, 1); newSemaphore( cnt, readHeap(v1)); fork(acquire( cnt ); writeHeap(v1, readHeap(v1) * 10); print(readHeap(v1)); release( cnt )); fork(acquire( cnt ); writeHeap(v1, readHeap(v1) * 10); writeHeap(v1, readHeap(v1) * 2); print(readHeap(v1)); release( cnt )); acquire( cnt ); print(readHeap(v1) - 1); release( cnt )

Symbol table:
v1 -> (1, int)

Heap table:

Output:

File table:

------------------------
ID: 1
Execution stack:
int cnt
new(v1, 1); newSemaphore( cnt, readHeap(v1)); fork(acquire( cnt ); writeHeap(v1, readHeap(v1) * 10); print(readHeap(v1)); release( cnt )); fork(acquire( cnt ); writeHeap(v1, readHeap(v1) * 10); writeHeap(v1, readHeap(v1) * 2); print(readHeap(v1)); release( cnt )); acquire( cnt ); print(readHeap(v1) - 1); release( cnt )

Symbol table:
v1 -> (1, int)

Heap table:

Output:

File table:

------------------------
ID: 1
Execution stack:
int cnt
new(v1, 1); newSemaphore( cnt, readHeap(v1)); fork(acquire( cnt ); writeHeap(v1, readHeap(v1) * 10); print(readHeap(v1)); release( cnt )); fork(acquire( cnt ); writeHeap(v1, readHeap(v1) * 10); writeHeap(v1, readHeap(v1) * 2); print(readHeap(v1)); release( cnt )); acquire( cnt ); print(readHeap(v1) - 1); release( cnt )

Symbol table:
v1 -> (1, int)

Heap table:

Output:

File table:

------------------------
ID: 1
Execution stack:
new(v1, 1); newSemaphore( cnt, readHeap(v1)); fork(acquire( cnt ); writeHeap(v1, readHeap(v1) * 10); print(readHeap(v1)); release( cnt )); fork(acquire( cnt ); writeHeap(v1, readHeap(v1) * 10); writeHeap(v1, readHeap(v1) * 2); print(readHeap(v1)); release( cnt )); acquire( cnt ); print(readHeap(v1) - 1); release( cnt )

Symbol table:
cnt -> 0
v1 -> (1, int)

Heap table:

Output:

File table:

------------------------
ID: 1
Execution stack:
new(v1, 1); newSemaphore( cnt, readHeap(v1)); fork(acquire( cnt ); writeHeap(v1, readHeap(v1) * 10); print(readHeap(v1)); release( cnt )); fork(acquire( cnt ); writeHeap(v1, readHeap(v1) * 10); writeHeap(v1, readHeap(v1) * 2); print(readHeap(v1)); release( cnt )); acquire( cnt ); print(readHeap(v1) - 1); release( cnt )

Symbol table:
cnt -> 0
v1 -> (1, int)

Heap table:

Output:

File table:

------------------------
ID: 1
Execution stack:
new(v1, 1)
newSemaphore( cnt, readHeap(v1)); fork(acquire( cnt ); writeHeap(v1, readHeap(v1) * 10); print(readHeap(v1)); release( cnt )); fork(acquire( cnt ); writeHeap(v1, readHeap(v1) * 10); writeHeap(v1, readHeap(v1) * 2); print(readHeap(v1)); release( cnt )); acquire( cnt ); print(readHeap(v1) - 1); release( cnt )

Symbol table:
cnt -> 0
v1 -> (1, int)

Heap table:

Output:

File table:

------------------------
ID: 1
Execution stack:
new(v1, 1)
newSemaphore( cnt, readHeap(v1)); fork(acquire( cnt ); writeHeap(v1, readHeap(v1) * 10); print(readHeap(v1)); release( cnt )); fork(acquire( cnt ); writeHeap(v1, readHeap(v1) * 10); writeHeap(v1, readHeap(v1) * 2); print(readHeap(v1)); release( cnt )); acquire( cnt ); print(readHeap(v1) - 1); release( cnt )

Symbol table:
cnt -> 0
v1 -> (1, int)

Heap table:

Output:

File table:

------------------------
ID: 1
Execution stack:
newSemaphore( cnt, readHeap(v1)); fork(acquire( cnt ); writeHeap(v1, readHeap(v1) * 10); print(readHeap(v1)); release( cnt )); fork(acquire( cnt ); writeHeap(v1, readHeap(v1) * 10); writeHeap(v1, readHeap(v1) * 2); print(readHeap(v1)); release( cnt )); acquire( cnt ); print(readHeap(v1) - 1); release( cnt )

Symbol table:
cnt -> 0
v1 -> (1, int)

Heap table:
1 -> 1

Output:

File table:

------------------------
ID: 1
Execution stack:
newSemaphore( cnt, readHeap(v1)); fork(acquire( cnt ); writeHeap(v1, readHeap(v1) * 10); print(readHeap(v1)); release( cnt )); fork(acquire( cnt ); writeHeap(v1, readHeap(v1) * 10); writeHeap(v1, readHeap(v1) * 2); print(readHeap(v1)); release( cnt )); acquire( cnt ); print(readHeap(v1) - 1); release( cnt )

Symbol table:
cnt -> 0
v1 -> (1, int)

Heap table:
1 -> 1

Output:

File table:

------------------------
ID: 1
Execution stack:
newSemaphore( cnt, readHeap(v1))
fork(acquire( cnt ); writeHeap(v1, readHeap(v1) * 10); print(readHeap(v1)); release( cnt )); fork(acquire( cnt ); writeHeap(v1, readHeap(v1) * 10); writeHeap(v1, readHeap(v1) * 2); print(readHeap(v1)); release( cnt )); acquire( cnt ); print(readHeap(v1) - 1); release( cnt )

Symbol table:
cnt -> 0
v1 -> (1, int)

Heap table:
1 -> 1

Output:

File table:

------------------------
ID: 1
Execution stack:
newSemaphore( cnt, readHeap(v1))
fork(acquire( cnt ); writeHeap(v1, readHeap(v1) * 10); print(readHeap(v1)); release( cnt )); fork(acquire( cnt ); writeHeap(v1, readHeap(v1) * 10); writeHeap(v1, readHeap(v1) * 2); print(readHeap(v1)); release( cnt )); acquire( cnt ); print(readHeap(v1) - 1); release( cnt )

Symbol table:
cnt -> 0
v1 -> (1, int)

Heap table:
1 -> 1

Output:

File table:

------------------------
ID: 1
Execution stack:
fork(acquire( cnt ); writeHeap(v1, readHeap(v1) * 10); print(readHeap(v1)); release( cnt )); fork(acquire( cnt ); writeHeap(v1, readHeap(v1) * 10); writeHeap(v1, readHeap(v1) * 2); print(readHeap(v1)); release( cnt )); acquire( cnt ); print(readHeap(v1) - 1); release( cnt )

Symbol table:
cnt -> 1
v1 -> (1, int)

Heap table:
1 -> 1

Output:

File table:

------------------------
ID: 1
Execution stack:
fork(acquire( cnt ); writeHeap(v1, readHeap(v1) * 10); print(readHeap(v1)); release( cnt )); fork(acquire( cnt ); writeHeap(v1, readHeap(v1) * 10); writeHeap(v1, readHeap(v1) * 2); print(readHeap(v1)); release( cnt )); acquire( cnt ); print(readHeap(v1) - 1); release( cnt )

Symbol table:
cnt -> 1
v1 -> (1, int)

Heap table:
1 -> 1

Output:

File table:

------------------------
ID: 1
Execution stack:
fork(acquire( cnt ); writeHeap(v1, readHeap(v1) * 10); print(readHeap(v1)); release( cnt ))
fork(acquire( cnt ); writeHeap(v1, readHeap(v1) * 10); writeHeap(v1, readHeap(v1) * 2); print(readHeap(v1)); release( cnt )); acquire( cnt ); print(readHeap(v1) - 1); release( cnt )

Symbol table:
cnt -> 1
v1 -> (1, int)

Heap table:
1 -> 1

Output:

File table:

------------------------
ID: 1
Execution stack:
fork(acquire( cnt ); writeHeap(v1, readHeap(v1) * 10); print(readHeap(v1)); release( cnt ))
fork(acquire( cnt ); writeHeap(v1, readHeap(v1) * 10); writeHeap(v1, readHeap(v1) * 2); print(readHeap(v1)); release( cnt )); acquire( cnt ); print(readHeap(v1) - 1); release( cnt )

Symbol table:
cnt -> 1
v1 -> (1, int)

Heap table:
1 -> 1

Output:

File table:

------------------------
ID: 1
Execution stack:
fork(acquire( cnt ); writeHeap(v1, readHeap(v1) * 10); writeHeap(v1, readHeap(v1) * 2); print(readHeap(v1)); release( cnt )); acquire( cnt ); print(readHeap(v1) - 1); release( cnt )

Symbol table:
cnt -> 1
v1 -> (1, int)

Heap table:
1 -> 1

Output:

File table:

------------------------
ID: 2
Execution stack:
acquire( cnt ); writeHeap(v1, readHeap(v1) * 10); print(readHeap(v1)); release( cnt )

Symbol table:
cnt -> 1
v1 -> (1, int)

Heap table:
1 -> 1

Output:

File table:

------------------------
ID: 1
Execution stack:
fork(acquire( cnt ); writeHeap(v1, readHeap(v1) * 10); writeHeap(v1, readHeap(v1) * 2); print(readHeap(v1)); release( cnt )); acquire( cnt ); print(readHeap(v1) - 1); release( cnt )

Symbol table:
cnt -> 1
v1 -> (1, int)

Heap table:
1 -> 1

Output:

File table:

------------------------
ID: 2
Execution stack:
acquire( cnt ); writeHeap(v1, readHeap(v1) * 10); print(readHeap(v1)); release( cnt )

Symbol table:
cnt -> 1
v1 -> (1, int)

Heap table:
1 -> 1

Output:

File table:

------------------------
ID: 1
Execution stack:
fork(acquire( cnt ); writeHeap(v1, readHeap(v1) * 10); writeHeap(v1, readHeap(v1) * 2); print(readHeap(v1)); release( cnt ))
acquire( cnt ); print(readHeap(v1) - 1); release( cnt )

Symbol table:
cnt -> 1
v1 -> (1, int)

Heap table:
1 -> 1

Output:

File table:

------------------------
ID: 2
Execution stack:
acquire( cnt )
writeHeap(v1, readHeap(v1) * 10); print(readHeap(v1)); release( cnt )

Symbol table:
cnt -> 1
v1 -> (1, int)

Heap table:
1 -> 1

Output:

File table:

------------------------
ID: 1
Execution stack:
fork(acquire( cnt ); writeHeap(v1, readHeap(v1) * 10); writeHeap(v1, readHeap(v1) * 2); print(readHeap(v1)); release( cnt ))
acquire( cnt ); print(readHeap(v1) - 1); release( cnt )

Symbol table:
cnt -> 1
v1 -> (1, int)

Heap table:
1 -> 1

Output:

File table:

------------------------
ID: 2
Execution stack:
acquire( cnt )
writeHeap(v1, readHeap(v1) * 10); print(readHeap(v1)); release( cnt )

Symbol table:
cnt -> 1
v1 -> (1, int)

Heap table:
1 -> 1

Output:

File table:

------------------------
ID: 1
Execution stack:
acquire( cnt ); print(readHeap(v1) - 1); release( cnt )

Symbol table:
cnt -> 1
v1 -> (1, int)

Heap table:
1 -> 1

Output:

File table:

------------------------
ID: 2
Execution stack:
writeHeap(v1, readHeap(v1) * 10); print(readHeap(v1)); release( cnt )

Symbol table:
cnt -> 1
v1 -> (1, int)

Heap table:
1 -> 1

Output:

File table:

------------------------
ID: 3
Execution stack:
acquire( cnt ); writeHeap(v1, readHeap(v1) * 10); writeHeap(v1, readHeap(v1) * 2); print(readHeap(v1)); release( cnt )

Symbol table:
cnt -> 1
v1 -> (1, int)

Heap table:
1 -> 1

Output:

File table:

------------------------
ID: 1
Execution stack:
acquire( cnt ); print(readHeap(v1) - 1); release( cnt )

Symbol table:
cnt -> 1
v1 -> (1, int)

Heap table:
1 -> 1

Output:

File table:

------------------------
ID: 2
Execution stack:
writeHeap(v1, readHeap(v1) * 10); print(readHeap(v1)); release( cnt )

Symbol table:
cnt -> 1
v1 -> (1, int)

Heap table:
1 -> 1

Output:

File table:

------------------------
ID: 3
Execution stack:
acquire( cnt ); writeHeap(v1, readHeap(v1) * 10); writeHeap(v1, readHeap(v1) * 2); print(readHeap(v1)); release( cnt )

Symbol table:
cnt -> 1
v1 -> (1, int)

Heap table:
1 -> 1

Output:

File table:

------------------------
ID: 1
Execution stack:
acquire( cnt )
print(readHeap(v1) - 1); release( cnt )

Symbol table:
cnt -> 1
v1 -> (1, int)

Heap table:
1 -> 1

Output:

File table:

------------------------
ID: 2
Execution stack:
writeHeap(v1, readHeap(v1) * 10)
print(readHeap(v1)); release( cnt )

Symbol table:
cnt -> 1
v1 -> (1, int)

Heap table:
1 -> 1

Output:

File table:

------------------------
ID: 3
Execution stack:
acquire( cnt )
writeHeap(v1, readHeap(v1) * 10); writeHeap(v1, readHeap(v1) * 2); print(readHeap(v1)); release( cnt )

Symbol table:
cnt -> 1
v1 -> (1, int)

Heap table:
1 -> 1

Output:

File table:

------------------------
ID: 1
Execution stack:
acquire( cnt )
print(readHeap(v1) - 1); release( cnt )

Symbol table:
cnt -> 1
v1 -> (1, int)

Heap table:
1 -> 1

Output:

File table:

------------------------
ID: 2
Execution stack:
writeHeap(v1, readHeap(v1) * 10)
print(readHeap(v1)); release( cnt )

Symbol table:
cnt -> 1
v1 -> (1, int)

Heap table:
1 -> 1

Output:

File table:

------------------------
ID: 3
Execution stack:
acquire( cnt )
writeHeap(v1, readHeap(v1) * 10); writeHeap(v1, readHeap(v1) * 2); print(readHeap(v1)); release( cnt )

Symbol table:
cnt -> 1
v1 -> (1, int)

Heap table:
1 -> 1

Output:

File table:

------------------------
ID: 1
Execution stack:
acquire( cnt )
print(readHeap(v1) - 1); release( cnt )

Symbol table:
cnt -> 1
v1 -> (1, int)

Heap table:
1 -> 10

Output:

File table:

------------------------
ID: 2
Execution stack:
print(readHeap(v1)); release( cnt )

Symbol table:
cnt -> 1
v1 -> (1, int)

Heap table:
1 -> 10

Output:

File table:

------------------------
ID: 3
Execution stack:
acquire( cnt )
writeHeap(v1, readHeap(v1) * 10); writeHeap(v1, readHeap(v1) * 2); print(readHeap(v1)); release( cnt )

Symbol table:
cnt -> 1
v1 -> (1, int)

Heap table:
1 -> 10

Output:

File table:

------------------------
ID: 1
Execution stack:
acquire( cnt )
print(readHeap(v1) - 1); release( cnt )

Symbol table:
cnt -> 1
v1 -> (1, int)

Heap table:
1 -> 10

Output:

File table:

------------------------
ID: 2
Execution stack:
print(readHeap(v1)); release( cnt )

Symbol table:
cnt -> 1
v1 -> (1, int)

Heap table:
1 -> 10

Output:

File table:

------------------------
ID: 3
Execution stack:
acquire( cnt )
writeHeap(v1, readHeap(v1) * 10); writeHeap(v1, readHeap(v1) * 2); print(readHeap(v1)); release( cnt )

Symbol table:
cnt -> 1
v1 -> (1, int)

Heap table:
1 -> 10

Output:

File table:

------------------------
ID: 1
Execution stack:
acquire( cnt )
print(readHeap(v1) - 1); release( cnt )

Symbol table:
cnt -> 1
v1 -> (1, int)

Heap table:
1 -> 10

Output:

File table:

------------------------
ID: 2
Execution stack:
print(readHeap(v1))
release( cnt )

Symbol table:
cnt -> 1
v1 -> (1, int)

Heap table:
1 -> 10

Output:

File table:

------------------------
ID: 3
Execution stack:
acquire( cnt )
writeHeap(v1, readHeap(v1) * 10); writeHeap(v1, readHeap(v1) * 2); print(readHeap(v1)); release( cnt )

Symbol table:
cnt -> 1
v1 -> (1, int)

Heap table:
1 -> 10

Output:

File table:

------------------------
ID: 1
Execution stack:
acquire( cnt )
print(readHeap(v1) - 1); release( cnt )

Symbol table:
cnt -> 1
v1 -> (1, int)

Heap table:
1 -> 10

Output:

File table:

------------------------
ID: 2
Execution stack:
print(readHeap(v1))
release( cnt )

Symbol table:
cnt -> 1
v1 -> (1, int)

Heap table:
1 -> 10

Output:

File table:

------------------------
ID: 3
Execution stack:
acquire( cnt )
writeHeap(v1, readHeap(v1) * 10); writeHeap(v1, readHeap(v1) * 2); print(readHeap(v1)); release( cnt )

Symbol table:
cnt -> 1
v1 -> (1, int)

Heap table:
1 -> 10

Output:

File table:

------------------------
ID: 1
Execution stack:
acquire( cnt )
print(readHeap(v1) - 1); release( cnt )

Symbol table:
cnt -> 1
v1 -> (1, int)

Heap table:
1 -> 10

Output:
10

File table:

------------------------
ID: 2
Execution stack:
release( cnt )

Symbol table:
cnt -> 1
v1 -> (1, int)

Heap table:
1 -> 10

Output:
10

File table:

------------------------
ID: 3
Execution stack:
acquire( cnt )
writeHeap(v1, readHeap(v1) * 10); writeHeap(v1, readHeap(v1) * 2); print(readHeap(v1)); release( cnt )

Symbol table:
cnt -> 1
v1 -> (1, int)

Heap table:
1 -> 10

Output:
10

File table:

------------------------
ID: 1
Execution stack:
acquire( cnt )
print(readHeap(v1) - 1); release( cnt )

Symbol table:
cnt -> 1
v1 -> (1, int)

Heap table:
1 -> 10

Output:
10

File table:

------------------------
ID: 2
Execution stack:
release( cnt )

Symbol table:
cnt -> 1
v1 -> (1, int)

Heap table:
1 -> 10

Output:
10

File table:

------------------------
ID: 3
Execution stack:
acquire( cnt )
writeHeap(v1, readHeap(v1) * 10); writeHeap(v1, readHeap(v1) * 2); print(readHeap(v1)); release( cnt )

Symbol table:
cnt -> 1
v1 -> (1, int)

Heap table:
1 -> 10

Output:
10

File table:

------------------------
ID: 1
Execution stack:
acquire( cnt )
print(readHeap(v1) - 1); release( cnt )

Symbol table:
cnt -> 1
v1 -> (1, int)

Heap table:
1 -> 10

Output:
10

File table:

------------------------
ID: 2
Execution stack:

Symbol table:
cnt -> 1
v1 -> (1, int)

Heap table:
1 -> 10

Output:
10

File table:

------------------------
ID: 3
Execution stack:
acquire( cnt )
writeHeap(v1, readHeap(v1) * 10); writeHeap(v1, readHeap(v1) * 2); print(readHeap(v1)); release( cnt )

Symbol table:
cnt -> 1
v1 -> (1, int)

Heap table:
1 -> 10

Output:
10

File table:

------------------------
ID: 1
Execution stack:
acquire( cnt )
print(readHeap(v1) - 1); release( cnt )

Symbol table:
cnt -> 1
v1 -> (1, int)

Heap table:
1 -> 10

Output:
10

File table:

------------------------
ID: 3
Execution stack:
acquire( cnt )
writeHeap(v1, readHeap(v1) * 10); writeHeap(v1, readHeap(v1) * 2); print(readHeap(v1)); release( cnt )

Symbol table:
cnt -> 1
v1 -> (1, int)

Heap table:
1 -> 10

Output:
10

File table:

------------------------
ID: 1
Execution stack:
print(readHeap(v1) - 1); release( cnt )

Symbol table:
cnt -> 1
v1 -> (1, int)

Heap table:
1 -> 10

Output:
10

File table:

------------------------
ID: 3
Execution stack:
acquire( cnt )
writeHeap(v1, readHeap(v1) * 10); writeHeap(v1, readHeap(v1) * 2); print(readHeap(v1)); release( cnt )

Symbol table:
cnt -> 1
v1 -> (1, int)

Heap table:
1 -> 10

Output:
10

File table:

------------------------
ID: 1
Execution stack:
print(readHeap(v1) - 1); release( cnt )

Symbol table:
cnt -> 1
v1 -> (1, int)

Heap table:
1 -> 10

Output:
10

File table:

------------------------
ID: 3
Execution stack:
acquire( cnt )
writeHeap(v1, readHeap(v1) * 10); writeHeap(v1, readHeap(v1) * 2); print(readHeap(v1)); release( cnt )

Symbol table:
cnt -> 1
v1 -> (1, int)

Heap table:
1 -> 10

Output:
10

File table:

------------------------
ID: 1
Execution stack:
print(readHeap(v1) - 1)
release( cnt )

Symbol table:
cnt -> 1
v1 -> (1, int)

Heap table:
1 -> 10

Output:
10

File table:

------------------------
ID: 3
Execution stack:
acquire( cnt )
writeHeap(v1, readHeap(v1) * 10); writeHeap(v1, readHeap(v1) * 2); print(readHeap(v1)); release( cnt )

Symbol table:
cnt -> 1
v1 -> (1, int)

Heap table:
1 -> 10

Output:
10

File table:

------------------------
ID: 1
Execution stack:
print(readHeap(v1) - 1)
release( cnt )

Symbol table:
cnt -> 1
v1 -> (1, int)

Heap table:
1 -> 10

Output:
10

File table:

------------------------
ID: 3
Execution stack:
acquire( cnt )
writeHeap(v1, readHeap(v1) * 10); writeHeap(v1, readHeap(v1) * 2); print(readHeap(v1)); release( cnt )

Symbol table:
cnt -> 1
v1 -> (1, int)

Heap table:
1 -> 10

Output:
10

File table:

------------------------
ID: 1
Execution stack:
release( cnt )

Symbol table:
cnt -> 1
v1 -> (1, int)

Heap table:
1 -> 10

Output:
10
9

File table:

------------------------
ID: 3
Execution stack:
acquire( cnt )
writeHeap(v1, readHeap(v1) * 10); writeHeap(v1, readHeap(v1) * 2); print(readHeap(v1)); release( cnt )

Symbol table:
cnt -> 1
v1 -> (1, int)

Heap table:
1 -> 10

Output:
10
9

File table:

------------------------
ID: 1
Execution stack:
release( cnt )

Symbol table:
cnt -> 1
v1 -> (1, int)

Heap table:
1 -> 10

Output:
10
9

File table:

------------------------
ID: 3
Execution stack:
acquire( cnt )
writeHeap(v1, readHeap(v1) * 10); writeHeap(v1, readHeap(v1) * 2); print(readHeap(v1)); release( cnt )

Symbol table:
cnt -> 1
v1 -> (1, int)

Heap table:
1 -> 10

Output:
10
9

File table:

------------------------
ID: 1
Execution stack:

Symbol table:
cnt -> 1
v1 -> (1, int)

Heap table:
1 -> 10

Output:
10
9

File table:

------------------------
ID: 3
Execution stack:
writeHeap(v1, readHeap(v1) * 10); writeHeap(v1, readHeap(v1) * 2); print(readHeap(v1)); release( cnt )

Symbol table:
cnt -> 1
v1 -> (1, int)

Heap table:
1 -> 10

Output:
10
9

File table:

------------------------
ID: 3
Execution stack:
writeHeap(v1, readHeap(v1) * 10); writeHeap(v1, readHeap(v1) * 2); print(readHeap(v1)); release( cnt )

Symbol table:
cnt -> 1
v1 -> (1, int)

Heap table:
1 -> 10

Output:
10
9

File table:

------------------------
ID: 3
Execution stack:
writeHeap(v1, readHeap(v1) * 10)
writeHeap(v1, readHeap(v1) * 2); print(readHeap(v1)); release( cnt )

Symbol table:
cnt -> 1
v1 -> (1, int)

Heap table:
1 -> 10

Output:
10
9

File table:

------------------------
ID: 3
Execution stack:
writeHeap(v1, readHeap(v1) * 10)
writeHeap(v1, readHeap(v1) * 2); print(readHeap(v1)); release( cnt )

Symbol table:
cnt -> 1
v1 -> (1, int)

Heap table:
1 -> 10

Output:
10
9

File table:

------------------------
ID: 3
Execution stack:
writeHeap(v1, readHeap(v1) * 2); print(readHeap(v1)); release( cnt )

Symbol table:
cnt -> 1
v1 -> (1, int)

Heap table:
1 -> 100

Output:
10
9

File table:

------------------------
ID: 3
Execution stack:
writeHeap(v1, readHeap(v1) * 2); print(readHeap(v1)); release( cnt )

Symbol table:
cnt -> 1
v1 -> (1, int)

Heap table:
1 -> 100

Output:
10
9

File table:

------------------------
ID: 3
Execution stack:
writeHeap(v1, readHeap(v1) * 2)
print(readHeap(v1)); release( cnt )

Symbol table:
cnt -> 1
v1 -> (1, int)

Heap table:
1 -> 100

Output:
10
9

File table:

------------------------
ID: 3
Execution stack:
writeHeap(v1, readHeap(v1) * 2)
print(readHeap(v1)); release( cnt )

Symbol table:
cnt -> 1
v1 -> (1, int)

Heap table:
1 -> 100

Output:
10
9

File table:

------------------------
ID: 3
Execution stack:
print(readHeap(v1)); release( cnt )

Symbol table:
cnt -> 1
v1 -> (1, int)

Heap table:
1 -> 200

Output:
10
9

File table:

------------------------
ID: 3
Execution stack:
print(readHeap(v1)); release( cnt )

Symbol table:
cnt -> 1
v1 -> (1, int)

Heap table:
1 -> 200

Output:
10
9

File table:

------------------------
ID: 3
Execution stack:
print(readHeap(v1))
release( cnt )

Symbol table:
cnt -> 1
v1 -> (1, int)

Heap table:
1 -> 200

Output:
10
9

File table:

------------------------
ID: 3
Execution stack:
print(readHeap(v1))
release( cnt )

Symbol table:
cnt -> 1
v1 -> (1, int)

Heap table:
1 -> 200

Output:
10
9

File table:

------------------------
ID: 3
Execution stack:
release( cnt )

Symbol table:
cnt -> 1
v1 -> (1, int)

Heap table:
1 -> 200

Output:
10
9
200

File table:

------------------------
ID: 3
Execution stack:
release( cnt )

Symbol table:
cnt -> 1
v1 -> (1, int)

Heap table:
1 -> 200

Output:
10
9
200

File table:

------------------------
ID: 3
Execution stack:

Symbol table:
cnt -> 1
v1 -> (1, int)

Heap table:
1 -> 200

Output:
10
9
200

File table:

------------------------
ID: 1
Execution stack:
Ref(int) v1; int cnt; new(v1, 1); newSemaphore( cnt, readHeap(v1)); fork(acquire( cnt ); writeHeap(v1, readHeap(v1) * 10); print(readHeap(v1)); release( cnt )); fork(acquire( cnt ); writeHeap(v1, readHeap(v1) * 10); writeHeap(v1, readHeap(v1) * 2); print(readHeap(v1)); release( cnt )); acquire( cnt ); print(readHeap(v1) - 1); release( cnt )

Symbol table:

Heap table:

Output:

File table:

------------------------
ID: 1
Execution stack:
Ref(int) v1
int cnt; new(v1, 1); newSemaphore( cnt, readHeap(v1)); fork(acquire( cnt ); writeHeap(v1, readHeap(v1) * 10); print(readHeap(v1)); release( cnt )); fork(acquire( cnt ); writeHeap(v1, readHeap(v1) * 10); writeHeap(v1, readHeap(v1) * 2); print(readHeap(v1)); release( cnt )); acquire( cnt ); print(readHeap(v1) - 1); release( cnt )

Symbol table:

Heap table:

Output:

File table:

------------------------
ID: 1
Execution stack:
Ref(int) v1
int cnt; new(v1, 1); newSemaphore( cnt, readHeap(v1)); fork(acquire( cnt ); writeHeap(v1, readHeap(v1) * 10); print(readHeap(v1)); release( cnt )); fork(acquire( cnt ); writeHeap(v1, readHeap(v1) * 10); writeHeap(v1, readHeap(v1) * 2); print(readHeap(v1)); release( cnt )); acquire( cnt ); print(readHeap(v1) - 1); release( cnt )

Symbol table:

Heap table:

Output:

File table:

------------------------
ID: 1
Execution stack:
int cnt; new(v1, 1); newSemaphore( cnt, readHeap(v1)); fork(acquire( cnt ); writeHeap(v1, readHeap(v1) * 10); print(readHeap(v1)); release( cnt )); fork(acquire( cnt ); writeHeap(v1, readHeap(v1) * 10); writeHeap(v1, readHeap(v1) * 2); print(readHeap(v1)); release( cnt )); acquire( cnt ); print(readHeap(v1) - 1); release( cnt )

Symbol table:
v1 -> (1, int)

Heap table:

Output:

File table:

------------------------
ID: 1
Execution stack:
int cnt; new(v1, 1); newSemaphore( cnt, readHeap(v1)); fork(acquire( cnt ); writeHeap(v1, readHeap(v1) * 10); print(readHeap(v1)); release( cnt )); fork(acquire( cnt ); writeHeap(v1, readHeap(v1) * 10); writeHeap(v1, readHeap(v1) * 2); print(readHeap(v1)); release( cnt )); acquire( cnt ); print(readHeap(v1) - 1); release( cnt )

Symbol table:
v1 -> (1, int)

Heap table:

Output:

File table:

------------------------
ID: 1
Execution stack:
int cnt
new(v1, 1); newSemaphore( cnt, readHeap(v1)); fork(acquire( cnt ); writeHeap(v1, readHeap(v1) * 10); print(readHeap(v1)); release( cnt )); fork(acquire( cnt ); writeHeap(v1, readHeap(v1) * 10); writeHeap(v1, readHeap(v1) * 2); print(readHeap(v1)); release( cnt )); acquire( cnt ); print(readHeap(v1) - 1); release( cnt )

Symbol table:
v1 -> (1, int)

Heap table:

Output:

File table:

------------------------
ID: 1
Execution stack:
int cnt
new(v1, 1); newSemaphore( cnt, readHeap(v1)); fork(acquire( cnt ); writeHeap(v1, readHeap(v1) * 10); print(readHeap(v1)); release( cnt )); fork(acquire( cnt ); writeHeap(v1, readHeap(v1) * 10); writeHeap(v1, readHeap(v1) * 2); print(readHeap(v1)); release( cnt )); acquire( cnt ); print(readHeap(v1) - 1); release( cnt )

Symbol table:
v1 -> (1, int)

Heap table:

Output:

File table:

------------------------
ID: 1
Execution stack:
new(v1, 1); newSemaphore( cnt, readHeap(v1)); fork(acquire( cnt ); writeHeap(v1, readHeap(v1) * 10); print(readHeap(v1)); release( cnt )); fork(acquire( cnt ); writeHeap(v1, readHeap(v1) * 10); writeHeap(v1, readHeap(v1) * 2); print(readHeap(v1)); release( cnt )); acquire( cnt ); print(readHeap(v1) - 1); release( cnt )

Symbol table:
cnt -> 0
v1 -> (1, int)

Heap table:

Output:

File table:

------------------------
ID: 1
Execution stack:
new(v1, 1); newSemaphore( cnt, readHeap(v1)); fork(acquire( cnt ); writeHeap(v1, readHeap(v1) * 10); print(readHeap(v1)); release( cnt )); fork(acquire( cnt ); writeHeap(v1, readHeap(v1) * 10); writeHeap(v1, readHeap(v1) * 2); print(readHeap(v1)); release( cnt )); acquire( cnt ); print(readHeap(v1) - 1); release( cnt )

Symbol table:
cnt -> 0
v1 -> (1, int)

Heap table:

Output:

File table:

------------------------
ID: 1
Execution stack:
new(v1, 1)
newSemaphore( cnt, readHeap(v1)); fork(acquire( cnt ); writeHeap(v1, readHeap(v1) * 10); print(readHeap(v1)); release( cnt )); fork(acquire( cnt ); writeHeap(v1, readHeap(v1) * 10); writeHeap(v1, readHeap(v1) * 2); print(readHeap(v1)); release( cnt )); acquire( cnt ); print(readHeap(v1) - 1); release( cnt )

Symbol table:
cnt -> 0
v1 -> (1, int)

Heap table:

Output:

File table:

------------------------
ID: 1
Execution stack:
new(v1, 1)
newSemaphore( cnt, readHeap(v1)); fork(acquire( cnt ); writeHeap(v1, readHeap(v1) * 10); print(readHeap(v1)); release( cnt )); fork(acquire( cnt ); writeHeap(v1, readHeap(v1) * 10); writeHeap(v1, readHeap(v1) * 2); print(readHeap(v1)); release( cnt )); acquire( cnt ); print(readHeap(v1) - 1); release( cnt )

Symbol table:
cnt -> 0
v1 -> (1, int)

Heap table:

Output:

File table:

------------------------
ID: 1
Execution stack:
newSemaphore( cnt, readHeap(v1)); fork(acquire( cnt ); writeHeap(v1, readHeap(v1) * 10); print(readHeap(v1)); release( cnt )); fork(acquire( cnt ); writeHeap(v1, readHeap(v1) * 10); writeHeap(v1, readHeap(v1) * 2); print(readHeap(v1)); release( cnt )); acquire( cnt ); print(readHeap(v1) - 1); release( cnt )

Symbol table:
cnt -> 0
v1 -> (1, int)

Heap table:
1 -> 1

Output:

File table:

------------------------
ID: 1
Execution stack:
newSemaphore( cnt, readHeap(v1)); fork(acquire( cnt ); writeHeap(v1, readHeap(v1) * 10); print(readHeap(v1)); release( cnt )); fork(acquire( cnt ); writeHeap(v1, readHeap(v1) * 10); writeHeap(v1, readHeap(v1) * 2); print(readHeap(v1)); release( cnt )); acquire( cnt ); print(readHeap(v1) - 1); release( cnt )

Symbol table:
cnt -> 0
v1 -> (1, int)

Heap table:
1 -> 1

Output:

File table:

------------------------
ID: 1
Execution stack:
newSemaphore( cnt, readHeap(v1))
fork(acquire( cnt ); writeHeap(v1, readHeap(v1) * 10); print(readHeap(v1)); release( cnt )); fork(acquire( cnt ); writeHeap(v1, readHeap(v1) * 10); writeHeap(v1, readHeap(v1) * 2); print(readHeap(v1)); release( cnt )); acquire( cnt ); print(readHeap(v1) - 1); release( cnt )

Symbol table:
cnt -> 0
v1 -> (1, int)

Heap table:
1 -> 1

Output:

File table:

------------------------
ID: 1
Execution stack:
newSemaphore( cnt, readHeap(v1))
fork(acquire( cnt ); writeHeap(v1, readHeap(v1) * 10); print(readHeap(v1)); release( cnt )); fork(acquire( cnt ); writeHeap(v1, readHeap(v1) * 10); writeHeap(v1, readHeap(v1) * 2); print(readHeap(v1)); release( cnt )); acquire( cnt ); print(readHeap(v1) - 1); release( cnt )

Symbol table:
cnt -> 0
v1 -> (1, int)

Heap table:
1 -> 1

Output:

File table:

------------------------
ID: 1
Execution stack:
fork(acquire( cnt ); writeHeap(v1, readHeap(v1) * 10); print(readHeap(v1)); release( cnt )); fork(acquire( cnt ); writeHeap(v1, readHeap(v1) * 10); writeHeap(v1, readHeap(v1) * 2); print(readHeap(v1)); release( cnt )); acquire( cnt ); print(readHeap(v1) - 1); release( cnt )

Symbol table:
cnt -> 1
v1 -> (1, int)

Heap table:
1 -> 1

Output:

File table:

------------------------
ID: 1
Execution stack:
fork(acquire( cnt ); writeHeap(v1, readHeap(v1) * 10); print(readHeap(v1)); release( cnt )); fork(acquire( cnt ); writeHeap(v1, readHeap(v1) * 10); writeHeap(v1, readHeap(v1) * 2); print(readHeap(v1)); release( cnt )); acquire( cnt ); print(readHeap(v1) - 1); release( cnt )

Symbol table:
cnt -> 1
v1 -> (1, int)

Heap table:
1 -> 1

Output:

File table:

------------------------
ID: 1
Execution stack:
fork(acquire( cnt ); writeHeap(v1, readHeap(v1) * 10); print(readHeap(v1)); release( cnt ))
fork(acquire( cnt ); writeHeap(v1, readHeap(v1) * 10); writeHeap(v1, readHeap(v1) * 2); print(readHeap(v1)); release( cnt )); acquire( cnt ); print(readHeap(v1) - 1); release( cnt )

Symbol table:
cnt -> 1
v1 -> (1, int)

Heap table:
1 -> 1

Output:

File table:

------------------------
ID: 1
Execution stack:
fork(acquire( cnt ); writeHeap(v1, readHeap(v1) * 10); print(readHeap(v1)); release( cnt ))
fork(acquire( cnt ); writeHeap(v1, readHeap(v1) * 10); writeHeap(v1, readHeap(v1) * 2); print(readHeap(v1)); release( cnt )); acquire( cnt ); print(readHeap(v1) - 1); release( cnt )

Symbol table:
cnt -> 1
v1 -> (1, int)

Heap table:
1 -> 1

Output:

File table:

------------------------
ID: 1
Execution stack:
fork(acquire( cnt ); writeHeap(v1, readHeap(v1) * 10); writeHeap(v1, readHeap(v1) * 2); print(readHeap(v1)); release( cnt )); acquire( cnt ); print(readHeap(v1) - 1); release( cnt )

Symbol table:
cnt -> 1
v1 -> (1, int)

Heap table:
1 -> 1

Output:

File table:

------------------------
ID: 2
Execution stack:
acquire( cnt ); writeHeap(v1, readHeap(v1) * 10); print(readHeap(v1)); release( cnt )

Symbol table:
cnt -> 1
v1 -> (1, int)

Heap table:
1 -> 1

Output:

File table:

------------------------
ID: 1
Execution stack:
fork(acquire( cnt ); writeHeap(v1, readHeap(v1) * 10); writeHeap(v1, readHeap(v1) * 2); print(readHeap(v1)); release( cnt )); acquire( cnt ); print(readHeap(v1) - 1); release( cnt )

Symbol table:
cnt -> 1
v1 -> (1, int)

Heap table:
1 -> 1

Output:

File table:

------------------------
ID: 2
Execution stack:
acquire( cnt ); writeHeap(v1, readHeap(v1) * 10); print(readHeap(v1)); release( cnt )

Symbol table:
cnt -> 1
v1 -> (1, int)

Heap table:
1 -> 1

Output:

File table:

------------------------
ID: 1
Execution stack:
fork(acquire( cnt ); writeHeap(v1, readHeap(v1) * 10); writeHeap(v1, readHeap(v1) * 2); print(readHeap(v1)); release( cnt ))
acquire( cnt ); print(readHeap(v1) - 1); release( cnt )

Symbol table:
cnt -> 1
v1 -> (1, int)

Heap table:
1 -> 1

Output:

File table:

------------------------
ID: 2
Execution stack:
acquire( cnt )
writeHeap(v1, readHeap(v1) * 10); print(readHeap(v1)); release( cnt )

Symbol table:
cnt -> 1
v1 -> (1, int)

Heap table:
1 -> 1

Output:

File table:

------------------------
ID: 1
Execution stack:
fork(acquire( cnt ); writeHeap(v1, readHeap(v1) * 10); writeHeap(v1, readHeap(v1) * 2); print(readHeap(v1)); release( cnt ))
acquire( cnt ); print(readHeap(v1) - 1); release( cnt )

Symbol table:
cnt -> 1
v1 -> (1, int)

Heap table:
1 -> 1

Output:

File table:

------------------------
ID: 2
Execution stack:
acquire( cnt )
writeHeap(v1, readHeap(v1) * 10); print(readHeap(v1)); release( cnt )

Symbol table:
cnt -> 1
v1 -> (1, int)

Heap table:
1 -> 1

Output:

File table:

------------------------
ID: 1
Execution stack:
acquire( cnt ); print(readHeap(v1) - 1); release( cnt )

Symbol table:
cnt -> 1
v1 -> (1, int)

Heap table:
1 -> 1

Output:

File table:

------------------------
ID: 2
Execution stack:
writeHeap(v1, readHeap(v1) * 10); print(readHeap(v1)); release( cnt )

Symbol table:
cnt -> 1
v1 -> (1, int)

Heap table:
1 -> 1

Output:

File table:

------------------------
ID: 3
Execution stack:
acquire( cnt ); writeHeap(v1, readHeap(v1) * 10); writeHeap(v1, readHeap(v1) * 2); print(readHeap(v1)); release( cnt )

Symbol table:
cnt -> 1
v1 -> (1, int)

Heap table:
1 -> 1

Output:

File table:

------------------------
ID: 1
Execution stack:
acquire( cnt ); print(readHeap(v1) - 1); release( cnt )

Symbol table:
cnt -> 1
v1 -> (1, int)

Heap table:
1 -> 1

Output:

File table:

------------------------
ID: 2
Execution stack:
writeHeap(v1, readHeap(v1) * 10); print(readHeap(v1)); release( cnt )

Symbol table:
cnt -> 1
v1 -> (1, int)

Heap table:
1 -> 1

Output:

File table:

------------------------
ID: 3
Execution stack:
acquire( cnt ); writeHeap(v1, readHeap(v1) * 10); writeHeap(v1, readHeap(v1) * 2); print(readHeap(v1)); release( cnt )

Symbol table:
cnt -> 1
v1 -> (1, int)

Heap table:
1 -> 1

Output:

File table:

------------------------
ID: 1
Execution stack:
acquire( cnt )
print(readHeap(v1) - 1); release( cnt )

Symbol table:
cnt -> 1
v1 -> (1, int)

Heap table:
1 -> 1

Output:

File table:

------------------------
ID: 2
Execution stack:
writeHeap(v1, readHeap(v1) * 10)
print(readHeap(v1)); release( cnt )

Symbol table:
cnt -> 1
v1 -> (1, int)

Heap table:
1 -> 1

Output:

File table:

------------------------
ID: 3
Execution stack:
acquire( cnt )
writeHeap(v1, readHeap(v1) * 10); writeHeap(v1, readHeap(v1) * 2); print(readHeap(v1)); release( cnt )

Symbol table:
cnt -> 1
v1 -> (1, int)

Heap table:
1 -> 1

Output:

File table:

------------------------
ID: 1
Execution stack:
acquire( cnt )
print(readHeap(v1) - 1); release( cnt )

Symbol table:
cnt -> 1
v1 -> (1, int)

Heap table:
1 -> 1

Output:

File table:

------------------------
ID: 2
Execution stack:
writeHeap(v1, readHeap(v1) * 10)
print(readHeap(v1)); release( cnt )

Symbol table:
cnt -> 1
v1 -> (1, int)

Heap table:
1 -> 1

Output:

File table:

------------------------
ID: 3
Execution stack:
acquire( cnt )
writeHeap(v1, readHeap(v1) * 10); writeHeap(v1, readHeap(v1) * 2); print(readHeap(v1)); release( cnt )

Symbol table:
cnt -> 1
v1 -> (1, int)

Heap table:
1 -> 1

Output:

File table:

------------------------
ID: 1
Execution stack:
acquire( cnt )
print(readHeap(v1) - 1); release( cnt )

Symbol table:
cnt -> 1
v1 -> (1, int)

Heap table:
1 -> 10

Output:

File table:

------------------------
ID: 2
Execution stack:
print(readHeap(v1)); release( cnt )

Symbol table:
cnt -> 1
v1 -> (1, int)

Heap table:
1 -> 10

Output:

File table:

------------------------
ID: 3
Execution stack:
acquire( cnt )
writeHeap(v1, readHeap(v1) * 10); writeHeap(v1, readHeap(v1) * 2); print(readHeap(v1)); release( cnt )

Symbol table:
cnt -> 1
v1 -> (1, int)

Heap table:
1 -> 10

Output:

File table:

------------------------
ID: 1
Execution stack:
acquire( cnt )
print(readHeap(v1) - 1); release( cnt )

Symbol table:
cnt -> 1
v1 -> (1, int)

Heap table:
1 -> 10

Output:

File table:

------------------------
ID: 2
Execution stack:
print(readHeap(v1)); release( cnt )

Symbol table:
cnt -> 1
v1 -> (1, int)

Heap table:
1 -> 10

Output:

File table:

------------------------
ID: 3
Execution stack:
acquire( cnt )
writeHeap(v1, readHeap(v1) * 10); writeHeap(v1, readHeap(v1) * 2); print(readHeap(v1)); release( cnt )

Symbol table:
cnt -> 1
v1 -> (1, int)

Heap table:
1 -> 10

Output:

File table:

------------------------
ID: 1
Execution stack:
acquire( cnt )
print(readHeap(v1) - 1); release( cnt )

Symbol table:
cnt -> 1
v1 -> (1, int)

Heap table:
1 -> 10

Output:

File table:

------------------------
ID: 2
Execution stack:
print(readHeap(v1))
release( cnt )

Symbol table:
cnt -> 1
v1 -> (1, int)

Heap table:
1 -> 10

Output:

File table:

------------------------
ID: 3
Execution stack:
acquire( cnt )
writeHeap(v1, readHeap(v1) * 10); writeHeap(v1, readHeap(v1) * 2); print(readHeap(v1)); release( cnt )

Symbol table:
cnt -> 1
v1 -> (1, int)

Heap table:
1 -> 10

Output:

File table:

------------------------
ID: 1
Execution stack:
acquire( cnt )
print(readHeap(v1) - 1); release( cnt )

Symbol table:
cnt -> 1
v1 -> (1, int)

Heap table:
1 -> 10

Output:

File table:

------------------------
ID: 2
Execution stack:
print(readHeap(v1))
release( cnt )

Symbol table:
cnt -> 1
v1 -> (1, int)

Heap table:
1 -> 10

Output:

File table:

------------------------
ID: 3
Execution stack:
acquire( cnt )
writeHeap(v1, readHeap(v1) * 10); writeHeap(v1, readHeap(v1) * 2); print(readHeap(v1)); release( cnt )

Symbol table:
cnt -> 1
v1 -> (1, int)

Heap table:
1 -> 10

Output:

File table:

------------------------
ID: 1
Execution stack:
acquire( cnt )
print(readHeap(v1) - 1); release( cnt )

Symbol table:
cnt -> 1
v1 -> (1, int)

Heap table:
1 -> 10

Output:
10

File table:

------------------------
ID: 2
Execution stack:
release( cnt )

Symbol table:
cnt -> 1
v1 -> (1, int)

Heap table:
1 -> 10

Output:
10

File table:

------------------------
ID: 3
Execution stack:
acquire( cnt )
writeHeap(v1, readHeap(v1) * 10); writeHeap(v1, readHeap(v1) * 2); print(readHeap(v1)); release( cnt )

Symbol table:
cnt -> 1
v1 -> (1, int)

Heap table:
1 -> 10

Output:
10

File table:

------------------------
ID: 1
Execution stack:
acquire( cnt )
print(readHeap(v1) - 1); release( cnt )

Symbol table:
cnt -> 1
v1 -> (1, int)

Heap table:
1 -> 10

Output:
10

File table:

------------------------
ID: 2
Execution stack:
release( cnt )

Symbol table:
cnt -> 1
v1 -> (1, int)

Heap table:
1 -> 10

Output:
10

File table:

------------------------
ID: 3
Execution stack:
acquire( cnt )
writeHeap(v1, readHeap(v1) * 10); writeHeap(v1, readHeap(v1) * 2); print(readHeap(v1)); release( cnt )

Symbol table:
cnt -> 1
v1 -> (1, int)

Heap table:
1 -> 10

Output:
10

File table:

------------------------
ID: 1
Execution stack:
acquire( cnt )
print(readHeap(v1) - 1); release( cnt )

Symbol table:
cnt -> 1
v1 -> (1, int)

Heap table:
1 -> 10

Output:
10

File table:

------------------------
ID: 2
Execution stack:

Symbol table:
cnt -> 1
v1 -> (1, int)

Heap table:
1 -> 10

Output:
10

File table:

------------------------
ID: 3
Execution stack:
acquire( cnt )
writeHeap(v1, readHeap(v1) * 10); writeHeap(v1, readHeap(v1) * 2); print(readHeap(v1)); release( cnt )

Symbol table:
cnt -> 1
v1 -> (1, int)

Heap table:
1 -> 10

Output:
10

File table:

------------------------
ID: 1
Execution stack:
acquire( cnt )
print(readHeap(v1) - 1); release( cnt )

Symbol table:
cnt -> 1
v1 -> (1, int)

Heap table:
1 -> 10

Output:
10

File table:

------------------------
ID: 3
Execution stack:
acquire( cnt )
writeHeap(v1, readHeap(v1) * 10); writeHeap(v1, readHeap(v1) * 2); print(readHeap(v1)); release( cnt )

Symbol table:
cnt -> 1
v1 -> (1, int)

Heap table:
1 -> 10

Output:
10

File table:

------------------------
ID: 1
Execution stack:
print(readHeap(v1) - 1); release( cnt )

Symbol table:
cnt -> 1
v1 -> (1, int)

Heap table:
1 -> 10

Output:
10

File table:

------------------------
ID: 3
Execution stack:
acquire( cnt )
writeHeap(v1, readHeap(v1) * 10); writeHeap(v1, readHeap(v1) * 2); print(readHeap(v1)); release( cnt )

Symbol table:
cnt -> 1
v1 -> (1, int)

Heap table:
1 -> 10

Output:
10

File table:

------------------------
ID: 1
Execution stack:
print(readHeap(v1) - 1); release( cnt )

Symbol table:
cnt -> 1
v1 -> (1, int)

Heap table:
1 -> 10

Output:
10

File table:

------------------------
ID: 3
Execution stack:
acquire( cnt )
writeHeap(v1, readHeap(v1) * 10); writeHeap(v1, readHeap(v1) * 2); print(readHeap(v1)); release( cnt )

Symbol table:
cnt -> 1
v1 -> (1, int)

Heap table:
1 -> 10

Output:
10

File table:

------------------------
ID: 1
Execution stack:
print(readHeap(v1) - 1)
release( cnt )

Symbol table:
cnt -> 1
v1 -> (1, int)

Heap table:
1 -> 10

Output:
10

File table:

------------------------
ID: 3
Execution stack:
acquire( cnt )
writeHeap(v1, readHeap(v1) * 10); writeHeap(v1, readHeap(v1) * 2); print(readHeap(v1)); release( cnt )

Symbol table:
cnt -> 1
v1 -> (1, int)

Heap table:
1 -> 10

Output:
10

File table:

------------------------
ID: 1
Execution stack:
print(readHeap(v1) - 1)
release( cnt )

Symbol table:
cnt -> 1
v1 -> (1, int)

Heap table:
1 -> 10

Output:
10

File table:

------------------------
ID: 3
Execution stack:
acquire( cnt )
writeHeap(v1, readHeap(v1) * 10); writeHeap(v1, readHeap(v1) * 2); print(readHeap(v1)); release( cnt )

Symbol table:
cnt -> 1
v1 -> (1, int)

Heap table:
1 -> 10

Output:
10

File table:

------------------------
ID: 1
Execution stack:
release( cnt )

Symbol table:
cnt -> 1
v1 -> (1, int)

Heap table:
1 -> 10

Output:
10
9

File table:

------------------------
ID: 3
Execution stack:
acquire( cnt )
writeHeap(v1, readHeap(v1) * 10); writeHeap(v1, readHeap(v1) * 2); print(readHeap(v1)); release( cnt )

Symbol table:
cnt -> 1
v1 -> (1, int)

Heap table:
1 -> 10

Output:
10
9

File table:

------------------------
ID: 1
Execution stack:
release( cnt )

Symbol table:
cnt -> 1
v1 -> (1, int)

Heap table:
1 -> 10

Output:
10
9

File table:

------------------------
ID: 3
Execution stack:
acquire( cnt )
writeHeap(v1, readHeap(v1) * 10); writeHeap(v1, readHeap(v1) * 2); print(readHeap(v1)); release( cnt )

Symbol table:
cnt -> 1
v1 -> (1, int)

Heap table:
1 -> 10

Output:
10
9

File table:

------------------------
ID: 1
Execution stack:

Symbol table:
cnt -> 1
v1 -> (1, int)

Heap table:
1 -> 10

Output:
10
9

File table:

------------------------
ID: 3
Execution stack:
writeHeap(v1, readHeap(v1) * 10); writeHeap(v1, readHeap(v1) * 2); print(readHeap(v1)); release( cnt )

Symbol table:
cnt -> 1
v1 -> (1, int)

Heap table:
1 -> 10

Output:
10
9

File table:

------------------------
ID: 3
Execution stack:
writeHeap(v1, readHeap(v1) * 10); writeHeap(v1, readHeap(v1) * 2); print(readHeap(v1)); release( cnt )

Symbol table:
cnt -> 1
v1 -> (1, int)

Heap table:
1 -> 10

Output:
10
9

File table:

------------------------
ID: 3
Execution stack:
writeHeap(v1, readHeap(v1) * 10)
writeHeap(v1, readHeap(v1) * 2); print(readHeap(v1)); release( cnt )

Symbol table:
cnt -> 1
v1 -> (1, int)

Heap table:
1 -> 10

Output:
10
9

File table:

------------------------
ID: 3
Execution stack:
writeHeap(v1, readHeap(v1) * 10)
writeHeap(v1, readHeap(v1) * 2); print(readHeap(v1)); release( cnt )

Symbol table:
cnt -> 1
v1 -> (1, int)

Heap table:
1 -> 10

Output:
10
9

File table:

------------------------
ID: 3
Execution stack:
writeHeap(v1, readHeap(v1) * 2); print(readHeap(v1)); release( cnt )

Symbol table:
cnt -> 1
v1 -> (1, int)

Heap table:
1 -> 100

Output:
10
9

File table:

------------------------
ID: 3
Execution stack:
writeHeap(v1, readHeap(v1) * 2); print(readHeap(v1)); release( cnt )

Symbol table:
cnt -> 1
v1 -> (1, int)

Heap table:
1 -> 100

Output:
10
9

File table:

------------------------
ID: 3
Execution stack:
writeHeap(v1, readHeap(v1) * 2)
print(readHeap(v1)); release( cnt )

Symbol table:
cnt -> 1
v1 -> (1, int)

Heap table:
1 -> 100

Output:
10
9

File table:

------------------------
ID: 3
Execution stack:
writeHeap(v1, readHeap(v1) * 2)
print(readHeap(v1)); release( cnt )

Symbol table:
cnt -> 1
v1 -> (1, int)

Heap table:
1 -> 100

Output:
10
9

File table:

------------------------
ID: 3
Execution stack:
print(readHeap(v1)); release( cnt )

Symbol table:
cnt -> 1
v1 -> (1, int)

Heap table:
1 -> 200

Output:
10
9

File table:

------------------------
ID: 3
Execution stack:
print(readHeap(v1)); release( cnt )

Symbol table:
cnt -> 1
v1 -> (1, int)

Heap table:
1 -> 200

Output:
10
9

File table:

------------------------
ID: 3
Execution stack:
print(readHeap(v1))
release( cnt )

Symbol table:
cnt -> 1
v1 -> (1, int)

Heap table:
1 -> 200

Output:
10
9

File table:

------------------------
ID: 3
Execution stack:
print(readHeap(v1))
release( cnt )

Symbol table:
cnt -> 1
v1 -> (1, int)

Heap table:
1 -> 200

Output:
10
9

File table:

------------------------
ID: 3
Execution stack:
release( cnt )

Symbol table:
cnt -> 1
v1 -> (1, int)

Heap table:
1 -> 200

Output:
10
9
200

File table:

------------------------
ID: 3
Execution stack:
release( cnt )

Symbol table:
cnt -> 1
v1 -> (1, int)

Heap table:
1 -> 200

Output:
10
9
200

File table:

------------------------
ID: 3
Execution stack:

Symbol table:
cnt -> 1
v1 -> (1, int)

Heap table:
1 -> 200

Output:
10
9
200

File table:

------------------------
